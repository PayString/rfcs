[
  {
    "description": "0. PayID Happy path",
    "payIdInput": "payid:alice$example.com",
    "expectedAccountId": "alice",
    "expectedHost": "example.com",
    "expectedStringValue": "payid:alice$example.com"
  },
  {
    "description": "1. `unreserved` account characters",
    "payIdInput": "payid:abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789-._~$example.net",
    "expectedAccountId": "abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz0123456789-._~",
    "expectedHost": "example.net",
    "expectedStringValue": "payid:abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz0123456789-._~$example.net"
  },
  {
    "description": "2. (sub-delims)",
    "payIdInput": "payid:!$&'()*+,;=$example.net",
    "expectedAccountId": "!$&'()*+,;=",
    "expectedHost": "example.net",
    "expectedStringValue": "payid:!$&'()*+,;=$example.net"
  },
  {
    "description": "3. (sub-delims first, then unreserved)",
    "payIdInput": "payid:!alice$example.net",
    "expectedAccountId": "!alice",
    "expectedHost": "example.net",
    "expectedStringValue": "payid:!alice$example.net"
  },
  {
    "description": "4. (unreserved first, then sub-delims)",
    "payIdInput": "payid:aliCE$!example.net",
    "expectedAccountId": "alice",
    "expectedHost": "!example.net",
    "expectedStringValue": "payid:alice$!example.net"
  },
  {
    "description": "5. (percent-encoded $)",
    "payIdInput": "payid:alice%24wallet.example$bank.example.net",
    "expectedAccountId": "alice%24wallet.example",
    "expectedHost": "bank.example.net",
    "expectedStringValue": "payid:alice%24wallet.example$bank.example.net"
  },
  {
    "description": "6 (encoded IDN)",
    "payIdInput": "payid:alice$nic.xn--rovu88b",
    "expectedAccountId": "alice",
    "expectedHost": "nic.xn--rovu88b",
    "expectedStringValue": "payid:alice$nic.xn--rovu88b"
  },
  {
    "description": "7 (host with port)",
    "payIdInput": "payid:alice$example.com:8080",
    "expectedAccountId": "alice",
    "expectedHost": "example.com:8080",
    "expectedStringValue": "payid:alice$example.com:8080"
  },
  {
    "description": "8. (Capitalized PAYID)",
    "payIdInput": "PAYID:alice$example.com:8080",
    "expectedAccountId": "alice",
    "expectedHost": "example.com:8080",
    "expectedStringValue": "payid:alice$example.com:8080"
  },
  {
    "description": "9. (accept \":\" in host)",
    "payIdInput": "payid:alice$:example.com",
    "expectedAccountId": "alice",
    "expectedHost": ":example.com",
    "expectedStringValue": "payid:alice$:example.com"
  },
  {
    "description": "10. Double-embedded dollar-signs",
    "payIdInput": "payid:alice$foo.example.com$bar.example.com",
    "expectedAccountId": "alice$foo.example.com",
    "expectedHost": "bar.example.com",
    "expectedStringValue": "payid:alice$foo.example.com$bar.example.com"
  },
  {
    "description": "11. Triple-embedded dollar-signs",
    "payIdInput": "payid:alice$foo.example.com$bar.example.com$baz.example.com",
    "expectedAccountId": "alice$foo.example.com$bar.example.com",
    "expectedHost": "baz.example.com",
    "expectedStringValue": "payid:alice$foo.example.com$bar.example.com$baz.example.com"
  },
  {
    "description": "12. Percent-Encoded Email address",
    "payIdInput": "payid:alice%40gmail.com$example.com",
    "expectedAccountId": "alice%40gmail.com",
    "expectedHost": "example.com",
    "expectedStringValue": "payid:alice%40example.com$example.com"
  },
  {
    "description": "13. Percent-Encoded Carat",
    "payIdInput": "payid:alice%5E$example.com",
    "expectedAccountId": "alice%5E",
    "expectedHost": "example.com",
    "expectedStringValue": "payid:alice%5E$example.com"
  },
  {
    "description": "14. path-abempty (begins with '/' or is empty)",
    "payIdInput": "payid:/$example.com",
    "expectedAccountId": "/",
    "expectedHost": "example.com",
    "expectedStringValue": "payid:/$example.com"
  },
  {
    "description": "15. path-abempty (begins with '/' or is empty)",
    "payIdInput": "payid:$example.com",
    "expectedAccountId": "",
    "expectedHost": "example.com",
    "expectedStringValue": "payid:$example.com"
  },
  {
    "description": "16. path-absolute (1) begins with '/' and with at least 1 char",
    "payIdInput": "payid:/t$example.com",
    "expectedAccountId": "/t",
    "expectedHost": "example.com",
    "expectedStringValue": "payid:/t$example.com"
  },
  {
    "description": "17. path-absolute (2) begins with '/' and with at least 1 char",
    "payIdInput": "payid:/test/user$example.com",
    "expectedAccountId": "/test/user",
    "expectedHost": "example.com",
    "expectedStringValue": "payid:/test/user$example.com"
  },
  {
    "description": "18. path-absolute (3) begins with '/' and with at least 1 char",
    "payIdInput": "payid:test/user/$example.com",
    "expectedAccountId": "test/user/",
    "expectedHost": "example.com",
    "expectedStringValue": "payid:test/user/$example.com"
  },
  {
    "description": "19. path-absolute (4) begins with '/' and with at least 1 char",
    "payIdInput": "payid:/test/user/$example.com",
    "expectedAccountId": "/test/user/",
    "expectedHost": "example.com",
    "expectedStringValue": "payid:/test/user/$example.com"
  },
  {
    "description": "20. path-noscheme (begins with a non-colon segment)",
    "payIdInput": "payid:f$example.com",
    "expectedAccountId": "f",
    "expectedHost": "example.com",
    "expectedStringValue": "payid:f$example.com"
  },
  {
    "description": "21. path-rootless (allows a colon to start)",
    "payIdInput": "payid::$example.com",
    "expectedAccountId": ":",
    "expectedHost": "example.com",
    "expectedStringValue": "payid::$example.com"
  },
  {
    "description": "22. Allowed chars",
    "payIdInput": "payid:foo$fa$t.com",
    "expectedAccountId": "foo$fa",
    "expectedHost": "t.com",
    "expectedStringValue": "payid:foo$fa$t.com"
  }
]
