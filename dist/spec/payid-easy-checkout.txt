



Network Working Group                                          N. Kramer
Internet-Draft                                                I. Simpson
Intended status: Standards Track                                  Ripple
Expires: January 24, 2021                                  July 23, 2020


                 Draft 1 - PayID Easy Checkout Protocol
                      payid-easy-checkout-protocol

Abstract

   This specification formalizes how a payment recipient, such as a
   merchant or a non-profit, can automatically initiate a payment from a
   payer using only the payer's PayID.

Feedback

   This specification is a draft proposal, and is part of the PayID
   Protocol [1] initiative.  Feedback related to this document should be
   sent in the form of a Github issue at: https://github.com/payid-
   org/rfcs/issues.

Status of This Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at https://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on January 24, 2021.

Copyright Notice

   Copyright (c) 2020 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents
   (https://trustee.ietf.org/license-info) in effect on the date of
   publication of this document.  Please review these documents



Kramer & Simpson        Expires January 24, 2021                [Page 1]

Internet-Draft   Draft 1 - PayID Easy Checkout Protocol        July 2020


   carefully, as they describe your rights and restrictions with respect
   to this document.  Code Components extracted from this document must
   include Simplified BSD License text as described in Section 4.e of
   the Trust Legal Provisions and are provided without warranty as
   described in the Simplified BSD License.

Table of Contents

   1.  Terminology . . . . . . . . . . . . . . . . . . . . . . . . .   2
   2.  Introduction  . . . . . . . . . . . . . . . . . . . . . . . .   3
   3.  PayID Easy Checkout Protocol  . . . . . . . . . . . . . . . .   3
     3.1.  PayID Easy Checkout Discovery . . . . . . . . . . . . . .   4
       3.1.1.  Step 1: Assemble PayID Easy Checkout Discovery URL  .   4
       3.1.2.  Step 2: Query PayID Easy Checkout Discovery URL . . .   4
       3.1.3.  Step 3: Parse PayID Easy Checkout Metadata  . . . . .   4
     3.2.  PayID Easy Checkout URL Assembly  . . . . . . . . . . . .   5
       3.2.1.  PayID Easy Checkout URL Query Parameters  . . . . . .   5
   4.  PayID Easy Checkout JRDs  . . . . . . . . . . . . . . . . . .   7
   5.  Security Considerations . . . . . . . . . . . . . . . . . . .   7
     5.1.  PayID Easy Checkout Redirection URI Manipulation  . . . .   7
     5.2.  Access Control  . . . . . . . . . . . . . . . . . . . . .   8
   6.  IANA Considerations . . . . . . . . . . . . . . . . . . . . .   8
   7.  Acknowledgments . . . . . . . . . . . . . . . . . . . . . . .   8
   8.  Appendix  . . . . . . . . . . . . . . . . . . . . . . . . . .   8
     8.1.  Motivation  . . . . . . . . . . . . . . . . . . . . . . .   8
       8.1.1.  Design Goals  . . . . . . . . . . . . . . . . . . . .   9
     8.2.  Example Usage . . . . . . . . . . . . . . . . . . . . . .   9
       8.2.1.  PayID Easy Checkout Initiation  . . . . . . . . . . .   9
       8.2.2.  PayID Easy Checkout Wallet Discovery  . . . . . . . .   9
       8.2.3.  Assemble PayID Easy Checkout URL with Query
               Parameters  . . . . . . . . . . . . . . . . . . . . .  10
       8.2.4.  Redirect Payer to Their Wallet  . . . . . . . . . . .  11
       8.2.5.  Payer Confirms Payment  . . . . . . . . . . . . . . .  11
   9.  References  . . . . . . . . . . . . . . . . . . . . . . . . .  11
     9.1.  Normative References  . . . . . . . . . . . . . . . . . .  11
     9.2.  Informative References  . . . . . . . . . . . . . . . . .  12
     9.3.  URIs  . . . . . . . . . . . . . . . . . . . . . . . . . .  12
   Authors' Addresses  . . . . . . . . . . . . . . . . . . . . . . .  12

1.  Terminology

   This protocol can be referred to as the "PayId Easy Checkout
   Protocol".  It uses the following terminology:

   o  PayID client: a client that queries a PayID server using the PayID
      Protocol as defined in [PAYID-PROTOCOL][].





Kramer & Simpson        Expires January 24, 2021                [Page 2]

Internet-Draft   Draft 1 - PayID Easy Checkout Protocol        July 2020


   o  PayID server: the endpoint that returns payment account(s)
      information, which conforms to the PayID Protocol.

   o  Recipient: Individual or entity receiving a payment (e.g.,
      e-commerce merchant, charity).

   o  Payer: Individual or entity originating a payment to a
      "recipient".

   o  Wallet: A device or application that holds funds (may be a non-
      custodial wallet).

   o  PayID Easy Checkout URL: The URL that is the result of the PayID
      Easy Checkout protocol; can be used to redirect a client to a
      wallet corresponding to a particular PayID.

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
   "OPTIONAL" in this document are to be interpreted as described in
   [RFC2119] and [RFC9174][].

2.  Introduction

   The PayID Easy Checkout Protocol is a minimal protocol that allows a
   recipient (e.g., an online merchant or a charity) to request a
   payment from a payer using only the payer's PayID.  Implementations
   of the protocol should require little to no server-side engineering
   efforts, while creating an improved and uniform user experience for
   payers.

   The main focus of the Protocol is on PayID Easy Checkout Discovery,
   which defines how a PayID client can use a PayID to retrieve a PayID
   Easy Checkout URL which represents a resource that the payer's
   digital wallet can use to initiate a payment to the merchant.

   Though the Section 8 of this specification provides an example usage
   of a PayID Easy Checkout URL using Web Redirects, supplemental RFCs
   are needed to define the different ways in which a PayID client can
   utilize a PayID Easy Checkout URL.

3.  PayID Easy Checkout Protocol

   The PayID Easy Checkout Protocol can be used to facilitate an end-to-
   end checkout flow between a payment recipient, such as an online
   merchant, and a sending client, such as a wallet.

   The protocol is comprised of two parts:




Kramer & Simpson        Expires January 24, 2021                [Page 3]

Internet-Draft   Draft 1 - PayID Easy Checkout Protocol        July 2020


   1.  PayID Easy Checkout Discovery

   2.  PayID Easy Checkout URL Assembly

3.1.  PayID Easy Checkout Discovery

   PayID Easy Checkout Discovery extends [PAYID-DISCOVERY] by defining a
   new link in the PayID metadata JRD returned by a PayID Discovery
   query.  This link, defined in the JRD section (Section 4) of this
   specification, includes the PayID Easy Checkout URL representing a
   resource on the wallet which can be used to complete a payment.

   Payment receivers who wish to initiate an Easy Checkout flow MUST
   query the sender's PayID Discovery server to obtain a PayID Easy
   Checkout URL.  PayID servers that wish to enable PayID Easy Checkout
   MUST include a JRD Link conforming to the definition in the JRD
   section (Section 4) of this paper in all PayID Easy Checkout
   Discovery responses.

   Payment receivers SHOULD implement fallback measures to complete a
   checkout flow if a user's wallet does not support PayID Easy
   Checkout.

   The following steps describe how a PayID client can query a PayID
   server to obtain a PayID Easy Checkout URL.

3.1.1.  Step 1: Assemble PayID Easy Checkout Discovery URL

   The process of assembling a PayID Discovery URL is defined in section
   4.1.1 of [PAYID-DISCOVERY], and is the same as for this protocol.

3.1.2.  Step 2: Query PayID Easy Checkout Discovery URL

   Querying the PayID Discovery URL is defined in section 4.1.2 of
   [PAYID-DISCOVERY], and is performed in the same way as this protocol.

   Clients SHOULD implement fallback measures to complete checkout if
   the PayID Easy Checkout Discovery query fails.

3.1.3.  Step 3: Parse PayID Easy Checkout Metadata

   If PayID Easy Checkout is supported, a PayID Discovery server MUST
   respond with an HTTP status code "200" and a JSON payload containing
   a JSON Resource Descriptor (JRD) that contains a link conforming to
   the JRD section (Section 4) of this document.

   For example, a PayID server might respond to a PayID Discovery query
   with the following payload:



Kramer & Simpson        Expires January 24, 2021                [Page 4]

Internet-Draft   Draft 1 - PayID Easy Checkout Protocol        July 2020


    {
       "subject": "payid:alice$wallet.com",
       "links": [
           {
               "rel" : "https://payid.org/ns/payid-easy-checkout/1.0",
               "href": "https://wallet.com/checkout"
           }
       ]
    }

   A PayID Discovery client MUST parse this response to find the PayID
   Easy Checkout Link.  If the JRD returned from the PayID Discovery
   query does not contain a PayID Easy Checkout Link in its 'links'
   collection, PayID Easy Checkout is considered to have failed.  Once a
   PayID Easy Checkout URL has been obtained from the PayID Easy
   Checkout Link, PayID Easy Checkout Discovery is considered to be
   complete.

3.2.  PayID Easy Checkout URL Assembly

   A PayID Easy Checkout URL represents the resource on a wallet that
   can be used by a sender to complete a payment.  However, before
   directing a payer to their sending client, the payment receiver MUST
   append all of the query parameters defined in the following section
   (Section 3.2.1).

   Once a PayID Easy Checkout URL is assembled, PayID Easy Checkout is
   considered to be complete.

3.2.1.  PayID Easy Checkout URL Query Parameters

   This specification defines several query parameter names and
   corresponding datatypes which MUST be added to the PayID Easy
   Checkout URL before redirecting a payer to their wallet client.  The
   PayID Easy Checkout URL SHOULD be parsed by the wallet in order to
   retrieve any values set by the payment recipient.  It is RECOMMENDED
   that wallets use these values to pre-populate a payment transaction.














Kramer & Simpson        Expires January 24, 2021                [Page 5]

Internet-Draft   Draft 1 - PayID Easy Checkout Protocol        July 2020


   +----------------+---------+----------------------------------------+
   | Name           | Type    | Description                            |
   +----------------+---------+----------------------------------------+
   | amount         | integer | The amount that should be sent by the  |
   |                |         | sender to the receiver                 |
   |                |         |                                        |
   | receiverPayID  | string  | The (PayID URI)[PAYID-URI] of the      |
   |                |         | receiver                               |
   |                |         |                                        |
   | assetCode      | string  | The ISO-4217 currency code that        |
   |                |         | denominates the amount                 |
   |                |         |                                        |
   | assetScale     | short   | Defines how many units make up one     |
   |                |         | regular unit of the assetCode          |
   |                |         |                                        |
   | paymentNetwork | string  | The payment network, as defined in     |
   |                |         | [PAYID-PROTOCOL][], that the sender    |
   |                |         | should use to send a payment.          |
   |                |         |                                        |
   | nextUrl        | HTTP    | A URL that the sender's wallet can     |
   |                | Url     | navigate a sender to after the sender  |
   |                | string  | completes a payment                    |
   +----------------+---------+----------------------------------------+

   When adding values into a URI 'query' part as defined by [RFC3986][],
   values with characters outside the character set allowed by query
   parameters in [RFC3986][] MUST be percent or otherwise encoded.

   Protocols MAY define additional query parameter names and syntax
   rules, but MUST NOT change the meaning of the variables specified in
   this document.

   For example:

Input:    alice$wallet.com
          amount=10
          receiverPayID=pay$merchant.com
          assetCode=XRP
          assetScale=6
          network=XRPL
          nextUrl=https://merchant.com/thankyou
PayID Easy Checkout URL: https://wallet.com/checkout
Output:   https://wallet.com/checkout?amount=100000&receiverPayId=payid%2Apay%24merchant.com&assetCode=XRP&assetScale=6&paymentNetwork=XRPL&nextUrl=https://merchant.com/thankyou








Kramer & Simpson        Expires January 24, 2021                [Page 6]

Internet-Draft   Draft 1 - PayID Easy Checkout Protocol        July 2020


4.  PayID Easy Checkout JRDs

   This section defines the PayID Easy Checkout Link, which conforms to
   section 4.4 of the Webfinger RFC.  In order for a PayID server to
   enable PayID Easy Checkout, a PayID Discovery query to the server
   MUST return a JRD containing a PayID Easy Checkout Link.

   The Link MUST include the Link Relation Type defined in PayID Easy
   Checkout URL (Section 6) in the object's 'rel' field.  The Link MUST
   also include a PayID Easy Checkout URL in the 'href' field of the
   link.

   * 'rel': `https://payid.org/ns/payid-easy-checkout-uri/1.0`
   * 'href': A PayID Easy Checkout URL

   The following is an example of a PayID Easy Checkout Link:

   {
       "rel": "https://payid.org/ns/payid-easy-checkout-uri/1.0",
       "href": "https://wallet.com/checkout"
   }

5.  Security Considerations

   Various security considerations should be taken into account for
   PayID Easy Checkout.

   The security considerations for PayID Easy Checkout Discovery are
   discussed in section 6 of [PAYID-DISCOVERY].

5.1.  PayID Easy Checkout Redirection URI Manipulation

   When a payer uses the resource located at the PayID Easy Checkout
   URL, a hijacker could manipulate the data encoded in the URL to trick
   the sender into sending a payment to a different PayID than was
   originally requested, or manipulate other points of PayID Easy
   Checkout data to trick the sender.

   Additionally, if a hijacker gained access to the merchant client,
   they could replace the PayID Easy Checkout URL for the purposes of a
   phishing attack.

   Current work on the PayID Protocol and its extensions may prove
   useful in mitigating these risks.







Kramer & Simpson        Expires January 24, 2021                [Page 7]

Internet-Draft   Draft 1 - PayID Easy Checkout Protocol        July 2020


5.2.  Access Control

   As with all web resources, access to the PayID Discovery resource
   could require authentication.  See section 6 of [RFC7033][] for
   Access Control considerations.

   Furthermore, it is RECOMMENDED that PayID servers only expose PayID
   Easy Checkout URLs which resolve to a protected resource.

6.  IANA Considerations

   ## New Link Relation Types This document defines the following Link
   relation type per [RFC7033][].  See section 3 for examples of each
   type of Link.

   ### PayID Easy Checkout URL

 * Relation Type ('rel'): `https://payid.org/ns/payid-easy-checkout/1.0`
 * Media Type: `application/jrd+json`
 * Description: PayID Easy Checkout URL, version 1.0

7.  Acknowledgments

8.  Appendix

8.1.  Motivation

   The PayID Easy Checkout Protocol aims to enable a consistent user
   experience for payers paying for goods or services by standardizing
   the interaction between merchants/non-profits and customer/donor
   wallets.  Given the ability to assign arbitrary metadata to a PayID
   as defined in [PAYID-DISCOVERY], there is an opportunity to
   standardize the set of interactions between merchant and payer,
   specifically the process by which a merchant directs a payer to their
   digital wallet to complete a payment.  We believe this protocol will
   enable an improved paying experience by reducing the number of steps
   a payer must take to complete a transaction.

   PayID Easy Checkout also limits the engineering effort needed to
   implement the protocol.  Clients wishing to adopt this pattern should
   only need to implement UI-level changes in order to make the flow
   function as intended, which may aid in expanding overall adoption,
   further enhancing the protocol's user experience benefits.








Kramer & Simpson        Expires January 24, 2021                [Page 8]

Internet-Draft   Draft 1 - PayID Easy Checkout Protocol        July 2020


8.1.1.  Design Goals

8.1.1.1.  Minimal effort for the Payer

   In order for a payer to checkout using the PayID Easy Checkout
   protocol, the payer only needs to provide a merchant with their PayID
   Easy Checkout enabled PayID.

8.1.1.2.  No New Server-Side Software

   Apart from a PayID Discovery compliant PayID Server, The PayID Easy
   Checkout Protocol does not require server-side software to be run by
   either the payer or merchant for a payment.  The PayID server is
   capable of providing details of where to send the payer via the PayID
   Discovery Protocol.  Assuming the wallet used by the payer has
   implemented support in their UI for the PayID Easy Checkout Protocol,
   the payer can be redirected to their wallet to complete their
   transaction.

8.2.  Example Usage

   This section shows a non-normative example of PayID Easy Checkout
   between a hypothetical merchant and payer.  The merchant accepts
   payments using the PayID pay$merchant.com, and the payer controls the
   PayID alice$wallet.com.

8.2.1.  PayID Easy Checkout Initiation

   In this example, the payer might place some items in an online
   shopping cart on the merchant's web-site, then choose to checkout.
   The merchant would then render a form asking for the payer's PayID,
   as well as a "Checkout with PayID" button.  Once the payer inputs
   their PayID "alice$wallet.com" and clicks the "Checkout with PayID"
   button, the merchant begins the PayID Easy Checkout flow.

8.2.2.  PayID Easy Checkout Wallet Discovery

   The merchant UI would first assemble the PayID Easy Checkout URL as
   defined in PayID Easy Checkout Discovery (Section 3.1), yielding the
   URL "https://wallet.com/.well-known/
   webfinger?resource=payid%3Aalice%24wallet.com".  The merchant UI
   would then query the assembled URL (Section 3.1.2).

   The HTTP request in this example would look like this:

   GET /.well-known/webfinger?resource=payid%3Aalice%24wallet.com
   Host: wallet.com




Kramer & Simpson        Expires January 24, 2021                [Page 9]

Internet-Draft   Draft 1 - PayID Easy Checkout Protocol        July 2020


   If the payer's PayID server has enabled PayID Easy Checkout in their
   wallet, the server would respond with something like this:

    HTTP/1.1 200 OK
    Access-Control-Allow-Origin: *
    Content-Type: application/jrd+json

    {
      "subject" : "payid:alice$wallet.com",
      "links" :
      [
        {
          "rel": "https://payid.org/ns/payid-easy-checkout/1.0",
          "template": "https://wallet.com/checkout"
        }
      ]
    }

8.2.3.  Assemble PayID Easy Checkout URL with Query Parameters

   The merchant UI would parse the PayID Discovery response and iterate
   over the 'links' collection to find the link with the Relation Type
   of "https://payid.org/ns/payid-easy-checkout/1.0".  The merchant UI
   would then add all of the query parameters defined in PayID Easy
   Checkout URL Query Parameters (Section 3.2.1) to the URL included in
   the JRD Link.  One query parameter of note is the "nextUrl"
   parameter, which allows the merchant to supply a redirect or callback
   URL for the sender's wallet to call once the payer has confirmed the
   payment.  In this example, the merchant would like to display a
   "Thank You" page, and replaces "{nextUrl}" with
   "https://merchant.com/thankyou".

8.2.3.1.  Correlating a Payment to an Invoice

   Merchants and non-profits will often times need to correlate discrete
   layer 1 payments to invoice or transaction entities in the merchants'
   native systems.  The merchant in this example may have an invoice
   tracking system, on which an invoice gets created for the goods that
   the payer is buying with a unique identifier of "1045464".  A common
   practice for correlating layer 1 payments to a specific transaction
   or invoice is to accept payments on a different layer 1 address for
   each invoice so that the merchant can listen for payments into that
   address and tie the payment to the invoice.  However, because the
   PayID Easy Checkout URL only provides the receiver's PayID, there is
   currently no way to associate the address that is given to the payer
   to the invoice.





Kramer & Simpson        Expires January 24, 2021               [Page 10]

Internet-Draft   Draft 1 - PayID Easy Checkout Protocol        July 2020


   In order to accomplish this, a merchant could provide a unique PayID
   containing the invoice identifier for each PayID Easy Checkout
   transaction.  In this example, the merchant would first associate a
   payment address with the invoice ID, and would then redirect the
   payer to their wallet with the "receiverPayID" query parameter set to
   "pay-1045464$merchant.com".  When the merchant PayID server receives
   a query for the address associated with that PayID, they could return
   the previously stored payment address.  When the merchant receives a
   payment to that address, they can then associate the layer 1 payment
   with the invoice.

8.2.4.  Redirect Payer to Their Wallet

   Once the merchant UI populates the required query parameters in the
   URL template, the merchant UI redirects the payer to the Redirect URL
   so that the payer can confirm the payment.

8.2.5.  Payer Confirms Payment

   After the payer clicks the "Pay with PayID" button the merchant's UI,
   and the merchant performs the previous steps, the payer will be
   redirected to the Redirect URL, which is a front end resource of the
   wallet.  The wallet UI can read the query parameters from the
   Redirect URL and render a confirmation page or modal with all of the
   required fields pre-populated.

   Once the payer confirms the payment, the wallet would perform a PayID
   address lookup on the "receiverPayId" query parameter to get the
   payment address of the merchant and submit a transaction to the
   underlying ledger or payment system.  The merchant can then redirect
   the user back to the URL specified in the "nextUrl" query parameter,
   which will display the "Thank You" page of the merchant.

9.  References

9.1.  Normative References

   [PAYID-DISCOVERY]
              Fuelling, D., "PayID Discovery", n.d..

   [PAYID-URI]
              Fuelling, D., "The 'payid' URI Scheme", n.d.,
              <https://tbd.example.com/>.

   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119,
              DOI 10.17487/RFC2119, March 1997,
              <https://www.rfc-editor.org/info/rfc2119>.



Kramer & Simpson        Expires January 24, 2021               [Page 11]

Internet-Draft   Draft 1 - PayID Easy Checkout Protocol        July 2020


   [RFC2818]  Rescorla, E., "HTTP Over TLS", RFC 2818,
              DOI 10.17487/RFC2818, May 2000,
              <https://www.rfc-editor.org/info/rfc2818>.

   [RFC6265]  Barth, A., "HTTP State Management Mechanism", RFC 6265,
              DOI 10.17487/RFC6265, April 2011,
              <https://www.rfc-editor.org/info/rfc6265>.

   [RFC6570]  Gregorio, J., Fielding, R., Hadley, M., Nottingham, M.,
              and D. Orchard, "URI Template", RFC 6570,
              DOI 10.17487/RFC6570, March 2012,
              <https://www.rfc-editor.org/info/rfc6570>.

   [RFC7231]  Fielding, R., Ed. and J. Reschke, Ed., "Hypertext Transfer
              Protocol (HTTP/1.1): Semantics and Content", RFC 7231,
              DOI 10.17487/RFC7231, June 2014,
              <https://www.rfc-editor.org/info/rfc7231>.

   [RFC7413]  Cheng, Y., Chu, J., Radhakrishnan, S., and A. Jain, "TCP
              Fast Open", RFC 7413, DOI 10.17487/RFC7413, December 2014,
              <https://www.rfc-editor.org/info/rfc7413>.

   [RFC8446]  Rescorla, E., "The Transport Layer Security (TLS) Protocol
              Version 1.3", RFC 8446, DOI 10.17487/RFC8446, August 2018,
              <https://www.rfc-editor.org/info/rfc8446>.

9.2.  Informative References

   [RFC5988]  Nottingham, M., "Web Linking", RFC 5988,
              DOI 10.17487/RFC5988, October 2010,
              <https://www.rfc-editor.org/info/rfc5988>.

9.3.  URIs

   [1] https://payid.org/

Authors' Addresses

   Noah Kramer
   Ripple
   315 Montgomery Street
   San Francisco, CA  94104
   US

   Phone: -----------------
   Email: nkramer@ripple.com
   URI:   https://www.ripple.com




Kramer & Simpson        Expires January 24, 2021               [Page 12]

Internet-Draft   Draft 1 - PayID Easy Checkout Protocol        July 2020


   Ian Simpson
   Ripple
   315 Montgomery Street
   San Francisco, CA  94104
   US

   Phone: -----------------
   Email: isimpson@ripple.com
   URI:   https://www.ripple.com










































Kramer & Simpson        Expires January 24, 2021               [Page 13]
