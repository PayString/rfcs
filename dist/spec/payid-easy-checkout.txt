



Network Working Group                                          N. Kramer
Internet-Draft                                                I. Simpson
Intended status: Standards Track                                  Ripple
Expires: January 14, 2021                                  July 13, 2020


                 Draft 1 - PayID Easy Checkout Protocol
                      payid-easy-checkout-protocol

Abstract

   This specification formalizes how a payment recipient, such as a
   merchant or a non-profit, can automatically navigate a user to the
   user's wallet using only a PayID for the purposes of completing an
   online payment such as a checkout or donation flow.

Feedback

   This specification is a draft proposal, and is part of the PayID
   Protocol [1] initiative.  Feedback related to this document should be
   sent in the form of a Github issue at: https://github.com/payid-
   org/rfcs/issues.

Status of This Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at https://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on January 14, 2021.

Copyright Notice

   Copyright (c) 2020 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents
   (https://trustee.ietf.org/license-info) in effect on the date of



Kramer & Simpson        Expires January 14, 2021                [Page 1]

Internet-Draft   Draft 1 - PayID Easy Checkout Protocol        July 2020


   publication of this document.  Please review these documents
   carefully, as they describe your rights and restrictions with respect
   to this document.  Code Components extracted from this document must
   include Simplified BSD License text as described in Section 4.e of
   the Trust Legal Provisions and are provided without warranty as
   described in the Simplified BSD License.

Table of Contents

   1.  Terminology . . . . . . . . . . . . . . . . . . . . . . . . .   2
   2.  Introduction  . . . . . . . . . . . . . . . . . . . . . . . .   3
   3.  PayID Easy Checkout Protocol  . . . . . . . . . . . . . . . .   3
     3.1.  PayID Easy Checkout Discovery . . . . . . . . . . . . . .   4
       3.1.1.  Step 1: Assemble PayID Easy Checkout Discovery URL  .   4
       3.1.2.  Step 2: Query PayID Discovery URL . . . . . . . . . .   4
       3.1.3.  Step 3: Parse PayID Easy Checkout Metadata  . . . . .   5
       3.1.4.  Template Syntax . . . . . . . . . . . . . . . . . . .   5
     3.2.  PayID Easy Checkout URL Assembly  . . . . . . . . . . . .   6
   4.  PayID Easy Checkout JRDs  . . . . . . . . . . . . . . . . . .   7
   5.  Security Considerations . . . . . . . . . . . . . . . . . . .   7
     5.1.  PayID Easy Checkout Redirection URI Manipulation  . . . .   8
     5.2.  Access Control  . . . . . . . . . . . . . . . . . . . . .   8
   6.  IANA Considerations . . . . . . . . . . . . . . . . . . . . .   8
   7.  Acknowledgments . . . . . . . . . . . . . . . . . . . . . . .   8
   8.  Appendix  . . . . . . . . . . . . . . . . . . . . . . . . . .   8
     8.1.  Motivation  . . . . . . . . . . . . . . . . . . . . . . .   8
       8.1.1.  Design Goals  . . . . . . . . . . . . . . . . . . . .   9
     8.2.  Example Usage . . . . . . . . . . . . . . . . . . . . . .   9
       8.2.1.  PayID Easy Checkout Initiation  . . . . . . . . . . .  10
       8.2.2.  PayID Easy Checkout Wallet Discovery  . . . . . . . .  10
       8.2.3.  Expand Wallet Discovery URL Template  . . . . . . . .  10
       8.2.4.  Redirect Customer to Their Wallet . . . . . . . . . .  11
       8.2.5.  Customer Confirms Payment . . . . . . . . . . . . . .  11
   9.  References  . . . . . . . . . . . . . . . . . . . . . . . . .  11
     9.1.  Normative References  . . . . . . . . . . . . . . . . . .  11
     9.2.  Informative References  . . . . . . . . . . . . . . . . .  12
     9.3.  URIs  . . . . . . . . . . . . . . . . . . . . . . . . . .  12
   Authors' Addresses  . . . . . . . . . . . . . . . . . . . . . . .  12

1.  Terminology

   This protocol can be referred to as the "PayId Easy Checkout
   Protocol".  It uses the following terminology:

   o  PayID client: a client that queries a PayID server using the PayID
      Protocol as defined in [PAYID-PROTOCOL][].





Kramer & Simpson        Expires January 14, 2021                [Page 2]

Internet-Draft   Draft 1 - PayID Easy Checkout Protocol        July 2020


   o  PayID server: the endpoint that returns payment account(s)
      information, which conforms to the PayID Protocol.

   o  merchant: individual or entity receiving the payment (ie
      e-commerce merchant, charity).

   o  customer: individual or entity originating the payment to the
      "merchant".

   o  wallet: the holder of funds for the "sender" (may or may not be
      custodied).

   o  Redirect URL: The URL that is the result of the PayID Easy
      Checkout protocol, and which can be used to redirect a client to a
      wallet corresponding to a particular PayID.

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
   "OPTIONAL" in this document are to be interpreted as described in
   [RFC2119] and [RFC9174][].

2.  Introduction

   The PayID Easy Checkout Protocol is a minimal protocol designed to
   provide a standard method of sending a customer to their digital
   wallet from a merchant UI for the purposes of completing a payment.
   Furthermore, implementations of the protocol should require little to
   no server-side engineering efforts, while creating an improved and
   uniform user experience for customers.

   The main focus of the Protocol is on PayID Easy Checkout Discovery,
   which defines how a PayID client can use a PayID to retrieve a URI
   template which, when expanded, constitutes a PayID Easy Checkout URL
   representing a resource that the customer client can use to complete
   a payment.

   Though section (TODO: link to appendix example usage section) of this
   specification provides an example usage of the PayID Easy Checkout
   URL using Web Redirects, supplemental RFCs are needed to define the
   different ways in which a PayID client can utilize the PayID Easy
   Checkout URL.

3.  PayID Easy Checkout Protocol

   The PayID Easy Checkout Protocol can be used to facilitate an end-to-
   end checkout flow between a recipient client, such as an online
   merchant UI, and a wallet client.




Kramer & Simpson        Expires January 14, 2021                [Page 3]

Internet-Draft   Draft 1 - PayID Easy Checkout Protocol        July 2020


   The protocol is comprised of two parts:

   1.  PayID Easy Checkout Discovery

   2.  Assembly of PayID Easy Checkout URL

   The result of the protocol is a URL, which can be used by clients to
   complete a payment with minimal user interaction.  However, the PayID
   Easy Checkout protocol does not define how a PayID Easy Checkout URL
   can or should be used.  Instead, we defer those specifications to
   future RFCs.

3.1.  PayID Easy Checkout Discovery

   PayID Easy Checkout extends [PAYID-DISCOVERY] by defining a new link
   in the PayID metadata JRD returned by a PayID Discovery query.  This
   link, defined in section (TODO: link to jrd section) of this
   specification, includes the PayID Easy Checkout URI Template
   necessary to redirect a customer to their wallet client.

   E-commerce receivers who wish to perform Easy Checkout MUST query the
   PayID Discovery server to obtain a PayID Easy Checkout URL.  Digital
   wallets who wish to enable PayID Easy Checkout JRD Link, as defined
   in section (TODO: link to jrd section) of this paper.

   E-commerce receivers SHOULD implement fallback measures to complete
   checkout if a user's wallet does not support PayID Easy Checkout.

   The following steps describe how a PayID client can query a PayID
   server to obtain a PayID Easy Checkout JRD Link, as well as how to
   assemble the PayID Easy Checkout URL from that template URI.

3.1.1.  Step 1: Assemble PayID Easy Checkout Discovery URL

   The process of assembling a PayID Discovery URL is defined in section
   4.1.1 of [PAYID-DISCOVERY], and is the same as for PayID Easy
   Checkout Discovery.  The result of assembling this URL is the PayID
   Easy Checkout Discovery URL.

3.1.2.  Step 2: Query PayID Discovery URL

   A Webfinger query MUST be performed against the PayID Easy Checkout
   Discovery URL, as described in section 4.2 of Webfinger.

   In response, the WebFinger resource returns a JSON Resource
   Descriptor (JRD) as the resource representation to convey information
   about the requested PayID.




Kramer & Simpson        Expires January 14, 2021                [Page 4]

Internet-Draft   Draft 1 - PayID Easy Checkout Protocol        July 2020


   If the Webfinger endpoint returns a non-200 HTTP response status
   code, or if the resulting JRD does not contain a link with a PayID
   Easy Checkout URL Template, then PayID Easy Checkout is considered to
   have failed.  Clients SHOULD implement fallback measures to complete
   checkout in this case.

3.1.3.  Step 3: Parse PayID Easy Checkout Metadata

   If a wallet supports PayID Easy Checkout, the PayID server MUST
   respond with a HTTP status code 200 and a JSON payload containing a
   JSON Resource Descriptor (JRD) as defined in section (TODO: link to
   jrd section) of this document.  Along with any other PayID Metadata,
   the PayID server's response MUST contain a link conforming to the
   link definition in section (TODO: link to section) of this paper.

   For example, a PayID server might respond to a PayID Easy Checkout
   Discovery query with the following payload:

 {
    "subject": "payid:alice$wallet.com",
    "links": [
        {
            "rel" : "https://payid.org/ns/payid-easy-checkout/1.0",
            "template": "https://wallet.com/checkout?amount={amount}&receiverPayId={receiverPayId}&currency={currency}&nextUrl={nextUrl}"
        }
    ]
 }

   The receiver client must parse this response, and find a link whose
   "rel" field has a value of "https://payid.org/ns/payid-easy-
   checkout/1.0".  Any link with this relation MUST have a corresponding
   PayID Easy Checkout URI Template, as defined in section (TODO: link
   to template syntax) of this document.  Once a PayID Easy Checkout URI
   Template has been obtained by the client, PayID Easy Checkout
   Discovery is considered to be complete.

3.1.4.  Template Syntax

   This specification defines a simple template syntax for PayID Easy
   Checkout URI Template transformation.  A template is a string
   containing brace-enclosed ("{}") variable names marking the parts of
   the string that are to be substituted by the corresponding variable
   values.

   This specification defines several variables, which MAY or MAY NOT be
   present in every PayID Easy Checkout URI Template.  These variables
   are as follows:




Kramer & Simpson        Expires January 14, 2021                [Page 5]

Internet-Draft   Draft 1 - PayID Easy Checkout Protocol        July 2020


'amount': The amount that should be sent by the sender to the receiver
'receiverPayID': The PayID URI of the receiver
'currency': The currency that the sender should send (TODO: define currency enum or use rfc)
'network': The network that the sender should send payment over (TODO: define network enum or use rfc)
'nextURL': A URL that the sender's wallet can use after completing the payment

   When substituting values into a URI 'path' or 'query' part as defined
   by [RFC3986][], values with characters outside the character set
   allowed by paths or query parameters in [RFC3986][], respectively,
   MUST be percent or otherwise encoded.

   Protocols MAY define additional variables and syntax rules, but MUST
   NOT change the meaning of the variables specified in this document.
   If a client is unable to successfully process a template (e.g.,
   unknown variable names, unknown or incompatible syntax), the link
   SHOULD be ignored.

   The template syntax ABNF is as follows:

   uri-char     =  ( reserved / unreserved / pct-encoded )
   var-char     =  ALPHA / DIGIT / "." / "_"
   var-name     =  %x61.63.63.74.70.61.72.74 / ( 1*var-char )
   variable     =  "{" var-name "}"
   PAYID-EASY-CHECKOUT-URI-Template =  *( uri-char / variable )

   For example:

Input:    alice$wallet.com
          amount = 10
          receiverPayID=pay$merchant.com
          currency=XRP
          network=XRPL
          nextUrl=https://merchant.com/thankyou
Template: https://wallet.com/checkout?amount={amount}&receiverPayId={receiverPayID}&currency={currency}&network={network}&nextUrl={nextURL}
Output:   https://wallet.com/checkout?amount=10&receiverPayId=payid%2Apay%24merchant.com&currency=XRP&network=XRPL&nextUrl=https://merchant.com/thankyou

   TODO: Should we define acceptable URL template variable values for
   the redirect?

3.2.  PayID Easy Checkout URL Assembly

   The PayID Easy Checkout URL is constructed by expanding the PayID
   Easy Checkout URI Template as defined in section 3 of [RFC6570] buy
   applying values corresponding to the variables specified in section
   (TODO: link to template section) to the Template.

   The PayID Checkout URI template MAY not contain the complete set of
   variables specified in section (TODO link section) of this document.



Kramer & Simpson        Expires January 14, 2021                [Page 6]

Internet-Draft   Draft 1 - PayID Easy Checkout Protocol        July 2020


   However, PayID Easy Checkout clients MUST replace each variable
   present in the template URI with a value.  It is RECOMMENDED that
   PayID Easy Checkout clients have values available for every variable
   defined, in the case that the PayID Easy Checkout URI Template
   contains the complete set of specified variables.

   The result of replacing all template variables in the PayID Easy
   Checkout URI Template with values is a PayID Easy Checkout URL.  This
   URL SHOULD represent a resource that the customer can use to complete
   a payment.  As previously stated, the ways in which the customer and
   merchant use that resource is outside the scope of this protocol.
   The PayID Easy Checkout URL SHOULD be parsed to retrieve the values
   set by the recipient client.  It is RECOMMENDED that wallet UIs use
   these values to pre-populate a payment transaction.

4.  PayID Easy Checkout JRDs

   This section defines the PayID Easy Checkout Link, which conforms to
   section 4.4 of the Webfinger RFC.  In order for a PayID server to
   enable PayID Easy Checkout, a PayID Discovery query to the server
   MUST return a JRD containing a PayID Easy Checkout Link.

   The Link MUST include the Link Relation Type of section (TODO: link
   to link type section) in the object's 'rel' field.  The Link MUST
   also include a PayID Easy Checkout URI Template in the 'template'
   field of the link.

   * 'rel': `https://payid.org/ns/payid-easy-checkout-uri/1.0`
   * 'template': A PayID Easy Checkout URI Template

   The following is an example of a PayID Easy Checkout Link that
   indicates a PayID Easy Checkout URI Template:

{
    "rel": "https://payid.org/ns/payid-easy-checkout-uri/1.0",
    "template": https://wallet.com/checkout?amount={amount}&receiverPayId={receiverPayID}&currency={currency}&network={network}&nextUrl={nextURL}
}

5.  Security Considerations

   Various security considerations should be taken into account for
   PayID Easy Checkout.

   The security considerations for PayID Easy Checkout Discovery are
   discussed in section 6 of [PAYID-DISCOVERY].






Kramer & Simpson        Expires January 14, 2021                [Page 7]

Internet-Draft   Draft 1 - PayID Easy Checkout Protocol        July 2020


5.1.  PayID Easy Checkout Redirection URI Manipulation

   When a customer uses the resource located at the PayID Easy Checkout
   URL, a hijacker could manipulate the data encoded in the URL to trick
   the sender into sending a payment to a different PayID than was
   originally requested, or manipulate other points of PayID Easy
   Checkout data to trick the sender.

   Additionally, if a hijacker gained access to the merchant client,
   they could replace the PayID Easy Checkout URI Template for the
   purposes of a phishing attack.

   Current work on the PayID Protocol and its extensions may prove
   useful in mitigating these risks.

5.2.  Access Control

   As with all web resources, access to the PayID Discovery resource
   could require authentication.  See section 6 of [RFC7033][] for
   Access Control considerations.

   Furthermore, it is RECOMMENDED that PayID servers only expose PayID
   Easy Checkout URI Templates which resolve to a protected resource.

6.  IANA Considerations

   ## New Link Relation Types This document defines the following Link
   relation type per [RFC7033][].  See section 3 for examples of each
   type of Link.

   ### PayID Discovery URI Template

* Relation Type ('rel'): `https://payid.org/ns/payid-easy-checkout-uri/1.0`
* Media Type: `application/jrd+json`
* Description: PayID Discovery URI Template, version 1.0

7.  Acknowledgments

8.  Appendix

8.1.  Motivation

   The PayID Easy Checkout Protocol aims to enable a consistent user
   experience for customers paying for goods in an e-commerce by
   standardizing the interaction between merchants and customer wallets.
   Given the ability to assign arbitrary metadata to a PayID as defined
   in [PAYID-DISCOVERY], there is an opportunity to standardize the set
   of interactions between merchant and customer, specifically the



Kramer & Simpson        Expires January 14, 2021                [Page 8]

Internet-Draft   Draft 1 - PayID Easy Checkout Protocol        July 2020


   process by which a merchant directs a customer to their digital
   wallet to complete a payment.  We believe this protocol will enable
   an improved paying experience by reducing the number of steps a
   customer must take to complete a transaction and creating a
   consistent and familiar checkout pattern for customers.

   The second priority of PayID Easy Checkout is to limit the
   engineering effort needed to implement the protocol.  Clients wishing
   to adopt this pattern should only need to implement UI-level changes
   in order to make the flow function as intended, which may aid in
   expanding overall adoption, further enhancing the protocol's user
   experience benefits.

8.1.1.  Design Goals

8.1.1.1.  Minimal effort for the customer

   In order for a customer to checkout using the PayID Easy Checkout
   protocol, the customer only needs to provide a merchant with their
   PayID Easy Checkout enabled PayID.

8.1.1.2.  No server-side software not already covered by the PayID
          Protocol

   Because the flow of PayID Easy Checkout is predicated on using the
   PayID Discovery Protocol and then redirecting the customer away from
   the merchant, all of the flow can be instrumented on the front end
   and doesn't require server-side resources.

   Apart from a PayID Discovery compliant PayID Server, The PayID Easy
   Checkout Protocol does not require server-side software to be run by
   either the customer or merchant for a payment.  The PayID server is
   capable of providing details of where to send the customer via the
   PayID Discovery Protocol.  Assuming the wallet used by the customer
   has implemented support in their UI for the PayID Easy Checkout
   Protocol, the customer can be redirected to their wallet to complete
   their transaction.

8.2.  Example Usage

   This section shows a non-normative example of PayID Easy Checkout
   between a hypothetical merchant and customer.  The merchant accepts
   payments using the PayID pay$merchant.com, and the customer controls
   the PayID alice$wallet.com.







Kramer & Simpson        Expires January 14, 2021                [Page 9]

Internet-Draft   Draft 1 - PayID Easy Checkout Protocol        July 2020


8.2.1.  PayID Easy Checkout Initiation

   In this example, the customer might place some items in an online
   shopping cart on the merchant's UI, then choose to checkout.  The
   merchant UI would then render a form asking for the customer's PayID,
   as well as a "Checkout with PayID" button.  Once the customer inputs
   their PayID alice$wallet.com and clicks the "Checkout with PayID"
   button, the merchant UI begins the PayID Easy Checkout flow.

8.2.2.  PayID Easy Checkout Wallet Discovery

   The merchant UI would first assemble the PayID Discovery URL as
   defined in section 4.1.1 of [PAYID-DISCOVERY], yielding the URL
   "https://wallet.com/.well-known/
   webfinger?resource=payid%3Aalice%24wallet.com".  The merchant UI
   would then query the assembled URL as defined in section 4.1.2 of
   [PAYID-DISCOVERY].

   The HTTP request in this example would look like this:

   GET /.well-known/webfinger?resource=payid%3Aalice%24wallet.com
   Host: wallet.com

   If the customer's PayID server has enabled PayID Easy Checkout in
   their wallet, the server would respond with something like this:

 HTTP/1.1 200 OK
 Access-Control-Allow-Origin: *
 Content-Type: application/jrd+json

 {
   "subject" : "payid:alice$wallet.com",
   "links" :
   [
     {
       "rel": "https://payid.org/ns/payid-easy-checkout/1.0",
       "template": "https://wallet.com/checkout?amount={amount}&receiverPayId={receiverPayId}&currency={currency}&nextUrl={nextUrl}"
     }
   ]
 }

8.2.3.  Expand Wallet Discovery URL Template

   The merchant UI would parse the PayID Discovery response and iterate
   over the "links" collection to find the link with the Relation Type
   of "https://payid.org/ns/payid-easy-checkout/1.0".  The UI can then
   do a search and replace on the "template" field value in the link,
   replacing all occurrences of the predefined query parameter template



Kramer & Simpson        Expires January 14, 2021               [Page 10]

Internet-Draft   Draft 1 - PayID Easy Checkout Protocol        July 2020


   names with the values they want to send to the customer's wallet.
   One query parameter of note is the "nextUrl" parameter, which allows
   the merchant to supply a redirect or callback URL for the sender's
   wallet to call once the customer has confirmed the payment.  In this
   example, the merchant would like to display a "Thank You" page, and
   replaces "{nextUrl}" with "https://merchant.com/thankyou".

8.2.4.  Redirect Customer to Their Wallet

   Once the merchant UI populates the required query parameters in the
   URL template, the merchant UI redirects the customer to the Redirect
   URL so that the customer can confirm the payment.

8.2.5.  Customer Confirms Payment

   After the customer clicks the "Pay with PayID" button the merchant's
   UI, and the merchant performs the previous steps, the customer will
   be redirected to the Redirect URL, which is a front end resource of
   the wallet.  The wallet UI can read the query parameters from the
   Redirect URL and render a confirmation page or modal with all of the
   required fields pre-populated.

   Once the customer confirms the payment, the wallet would perform a
   PayID address lookup on the "receiverPayId" query parameter to get
   the payment address of the merchant and submit a transaction to the
   underlying ledger or payment system.  The merchant can then redirect
   the user back to the URL specified in the "nextUrl" query parameter,
   which will display the "Thank You" page of the merchant.

9.  References

9.1.  Normative References

   [PAYID-DISCOVERY]
              Fuelling, D., "PayID Discovery", n.d..

   [PAYID-URI]
              Fuelling, D., "The 'payid' URI Scheme", n.d.,
              <https://tbd.example.com/>.

   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119,
              DOI 10.17487/RFC2119, March 1997,
              <https://www.rfc-editor.org/info/rfc2119>.

   [RFC2818]  Rescorla, E., "HTTP Over TLS", RFC 2818,
              DOI 10.17487/RFC2818, May 2000,
              <https://www.rfc-editor.org/info/rfc2818>.



Kramer & Simpson        Expires January 14, 2021               [Page 11]

Internet-Draft   Draft 1 - PayID Easy Checkout Protocol        July 2020


   [RFC6265]  Barth, A., "HTTP State Management Mechanism", RFC 6265,
              DOI 10.17487/RFC6265, April 2011,
              <https://www.rfc-editor.org/info/rfc6265>.

   [RFC6570]  Gregorio, J., Fielding, R., Hadley, M., Nottingham, M.,
              and D. Orchard, "URI Template", RFC 6570,
              DOI 10.17487/RFC6570, March 2012,
              <https://www.rfc-editor.org/info/rfc6570>.

   [RFC7231]  Fielding, R., Ed. and J. Reschke, Ed., "Hypertext Transfer
              Protocol (HTTP/1.1): Semantics and Content", RFC 7231,
              DOI 10.17487/RFC7231, June 2014,
              <https://www.rfc-editor.org/info/rfc7231>.

   [RFC7413]  Cheng, Y., Chu, J., Radhakrishnan, S., and A. Jain, "TCP
              Fast Open", RFC 7413, DOI 10.17487/RFC7413, December 2014,
              <https://www.rfc-editor.org/info/rfc7413>.

   [RFC8446]  Rescorla, E., "The Transport Layer Security (TLS) Protocol
              Version 1.3", RFC 8446, DOI 10.17487/RFC8446, August 2018,
              <https://www.rfc-editor.org/info/rfc8446>.

9.2.  Informative References

   [RFC5988]  Nottingham, M., "Web Linking", RFC 5988,
              DOI 10.17487/RFC5988, October 2010,
              <https://www.rfc-editor.org/info/rfc5988>.

9.3.  URIs

   [1] https://payid.org/

Authors' Addresses

   Noah Kramer
   Ripple
   315 Montgomery Street
   San Francisco, CA  94104
   US

   Phone: -----------------
   Email: nkramer@ripple.com
   URI:   https://www.ripple.com








Kramer & Simpson        Expires January 14, 2021               [Page 12]

Internet-Draft   Draft 1 - PayID Easy Checkout Protocol        July 2020


   Ian Simpson
   Ripple
   315 Montgomery Street
   San Francisco, CA  94104
   US

   Phone: -----------------
   Email: isimpson@ripple.com
   URI:   https://www.ripple.com










































Kramer & Simpson        Expires January 14, 2021               [Page 13]
