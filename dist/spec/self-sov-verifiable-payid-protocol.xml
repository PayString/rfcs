<?xml version="1.0" encoding="utf-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.3.8 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!ENTITY RFC2119 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC2818 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2818.xml">
<!ENTITY RFC4949 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.4949.xml">
<!ENTITY RFC5280 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.5280.xml">
<!ENTITY RFC6979 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6979.xml">
<!ENTITY RFC7515 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7515.xml">
<!ENTITY RFC7517 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7517.xml">
<!ENTITY RFC7519 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7519.xml">
<!ENTITY RFC7797 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7797.xml">
<!ENTITY RFC4732 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.4732.xml">
]>

<?rfc toc="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>
<?rfc comments="yes"?>

<rfc docName="draft-aanchal-self-sov-verifiable-payid-protocol" category="std">

  <front>
    <title>Self-Sovereign Verifiable PayID</title>

    <author initials="A." surname="Malhotra" fullname="Aanchal Malhotra">
      <organization>Ripple</organization>
      <address>
        <postal>
          <street>315 Montgomery Street</street>
          <city>San Francisco</city>
          <region>CA</region>
          <code>94104</code>
          <country>US</country>
        </postal>
        <phone>-----------------</phone>
        <email>amalhotra@ripple.com</email>
        <uri>https://www.ripple.com</uri>
      </address>
    </author>
    <author initials="D." surname="Schwartz" fullname="David Schwartz">
      <organization>Ripple</organization>
      <address>
        <postal>
          <street>315 Montgomery Street</street>
          <city>San Francisco</city>
          <region>CA</region>
          <code>94104</code>
          <country>US</country>
        </postal>
        <phone>-----------------</phone>
        <email>david@ripple.com</email>
        <uri>https://www.ripple.com</uri>
      </address>
    </author>

    <date year="2020" month="August" day="04"/>

    <area>security</area>
    
    

    <abstract>


<t>This specification defines one of the extensions of the Basic PayID protocol <xref target="PAYID-PROTOCOL"></xref> that aims to enable trust-minimized PayID service. Specifically, this extension of Basic PayID protocol eliminates the trust requirement between the PayID owner and their PayID service provider by allowing PayID server operators (such as wallets/exchanges) to send payment account(s) address information associated with a PayID <xref target="PAYID-URI"></xref> that is digitally signed with the PayID private key of the PayID owner along with PayID owner's <spanx style="verb">identity</spanx> information and other meta-data needed to verify the signature.  As a result, Self-Sovereign Verifiable PayID enables PayID service providers to match the security model of applications such as non-custodial digital wallets.</t>



    </abstract>


    <note title="Feedback">


<t>This specification is a draft proposal, and is part of the
  <eref target="https://payid.org/">PayID Protocol</eref> initiative. Feedback related to this
  document should be sent in the form of a Github issue at:
  https://github.com/payid-org/rfcs/issues.</t>


    </note>


  </front>

  <middle>


<section anchor="terminology" title="Terminology">
<t>This protocol can be referred to as <spanx style="verb">Self-Sovereign Verifiable PayID</spanx>. It uses the following terminology.</t>

<t><list style="symbols">
  <t>Endpoint: either the client or the server of a connection.</t>
  <t>Sender: individual or entity originating a transaction.</t>
  <t>PayID client: the endpoint that initiates PayID protocol/sending side of the transaction.</t>
  <t>PayID server: the endpoint that returns payment account(s) address information in response to a PayID protocol request (non-custodial wallets, exchanges, etc).</t>
  <t>PayID owner: individual or entity receiving a transaction.</t>
  <t>Digital Signature: As defined in <xref target="RFC4949"></xref>.</t>
</list></t>

<t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in <xref target="RFC2119"></xref> and [RFC9174][].</t>

</section>
<section anchor="motivation" title="Motivation">

<t>While Self-Sovereign Verifiable PayID can be used in any context, its most immediate use case is to enable non-custodial service providers to provide hosted PayID service while preserving the existing trust assumptions between themselves and their users.</t>

<t>Providers of PayID-enabled payment services can be broadly categorized as custodial and non-custodial, each of which operate under different security models. Non-custodial wallets/exchanges do not store their customersâ€™ on-ledger private keys on their servers. Instead, these customers hold their private keys and hence are in full control of their funds. As such, there is no trust requirement between non-custodial wallets/exchanges and their customers, and these services are not responsible for any for lost, compromised or stolen private keys of their customers. Likewise, customers of non-custodial wallets/exchanges do not need to worry if the servers of those wallets/exchanges are compromised.</t>

<t>Basic PayID protocol <xref target="PAYID-PROTOCOL"></xref> specifies a protocol to interact with a PayID server and retrieve a payment account(s) address information resource along with other meta-data corresponding to the queried PayID. One of the security assumptions made by the basic PayID protocol that may be less desirable for some applications is that the owner of the PayID must trust their PayID server to provide correct and untampered responses. Under this model, the PayID server has full control over the contents of any PayID response message, with potentially adverse effects if the server goes rogue or is compromised. The PayID owner has no way of knowing if the PayID server behaves maliciously. This implicit trust assumption between the PayID owner and their PayID server is often unacceptable in a non-custodial setting.</t>

<t>Self-Sovereign Verifiable PayID protocol allows a PayID owner to digitally sign a PayID response using a local application/device with their PayID private key (which never leaves their device). This signed PayID response can then be securely transferred to the non-custodial PayID service provider's server who can then send this as a response to a PayID query along with PayID owner's "identity" information. PayID clients can use this information to verify if a PayID response is signed by the PayID owner and then decide whether to proceed with any particular transaction.  Consequently, the trust between a PayID owner and their PayID server to serve the correct mappings is removed.</t>

</section>
<section anchor="self-sovereign-verifiable-payid-protocol-specification" title="Self-Sovereign Verifiable PayID Protocol Specification">
<t>The Self-Sovereign Verifiable PayID protocol is designed along the same design principles as <xref target="PAYID-PROTOCOL"></xref>.</t>

<section anchor="paymentinformation-resource-as-json-web-signatures" title="PaymentInformation Resource as JSON Web Signatures">
<t>The PayID Protocol <xref target="PAYID-PROTOCOL"></xref> defines a Payment Account(s) Information Resource that contains information about a particular PayID. This document further refines this definition to allow this information to be digitally signed, and then represented as a JSON Web Signature (JWS) <xref target="RFC7515"></xref> using JWS JSON Serialization.</t>

<t>Below, this document further defines the structure of each JWS component, for the purposes of Self-Sovereign Verifiable PayID protocol.</t>

<section anchor="jose-protected-header" title="JOSE Protected Header">
<t>For JWS, the members of the JSON object represented by the JOSE Header describe the cryptographic operations applied to the JWS Protected header and the JWS payload and optionally additional properties of the JWS.</t>

<t>For a complete list of members of this object, refer to <xref target="RFC7515"></xref>. Following is a decoded JSON payload representing an example of JOSE protected header parameters as defined by the JWS JSON Serialization syntax.</t>

<figure><artwork><![CDATA[
{
       "name": "identityKey",
       "alg" : "ES256K", 
       "typ" : "JOSE+JSON",
       "b64" : false,
       "crit": ["b64"],
       "jwk" :  {
            "kty": "EC",
            "use": "sig",
            "crv": "secp256k1", 
            "x"  : "0", 
            "y"  : "0",
        },
}
]]></artwork></figure>

<section anchor="name" title="name">
<t>The <spanx style="verb">name</spanx> Header Parameter identifies the type of signature. It is a new OPTIONAL header parameter that is not defined in the IANA JSON Web Signature and Encryption Header Parameters Registry.</t>

</section>
<section anchor="alg" title="alg">
<t>The <spanx style="verb">alg</spanx> (algorithm) Header Parameter identifies the cryptographic algorithm used to secure the JWS. This is a required field as described in <xref target="RFC7515"></xref>. We RECOMMEND using "ES256K" which is Elliptic Curve Digital Signature Algorithm (ECDSA) using secp256k1 curve-type and SHA-256 hash-type as defined in IANA JSON Web Signature and Encryption Header Parameters Registry.</t>

</section>
<section anchor="typ" title="typ">
<t>The <spanx style="verb">typ</spanx> (type) Header Parameter is used by JWS applications to declare the media type of the complete JWS as described in <xref target="RFC7515"></xref>. If used, the value of <spanx style="verb">typ</spanx> field SHOULD be set to "JOSE+JSON".</t>

</section>
<section anchor="b64" title="b64">
<t>The <spanx style="verb">b64</spanx> (base64url-encode) Header Parameter is an extension to JWS specification that determines how a payload is represented in the JWS and the JWS signing input. When the "b64" value is <spanx style="verb">false</spanx>, the payload is represented simply as the JWS Payload value with no encoding; otherwise, it is represented as ASCII(BASE64URL(JWS Payload)). This is an optional field as described in <xref target="RFC7797"></xref>.</t>

</section>
<section anchor="crit" title="crit">
<t>The <spanx style="verb">crit</spanx> (critical) Header Parameter indicates that extensions to JWS specification are being used that MUST be understood and processed. This is a required field to be used with "b64" parameter as described in <xref target="RFC7797"></xref>.</t>

</section>
<section anchor="jwk" title="jwk">
<t>The <spanx style="verb">jwk</spanx> (JSON Web Key) Header Parameter represents the public key that is used to digitally sign the JOSE header and JWS payload. This parameter is represented as a JSON Web Key as specified in <xref target="RFC7517"></xref>. In the header above, members of "jwk" represent the properties of the public key, including its value that corresponds to the algorithm "ES256K".</t>

<t><list style="symbols">
  <t><spanx style="verb">kty</spanx>: Identifies the cryptographic algorithm family used with the key, such as "EC" for Elliptic Curve.</t>
  <t><spanx style="verb">use</spanx>: Identifies the intended use of the public key, such as "sig" for signature.</t>
  <t><spanx style="verb">crv</spanx> : Indicates the elliptic curve and the hash type (e.g., "secp256k1" represents curve-type <spanx style="verb">secp256k1</spanx> and the hash-type <spanx style="verb">SHA-256</spanx>).</t>
  <t><spanx style="verb">x</spanx> : Indicates the X-coordinate of the corresponding public key. For "alg" parameter values of "ES256K" (which is from the ECDSA family), <spanx style="verb">x</spanx> contains the X-coordinate of the corresponding public key.</t>
  <t><spanx style="verb">y</spanx> : Indicates the Y-coordinate of the corresponding public key. For "alg" parameter values of "ES256K" (which is from the ECDSA family), <spanx style="verb">y</spanx> contains the Y-coordinate of the corresponding public key.</t>
</list></t>

<t>Note: "jwk" is one way way of embedding public key in the JOSE header. For more details on other possible options for "alg" and representing public keys refer to <xref target="RFC7515"></xref>.</t>

</section>
</section>
<section anchor="jws-payload" title="JWS Payload">
<t>The JWS payload is the message that needs to be signed.</t>

<figure><artwork><![CDATA[
  {
          "exp"  : 1596496501,
          "payId": "bob$wallet.com",
          "payIdAddress": {
            "expTime": 34874613475,
            "paymentNetwork": "XRPL",
            "environment": "TESTNET",
            "addressDetailsType": "CryptoAddressDetails",
            "addressDetails": {
              "address": "rnzBSt9ZCJSh4RxC9f1v6oS9WZtEYJa8B9",
              "tag": "12345"
            }
          }
  }
]]></artwork></figure>

<section anchor="exp" title="exp">
<t>The <spanx style="verb">exp</spanx> field is an optional field as described in <xref target="RFC7519"></xref>. If used, it SHOULD be set to the expiration time of the cryptographic key used to generate the digital signature.</t>

</section>
<section anchor="payid" title="payId">
<t>The <spanx style="verb">payId</spanx> field is a required field. The value of <spanx style="verb">payId</spanx> field is the PayID URI in the client request that identifies the payment account information that the JSON object describes.</t>

</section>
<section anchor="payidaddress" title="PayIDAddress">
<t>The <spanx style="verb">PayIDAddress</spanx> is a required field. The value of <spanx style="verb">PayIDAddress</spanx> field is a JSON object with the following keys:</t>

<t><list style="symbols">
  <t>"expTime": This is an optional field and follows the same structure as described for "exp" field in <xref target="RFC7519"></xref>. If used, the value of <spanx style="verb">expTime</spanx> SHOULD be set to the maximum time upto which the payment address in the <spanx style="verb">address</spanx> field is valid.</t>
  <t>"paymentNetwork": The value of the <spanx style="verb">paymentNetwork</spanx> is the value of payment-network string as specified in the client request's <spanx style="verb">Accept</spanx> header.</t>
  <t>"environment": The value of <spanx style="verb">environment</spanx> string is the value of environment as specified in the client request's <spanx style="verb">Accept</spanx> header.</t>
  <t>"addressDetailsType": The value of <spanx style="verb">addressDetailsType</spanx> is one of the following strings as described in <xref target="PAYID-PROTOCOL"></xref>:  <list style="symbols">
      <t>CryptoAddressDetails</t>
      <t>FiatAddressDetails</t>
    </list></t>
  <t>"addressDetails": The value of <spanx style="verb">addressDetails</spanx> is the address information necessary to send payment on a specific <spanx style="verb">paymentNetwork</spanx> and <spanx style="verb">environment</spanx>.</t>
</list></t>

<t>The <spanx style="verb">address</spanx> field MUST be present in the JWS payload.</t>

</section>
</section>
<section anchor="jws-signature" title="JWS signature">
<t>The JWS signature is the digital signature which is calculated over the JOSE header and the JWS payload.</t>

<figure><artwork><![CDATA[
 "signature": "{base64Signature}"
]]></artwork></figure>

<section anchor="signature" title="signature">
<t>The value of <spanx style="verb">signature</spanx> is computed as described in <xref target="RFC7515"></xref>.</t>

</section>
</section>
</section>
<section anchor="end-to-end-self-sovereign-verifiable-payid-protocol-flow" title="End-to-End Self-Sovereign Verifiable PayID protocol Flow">
<t>A pre-requisite for this protocol requires the PayID owner to transfer signed <spanx style="verb">PaymentInformation</spanx> to the PayID server. This document specifies one such way of doing this.</t>

<t>The following are the pre-steps that a PayID owner's device should perform locally:</t>

<section anchor="generating-payid-key-pair" title="Generating PayID Key-pair">
<t>We RECOMMEND using elliptic curve (EC) key type with Elliptic Curve Digital Signature Algorithm (ECDSA) with secp256k1 curve for creating JWS content.</t>

</section>
<section anchor="generating-jws-token" title="Generating JWS Token">
<t>For each <spanx style="verb">payment-network</spanx> and <spanx style="verb">environment</spanx> that the PayID owner has a payment address for, generate the JOSE header, JWS Payload and JWS Signature as described above. A complete <spanx style="verb">PaymentInformation</spanx> response might look like:</t>

<t>{</t>

<figure><artwork><![CDATA[
 "payId": "bob$wallet.com",
 "addresses": [],
 "verifiedAddresses": [
    {
        "signatures": [
          {
            "protected": {
              "name": "identityKey",
              "alg": "ES256K", 
              "typ": "JOSE+JSON",
              "b64": "false",
              "crit": ["b64"],
              "jwk": {
                  "kty": "EC",
                  "use": "sig",
                  "crv": "secp256k1", 
                  "x": "b8w36l6eCf7GyD5fvXp0Xj7ugdFuvYYcnmb1VRjBl5g=", 
                  "y": "Tp8RPAf4dWkd+K/BApSW/Ey5UJs53NOPJRqDNZzItPc=",
              },
            },
            "signature": "{base64Signature}",
          }
          ]
        "payload": {
            "exp" : 34874613475,
            "payId": "bob$wallet.com",
            "payIdAddress": {
              "expTime":
              "paymentNetwork": "XRPL",
              "environment": "TESTNET",
              "addressDetailsType": "CryptoAddressDetails",
              "addressDetails": {
                "address": "rnzBSt9ZCJSh4RxC9f1v6oS9WZtEYJa8B9",
                "tag": "12345"
               }
             }
          }
        }
      ]
    }
]]></artwork></figure>

<t><list style="symbols">
  <t>addresses: The <spanx style="verb">addresses</spanx> array is an OPTIONAL field. The implementations MAY choose to populate this field with payment address(es) information as per <xref target="PAYID-PROTOCOL"></xref>. The implementations SHOULD refer to Security Considerations sections for the possible security trade-offs while using this field.</t>
  <t>VerifiedAddresses: The <spanx style="verb">VerifiedAddresses</spanx> property is a required field.</t>
</list></t>

</section>
<section anchor="posting-signed-response-to-non-custodial-payid-service-providers-server" title="Posting signed response to non-custodial PayID service Provider's server">
<t>Implementations SHOULD use a secure communication channel to transfer these resources to the PayID server.</t>

</section>
</section>
<section anchor="basic-operations" title="Basic Operations">
<t>Following are the basic operations performed by a Self-Sovereign Verifiable PayID client and server to retrieve <spanx style="verb">PaymentInformation</spanx> resource corresponding to a PayID.</t>

<section anchor="payid-client-requesting-the-paymentinformation-resource" title="PayID Client Requesting the PaymentInformation Resource">
<t>When requesting the <spanx style="verb">PaymentInformation</spanx> resource, a Self-Sovereign Verifiable PayID client MAY use the same HTTP <spanx style="verb">GET</spanx> method as in <xref target="PAYID-PROTOCOL"></xref> to the PayID URL without any query parameters and body.</t>

<t>The PayID client MUST query the PayID server using HTTPS only. <xref target="RFC2818"></xref> defines how HTTPS verifies the PayID server's identity. If the HTTPS connection cannot be established for any reason, then the PayID client MUST accept that the PayID request has failed and MUST NOT attempt to reissue the PayID request using HTTP over a non-secure connection.</t>

</section>
<section anchor="payid-server-responding-to-the-paymentinformation-resource-request" title="PayID Server Responding to the PaymentInformation Resource Request">
<t>Upon receiving a <spanx style="verb">GET</spanx> request for a payment accounts(s) information resource or a <spanx style="verb">PaymentInformation</spanx> resource, a PayID server that supports Self-Sovereign Verifiable PayID protocol returns the <spanx style="verb">PaymentInformation</spanx> resource for the <spanx style="verb">payment-network</spanx> and <spanx style="verb">environment</spanx> requested by the PayID client in the request <spanx style="verb">Accept</spanx> header field, along with other required and/or optional metadata.</t>

<t>However, if the PayID server does not support the Self-Sovereign Verifiable PayID protocol, the PayID server sends back a response as described in <xref target="PAYID-PROTOCOL"></xref>.</t>

<t>If the PayID server does not contain the payment accounts(s) information resource or a <spanx style="verb">PaymentInformation</spanx> resource resource corresponding to the request, the PayID server MUST respond with an appropriate error message.</t>

</section>
<section anchor="parsing-the-paymentinformation-response" title="Parsing the PaymentInformation Response">
<t>The PayID client MUST conform to the verification of JWS as specified in <xref target="RFC7515"></xref>.</t>

</section>
</section>
</section>
<section anchor="example-use-of-self-sovereign-verifiable-payid-protocol" title="Example Use of Self-Sovereign Verifiable PayID Protocol">
<t>This section shows sample use of this extension of Basic PayID protocol in a hypothetical scenario.</t>

<section anchor="verifiable-payid-protocol-by-a-non-custodial-wallet-as-payid-server" title="Verifiable PayID Protocol by a Non-Custodial Wallet as PayID Server">
<t>Suppose Alice wishes to send a friend some XRP from a web-based wallet provider that Alice has an account on. Alice would log-in to the wallet provider and enter Bob's PayID (say, <spanx style="verb">bob$wallet.com</spanx>) into the wallet UI to start the payment.
  The Wallet application would first discover the PayID URL for the PayID service-provider using one of the mechanisms described in PayID discovery <xref target="PAYID-DISCOVERY"></xref> protocol.</t>

<t>The Wallet application would then issue an HTTPS GET request:</t>

<figure><artwork><![CDATA[
 GET /users/bob HTTP/1.1
 Host: www.wallet.com
 Accept: application/xrpl-testnet+json
 PayID-version: 1.0
]]></artwork></figure>

<t>Bob's wallet (e.g., a non-custodial wallet operating a PayID server) might respond like this:</t>

<figure><artwork><![CDATA[
 HTTP/1.1 200 OK
 Content-Type: application/json
 Content-Length: 403
 PayID-Version: 1.0
 Cache-Control: "no-store"
 Server: Apache/1.3.11
{
 "payId": "bob$wallet.com",
 "addresses": [],
 "verifiedAddresses": [
    {
        "signatures": [
          {
            "protected": {
              "name": "identityKey",
              "alg": "ES256K", 
              "typ": "JOSE+JSON",
              "b64": "false",
              "crit": ["b64"],
              "jwk": {
                  "kty": "EC",
                  "use": "sig",
                  "crv": "secp256k1", 
                  "x": "b8w36l6eCf7GyD5fvXp0Xj7ugdFuvYYcnmb1VRjBl5g=", 
                  "y": "Tp8RPAf4dWkd+K/BApSW/Ey5UJs53NOPJRqDNZzItPc=",
              },
            },
            "signature": "base64Signature",
          }
          ]
        "payload": {
            "exp" : 1234574940,
            "payId": "bob$wallet.com",
            "payIdAddress": {
              "expTime": 34874613475,
              "paymentNetwork": "XRPL",
              "environment": "TESTNET",
              "addressDetailsType": "CryptoAddressDetails",
              "addressDetails": {
                "address": "T7CKYKhRujaxEs9fSxQwJApHsQVPKUgD7EtLWCGTAFBwTha"
               }
             }
          }
        }
      ]
  }
]]></artwork></figure>

<t>In the above example, the <spanx style="verb">PaymentInformation</spanx> resource is a pre-signed message with the PayID private keys of the PayID owner Bob. Bob's non-custodial wallet retrieves this response and sends it to the PayID client.</t>

</section>
</section>
<section anchor="security-considerations" title="Security Considerations">
<t>This security considerations section only considers PayID clients and servers bound to implementations as defined in this document.</t>

<t>The security guarantees mentioned in <xref target="PAYID-PROTOCOL"></xref> apply to this protocol. In this section, we discuss the security model for Self-Sovereign Verifiable PayID protocol for non-custodial service providers.</t>

<section anchor="security-model-for-non-custodial-payid-service-providers" title="Security Model for Non-Custodial PayID Service Providers">

<t>In the current security model, non-custodial wallets do not store their customersâ€™ keys.  Instead, wallet customers hold their private keys on their own device(s). There is a no trust requirement between the service provided by a non-custodial wallets and its customers. Because customers in this scenario hold the private keys:
  * Wallets are not liable for any consequences coming from the loss, compromise or theft of customers' private keys.
  * The non-custodial wallets do not require their customers to trust their servers in case wallets servers go malicious or are compromised.</t>

<t>This extension of Basic PayID protocol preserves this trust model. Rather than requiring the PayID server to provide accurate PayID response for their customers, the PayID owners can generate these signed mappings with their own PayID private key locally on their app/device. The sender of the payment (PayID client walletâ€™s customer) can easily verify these signatures out-of-band with the receiver (i.e., PayID owner). This eliminates any risk of the non-custodial PayID server wallet losing its private keys, going malicious, getting hacked, or becoming otherwise compromised in a way that customers might lose funds.</t>

</section>
<section anchor="using-json-web-signatures" title="Using JSON Web Signatures">
<t>The implementations of this extension of Basic PayID protocol MUST refer to the Security Considerations sections of <xref target="RFC7515"></xref> and <xref target="RFC7519"></xref>.</t>

</section>
<section anchor="using-addresses-array" title="Using addresses Array">
<t>The <spanx style="verb">addresses</spanx> array in the PayID response is an array of unsigned payment addresses. Implementations of this extension of Basic PayID that choose to populate this array along with the <spanx style="verb">verifiedAddresses</spanx> array MAY be vulnerable to downgrade attacks. We RECOMMEND against populating this array unless absolutely necessary depending on the use-case.
Also, note that this approach is not backwards-compatible with the PayID clients that do not understand Self-Sovereign Verifiable PayID protocol.</t>

</section>
</section>
<section anchor="privacy-considerations" title="Privacy Considerations">
<t>All privacy guarantees in the Privacy Considerations section of <xref target="PAYID-PROTOCOL"></xref> apply to this extension of Basic PayID protocol.</t>

</section>


  </middle>

  <back>

    <references title='Normative References'>

&RFC2119;
&RFC2818;
&RFC4949;
&RFC5280;
&RFC6979;
&RFC7515;
&RFC7517;
&RFC7519;
&RFC7797;
<reference anchor="PAYID-URI" target="https://tbd.example.com/">
  <front>
    <title>The 'payid' URI Scheme</title>
    <author initials="D." surname="Fuelling" fullname="David Fuelling">
      <organization></organization>
    </author>
    <date year="n.d."/>
  </front>
</reference>
<reference anchor="PAYID-DISCOVERY" >
  <front>
    <title>PayID Discovery</title>
    <author initials="D." surname="Fuelling" fullname="David Fuelling">
      <organization></organization>
    </author>
    <date year="n.d."/>
  </front>
</reference>
<reference anchor="PAYID-PROTOCOL" >
  <front>
    <title>PayID Protocol</title>
    <author initials="D." surname="Schwartz" fullname="David Schwartz">
      <organization></organization>
    </author>
    <date year="n.d."/>
  </front>
</reference>


    </references>

    <references title='Informative References'>

&RFC4732;


    </references>



  </back>

<!-- ##markdown-source:
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
fKkMocbrw5e1kt9t/Sf4VwjyiFUAAA==

-->

</rfc>

