<?xml version="1.0" encoding="utf-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.3.10 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!ENTITY RFC2119 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC2818 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2818.xml">
<!ENTITY RFC4949 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.4949.xml">
<!ENTITY RFC5280 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.5280.xml">
<!ENTITY RFC6979 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6979.xml">
<!ENTITY RFC7515 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7515.xml">
<!ENTITY RFC7517 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7517.xml">
<!ENTITY RFC7519 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7519.xml">
<!ENTITY RFC7797 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7797.xml">
<!ENTITY RFC4732 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.4732.xml">
]>

<?rfc toc="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>
<?rfc comments="yes"?>

<rfc docName="draft-aanchal-self-sov-verifiable-payid-protocol" category="std">

  <front>
    <title>Self-Sovereign Verifiable PayID</title>

    <author initials="A." surname="Malhotra" fullname="Aanchal Malhotra">
      <organization>Ripple</organization>
      <address>
        <postal>
          <street>315 Montgomery Street</street>
          <city>San Francisco</city>
          <region>CA</region>
          <code>94104</code>
          <country>US</country>
        </postal>
        <phone>-----------------</phone>
        <email>amalhotra@ripple.com</email>
        <uri>https://www.ripple.com</uri>
      </address>
    </author>
    <author initials="D." surname="Schwartz" fullname="David Schwartz">
      <organization>Ripple</organization>
      <address>
        <postal>
          <street>315 Montgomery Street</street>
          <city>San Francisco</city>
          <region>CA</region>
          <code>94104</code>
          <country>US</country>
        </postal>
        <phone>-----------------</phone>
        <email>david@ripple.com</email>
        <uri>https://www.ripple.com</uri>
      </address>
    </author>

    <date year="2020" month="August" day="06"/>

    <area>security</area>
    
    

    <abstract>


<t>This specification defines one of the extensions of the Basic PayID protocol <xref target="PAYID-PROTOCOL"></xref> that aims to enable trust-minimized PayID service. Specifically, this extension of Basic PayID protocol eliminates the trust requirement between the PayID owner and their PayID service provider by allowing PayID server operators (such as wallets/exchanges) to send payment account(s) address information associated with a PayID <xref target="PAYID-URI"></xref> that is digitally signed with the PayID private key of the PayID owner along with PayID owner's <spanx style="verb">identity</spanx> information and other meta-data needed to verify the signature.  As a result, Self-Sovereign Verifiable PayID enables PayID service providers to match the security model of applications such as non-custodial digital wallets.</t>



    </abstract>


    <note title="Feedback">


<t>This specification is a draft proposal, and is part of the
  <eref target="https://payid.org/">PayID Protocol</eref> initiative. Feedback related to this
  document should be sent in the form of a Github issue at:
  https://github.com/payid-org/rfcs/issues.</t>


    </note>


  </front>

  <middle>


<section anchor="terminology" title="Terminology">
<t>This protocol can be referred to as <spanx style="verb">Self-Sovereign Verifiable PayID</spanx>. It uses the following terminology.</t>

<t><list style="symbols">
  <t>Endpoint: either the client or the server of a connection.</t>
  <t>Sender: individual or entity originating a transaction.</t>
  <t>PayID client: the endpoint that initiates PayID protocol/sending side of the transaction.</t>
  <t>PayID server: the endpoint that returns payment account(s) address information in response to a PayID protocol request (non-custodial wallets, exchanges, etc).</t>
  <t>PayID owner: individual or entity receiving a transaction.</t>
  <t>Digital Signature: As defined in <xref target="RFC4949"></xref>.</t>
</list></t>

<t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in <xref target="RFC2119"></xref> and [RFC9174][].</t>

</section>
<section anchor="motivation" title="Motivation">

<t>While Self-Sovereign Verifiable PayID can be used in any context, its most immediate use case is to enable non-custodial service providers to provide hosted PayID service while preserving the existing trust assumptions between themselves and their users.</t>

<t>Providers of PayID-enabled payment services can be broadly categorized as custodial and non-custodial, each of which operate under different security models. Non-custodial wallets/exchanges do not store their customersâ€™ on-ledger private keys on their servers. Instead, these customers hold their private keys and hence are in full control of their funds. As such, there is no trust requirement between non-custodial wallets/exchanges and their customers, and these services are not responsible for any for lost, compromised or stolen private keys of their customers. Likewise, customers of non-custodial wallets/exchanges do not need to worry if the servers of those wallets/exchanges are compromised.</t>

<t>Basic PayID protocol <xref target="PAYID-PROTOCOL"></xref> specifies a protocol to interact with a PayID server and retrieve a payment account(s) address information resource along with other meta-data corresponding to the queried PayID. One of the security assumptions made by the basic PayID protocol that may be less desirable for some applications is that the owner of the PayID must trust their PayID server to provide correct and untampered responses. Under this model, the PayID server has full control over the contents of any PayID response message, with potentially adverse effects if the server goes rogue or is compromised. The PayID owner has no way of knowing if the PayID server behaves maliciously. This implicit trust assumption between the PayID owner and their PayID server is often unacceptable in a non-custodial setting.</t>

<t>Self-Sovereign Verifiable PayID protocol allows a PayID owner to digitally sign a PayID response using a local application/device with their PayID private key (which never leaves their device). This signed PayID response can then be securely transferred to the non-custodial PayID service provider's server who can then send this as a response to a PayID query along with PayID owner's "identity" information. PayID clients can use this information to verify if a PayID response is signed by the PayID owner and then decide whether to proceed with any particular transaction.  Consequently, the trust between a PayID owner and their PayID server to serve the correct mappings is removed.</t>

</section>
<section anchor="self-sovereign-verifiable-payid-protocol-specification" title="Self-Sovereign Verifiable PayID Protocol Specification">
<t>The Self-Sovereign Verifiable PayID protocol is designed along the same design principles as <xref target="PAYID-PROTOCOL"></xref>.</t>

<section anchor="paymentinformation-resource-as-json-web-signatures" title="PaymentInformation Resource as JSON Web Signatures">
<t>The PayID Protocol <xref target="PAYID-PROTOCOL"></xref> defines a Payment Account(s) Information Resource that contains information about a particular PayID. This document further refines this definition to allow this information to be digitally signed, and then represented as a JSON Web Signature (JWS) <xref target="RFC7515"></xref> using JWS JSON Serialization.</t>

<t>Below, this document further defines the structure of each JWS component, for the purposes of Self-Sovereign Verifiable PayID protocol.</t>

<section anchor="jose-protected-header" title="JOSE Protected Header">
<t>For JWS, the members of the JSON object represented by the JOSE Header describe the cryptographic operations applied to the JWS Protected header and the JWS payload and optionally additional properties of the JWS.</t>

<t>For a complete list of members of this object, refer to <xref target="RFC7515"></xref>. Following is a decoded JSON payload representing an example of JOSE protected header parameters as defined by the JWS JSON Serialization syntax.</t>

<figure><artwork><![CDATA[
{
       "name": "identityKey",
       "alg" : "ES256K", 
       "typ" : "JOSE+JSON",
       "b64" : false,
       "crit": ["b64"],
       "jwk" :  {
            "kty": "EC",
            "use": "sig",
            "crv": "secp256k1", 
            "x"  : "0", 
            "y"  : "0"
        }
}
]]></artwork></figure>

<section anchor="name" title="name">
<t>The <spanx style="verb">name</spanx> Header Parameter identifies the type of signature. It is a new OPTIONAL header parameter that is not defined in the IANA JSON Web Signature and Encryption Header Parameters Registry.</t>

</section>
<section anchor="alg" title="alg">
<t>The <spanx style="verb">alg</spanx> (algorithm) Header Parameter identifies the cryptographic algorithm used to secure the JWS. This is a required field as described in <xref target="RFC7515"></xref>. We RECOMMEND using "ES256K" which is Elliptic Curve Digital Signature Algorithm (ECDSA) using secp256k1 curve-type and SHA-256 hash-type as defined in IANA JSON Web Signature and Encryption Header Parameters Registry.</t>

</section>
<section anchor="typ" title="typ">
<t>The <spanx style="verb">typ</spanx> (type) Header Parameter is used by JWS applications to declare the media type of the complete JWS as described in <xref target="RFC7515"></xref>. If used, the value of <spanx style="verb">typ</spanx> field SHOULD be set to "JOSE+JSON".</t>

</section>
<section anchor="b64" title="b64">
<t>The <spanx style="verb">b64</spanx> (base64url-encode) Header Parameter is an extension to JWS specification that determines how a payload is represented in the JWS and the JWS signing input. When the "b64" value is <spanx style="verb">false</spanx>, the payload is represented simply as the JWS Payload value with no encoding; otherwise, it is represented as ASCII(BASE64URL(JWS Payload)). This is an optional field as described in <xref target="RFC7797"></xref>.</t>

</section>
<section anchor="crit" title="crit">
<t>The <spanx style="verb">crit</spanx> (critical) Header Parameter indicates that extensions to JWS specification are being used that MUST be understood and processed. This is a required field to be used with "b64" parameter as described in <xref target="RFC7797"></xref>.</t>

</section>
<section anchor="jwk" title="jwk">
<t>The <spanx style="verb">jwk</spanx> (JSON Web Key) Header Parameter represents the public key that is used to digitally sign the JOSE header and JWS payload. This parameter is represented as a JSON Web Key as specified in <xref target="RFC7517"></xref>. In the header above, members of "jwk" represent the properties of the public key, including its value that corresponds to the algorithm "ES256K".</t>

<t><list style="symbols">
  <t><spanx style="verb">kty</spanx>: Identifies the cryptographic algorithm family used with the key, such as "EC" for Elliptic Curve.</t>
  <t><spanx style="verb">use</spanx>: Identifies the intended use of the public key, such as "sig" for signature.</t>
  <t><spanx style="verb">crv</spanx> : Indicates the elliptic curve and the hash type (e.g., "secp256k1" represents curve-type <spanx style="verb">secp256k1</spanx> and the hash-type <spanx style="verb">SHA-256</spanx>).</t>
  <t><spanx style="verb">x</spanx> : Indicates the X-coordinate of the corresponding public key. For "alg" parameter values of "ES256K" (which is from the ECDSA family), <spanx style="verb">x</spanx> contains the X-coordinate of the corresponding public key.</t>
  <t><spanx style="verb">y</spanx> : Indicates the Y-coordinate of the corresponding public key. For "alg" parameter values of "ES256K" (which is from the ECDSA family), <spanx style="verb">y</spanx> contains the Y-coordinate of the corresponding public key.</t>
</list></t>

<t>Note: "jwk" is one way way of embedding public key in the JOSE header. For more details on other possible options for "alg" and representing public keys refer to <xref target="RFC7515"></xref>.</t>

</section>
</section>
<section anchor="jws-payload" title="JWS Payload">
<t>The JWS payload is the message that needs to be signed.</t>

<figure><artwork><![CDATA[
  {
          "exp"  : 1596496501,
          "payId": "bob$wallet.com",
          "payIdAddress": {
            "expTime": 34874613475,
            "paymentNetwork": "XRPL",
            "environment": "TESTNET",
            "addressDetailsType": "CryptoAddressDetails",
            "addressDetails": {
              "address": "rnzBSt9ZCJSh4RxC9f1v6oS9WZtEYJa8B9",
              "tag": "12345"
            }
          }
  }
]]></artwork></figure>

<section anchor="exp" title="exp">
<t>The <spanx style="verb">exp</spanx> field is an optional field as described in <xref target="RFC7519"></xref>. If used, it SHOULD be set to the expiration time of the cryptographic key used to generate the digital signature.</t>

</section>
<section anchor="payid" title="payId">
<t>The <spanx style="verb">payId</spanx> field is a required field. The value of <spanx style="verb">payId</spanx> field is the PayID URI in the client request that identifies the payment account information that the JSON object describes.</t>

</section>
<section anchor="payidaddress" title="PayIDAddress">
<t>The <spanx style="verb">PayIDAddress</spanx> is a required field. The value of <spanx style="verb">PayIDAddress</spanx> field is a JSON object with the following keys:</t>

<t><list style="symbols">
  <t>"expTime": This is an optional field and follows the same structure as described for "exp" field in <xref target="RFC7519"></xref>. If used, the value of <spanx style="verb">expTime</spanx> SHOULD be set to the maximum time upto which the payment address in the <spanx style="verb">address</spanx> field is valid.</t>
  <t>"paymentNetwork": The value of the <spanx style="verb">paymentNetwork</spanx> is the value of payment-network string as specified in the client request's <spanx style="verb">Accept</spanx> header.</t>
  <t>"environment": The value of <spanx style="verb">environment</spanx> string is the value of environment as specified in the client request's <spanx style="verb">Accept</spanx> header.</t>
  <t>"addressDetailsType": The value of <spanx style="verb">addressDetailsType</spanx> is one of the following strings as described in <xref target="PAYID-PROTOCOL"></xref>:  <list style="symbols">
      <t>CryptoAddressDetails</t>
      <t>FiatAddressDetails</t>
    </list></t>
  <t>"addressDetails": The value of <spanx style="verb">addressDetails</spanx> is the address information necessary to send payment on a specific <spanx style="verb">paymentNetwork</spanx> and <spanx style="verb">environment</spanx>.</t>
</list></t>

<t>The <spanx style="verb">address</spanx> field MUST be present in the JWS payload.</t>

</section>
</section>
<section anchor="jws-signature" title="JWS signature">
<t>The JWS signature is the digital signature which is calculated over the JOSE header and the JWS payload.</t>

<figure><artwork><![CDATA[
 "signature": "{base64Signature}"
]]></artwork></figure>

<section anchor="signature" title="signature">
<t>The value of <spanx style="verb">signature</spanx> is computed as described in <xref target="RFC7515"></xref>.</t>

</section>
</section>
</section>
<section anchor="end-to-end-self-sovereign-verifiable-payid-protocol-flow" title="End-to-End Self-Sovereign Verifiable PayID protocol Flow">
<t>A pre-requisite for this protocol requires the PayID owner to transfer signed <spanx style="verb">PaymentInformation</spanx> to the PayID server. This document specifies one such way of doing this.</t>

<t>The following are the pre-steps that a PayID owner's device should perform locally:</t>

<section anchor="generating-payid-key-pair" title="Generating PayID Key-pair">
<t>We RECOMMEND using elliptic curve (EC) key type with Elliptic Curve Digital Signature Algorithm (ECDSA) with secp256k1 curve for creating JWS content.</t>

</section>
<section anchor="generating-jws-token" title="Generating JWS Token">
<t>For each <spanx style="verb">payment-network</spanx> and <spanx style="verb">environment</spanx> that the PayID owner has a payment address for, generate the JOSE header, JWS Payload and JWS Signature as described above. A complete <spanx style="verb">PaymentInformation</spanx> response might look like:</t>

<t>{</t>

<figure><artwork><![CDATA[
 "payId": "bob$wallet.com",
 "addresses": [],
 "verifiedAddresses": [
    {
        "signatures": [
          {
            "protected": {
              "name": "identityKey",
              "alg": "ES256K", 
              "typ": "JOSE+JSON",
              "b64": "false",
              "crit": ["b64"],
              "jwk": {
                  "kty": "EC",
                  "use": "sig",
                  "crv": "secp256k1", 
                  "x": "b8w36l6eCf7GyD5fvXp0Xj7ugdFuvYYcnmb1VRjBl5g=", 
                  "y": "Tp8RPAf4dWkd+K/BApSW/Ey5UJs53NOPJRqDNZzItPc="
              }
            },
            "signature": "{base64Signature}"
          }
          ],
        "payload": {
            "exp" : 34874613475,
            "payId": "bob$wallet.com",
            "payIdAddress": {
              "expTime": 34874613475,
              "paymentNetwork": "XRPL",
              "environment": "TESTNET",
              "addressDetailsType": "CryptoAddressDetails",
              "addressDetails": {
                "address": "rnzBSt9ZCJSh4RxC9f1v6oS9WZtEYJa8B9",
                "tag": "12345"
               }
             }
          }
        }
      ]
    }
]]></artwork></figure>

<t><list style="symbols">
  <t>addresses: The <spanx style="verb">addresses</spanx> array is an OPTIONAL field. The implementations MAY choose to populate this field with payment address(es) information as per <xref target="PAYID-PROTOCOL"></xref>. The implementations SHOULD refer to Security Considerations sections for the possible security trade-offs while using this field.</t>
  <t>VerifiedAddresses: The <spanx style="verb">VerifiedAddresses</spanx> property is a required field.</t>
</list></t>

</section>
<section anchor="posting-signed-response-to-non-custodial-payid-service-providers-server" title="Posting signed response to non-custodial PayID service Provider's server">
<t>Implementations SHOULD use a secure communication channel to transfer these resources to the PayID server.</t>

</section>
</section>
<section anchor="basic-operations" title="Basic Operations">
<t>Following are the basic operations performed by a Self-Sovereign Verifiable PayID client and server to retrieve <spanx style="verb">PaymentInformation</spanx> resource corresponding to a PayID.</t>

<section anchor="payid-client-requesting-the-paymentinformation-resource" title="PayID Client Requesting the PaymentInformation Resource">
<t>When requesting the <spanx style="verb">PaymentInformation</spanx> resource, a Self-Sovereign Verifiable PayID client MAY use the same HTTP <spanx style="verb">GET</spanx> method as in <xref target="PAYID-PROTOCOL"></xref> to the PayID URL without any query parameters and body.</t>

<t>The PayID client MUST query the PayID server using HTTPS only. <xref target="RFC2818"></xref> defines how HTTPS verifies the PayID server's identity. If the HTTPS connection cannot be established for any reason, then the PayID client MUST accept that the PayID request has failed and MUST NOT attempt to reissue the PayID request using HTTP over a non-secure connection.</t>

</section>
<section anchor="payid-server-responding-to-the-paymentinformation-resource-request" title="PayID Server Responding to the PaymentInformation Resource Request">
<t>Upon receiving a <spanx style="verb">GET</spanx> request for a payment accounts(s) information resource or a <spanx style="verb">PaymentInformation</spanx> resource, a PayID server that supports Self-Sovereign Verifiable PayID protocol returns the <spanx style="verb">PaymentInformation</spanx> resource for the <spanx style="verb">payment-network</spanx> and <spanx style="verb">environment</spanx> requested by the PayID client in the request <spanx style="verb">Accept</spanx> header field, along with other required and/or optional metadata.</t>

<t>However, if the PayID server does not support the Self-Sovereign Verifiable PayID protocol, the PayID server sends back a response as described in <xref target="PAYID-PROTOCOL"></xref>.</t>

<t>If the PayID server does not contain the payment accounts(s) information resource or a <spanx style="verb">PaymentInformation</spanx> resource resource corresponding to the request, the PayID server MUST respond with an appropriate error message.</t>

</section>
<section anchor="parsing-the-paymentinformation-response" title="Parsing the PaymentInformation Response">
<t>The PayID client MUST conform to the verification of JWS as specified in <xref target="RFC7515"></xref>.</t>

</section>
</section>
</section>
<section anchor="example-use-of-self-sovereign-verifiable-payid-protocol" title="Example Use of Self-Sovereign Verifiable PayID Protocol">
<t>This section shows sample use of this extension of Basic PayID protocol in a hypothetical scenario.</t>

<section anchor="verifiable-payid-protocol-by-a-non-custodial-wallet-as-payid-server" title="Verifiable PayID Protocol by a Non-Custodial Wallet as PayID Server">
<t>Suppose Alice wishes to send a friend some XRP from a web-based wallet provider that Alice has an account on. Alice would log-in to the wallet provider and enter Bob's PayID (say, <spanx style="verb">bob$wallet.com</spanx>) into the wallet UI to start the payment.
  The Wallet application would first discover the PayID URL for the PayID service-provider using one of the mechanisms described in PayID discovery <xref target="PAYID-DISCOVERY"></xref> protocol.</t>

<t>The Wallet application would then issue an HTTPS GET request:</t>

<figure><artwork><![CDATA[
 GET /users/bob HTTP/1.1
 Host: www.wallet.com
 Accept: application/xrpl-testnet+json
 PayID-version: 1.0
]]></artwork></figure>

<t>Bob's wallet (e.g., a non-custodial wallet operating a PayID server) might respond like this:</t>

<figure><artwork><![CDATA[
 HTTP/1.1 200 OK
 Content-Type: application/json
 Content-Length: 403
 PayID-Version: 1.0
 Cache-Control: "no-store"
 Server: Apache/1.3.11
{
 "payId": "bob$wallet.com",
 "addresses": [],
 "verifiedAddresses": [
    {
        "signatures": [
          {
            "protected": {
              "name": "identityKey",
              "alg": "ES256K", 
              "typ": "JOSE+JSON",
              "b64": "false",
              "crit": ["b64"],
              "jwk": {
                  "kty": "EC",
                  "use": "sig",
                  "crv": "secp256k1", 
                  "x": "b8w36l6eCf7GyD5fvXp0Xj7ugdFuvYYcnmb1VRjBl5g=", 
                  "y": "Tp8RPAf4dWkd+K/BApSW/Ey5UJs53NOPJRqDNZzItPc="
              }
            },
            "signature": "base64Signature"
          }
          ],
        "payload": {
            "exp" : 1234574940,
            "payId": "bob$wallet.com",
            "payIdAddress": {
              "expTime": 34874613475,
              "paymentNetwork": "XRPL",
              "environment": "TESTNET",
              "addressDetailsType": "CryptoAddressDetails",
              "addressDetails": {
                "address": "T7CKYKhRujaxEs9fSxQwJApHsQVPKUgD7EtLWCGTAFBwTha"
               }
             }
          }
        }
      ]
  }
]]></artwork></figure>

<t>In the above example, the <spanx style="verb">PaymentInformation</spanx> resource is a pre-signed message with the PayID private keys of the PayID owner Bob. Bob's non-custodial wallet retrieves this response and sends it to the PayID client.</t>

</section>
</section>
<section anchor="security-considerations" title="Security Considerations">
<t>This security considerations section only considers PayID clients and servers bound to implementations as defined in this document.</t>

<t>The security guarantees mentioned in <xref target="PAYID-PROTOCOL"></xref> apply to this protocol. In this section, we discuss the security model for Self-Sovereign Verifiable PayID protocol for non-custodial service providers.</t>

<section anchor="security-model-for-non-custodial-payid-service-providers" title="Security Model for Non-Custodial PayID Service Providers">

<t>In the current security model, non-custodial wallets do not store their customersâ€™ keys.  Instead, wallet customers hold their private keys on their own device(s). There is a no trust requirement between the service provided by a non-custodial wallets and its customers. Because customers in this scenario hold the private keys:
  * Wallets are not liable for any consequences coming from the loss, compromise or theft of customers' private keys.
  * The non-custodial wallets do not require their customers to trust their servers in case wallets servers go malicious or are compromised.</t>

<t>This extension of Basic PayID protocol preserves this trust model. Rather than requiring the PayID server to provide accurate PayID response for their customers, the PayID owners can generate these signed mappings with their own PayID private key locally on their app/device. The sender of the payment (PayID client walletâ€™s customer) can easily verify these signatures out-of-band with the receiver (i.e., PayID owner). This eliminates any risk of the non-custodial PayID server wallet losing its private keys, going malicious, getting hacked, or becoming otherwise compromised in a way that customers might lose funds.</t>

</section>
<section anchor="using-json-web-signatures" title="Using JSON Web Signatures">
<t>The implementations of this extension of Basic PayID protocol MUST refer to the Security Considerations sections of <xref target="RFC7515"></xref> and <xref target="RFC7519"></xref>.</t>

</section>
<section anchor="using-addresses-array" title="Using addresses Array">
<t>The <spanx style="verb">addresses</spanx> array in the PayID response is an array of unsigned payment addresses. Implementations of this extension of Basic PayID that choose to populate this array along with the <spanx style="verb">verifiedAddresses</spanx> array MAY be vulnerable to downgrade attacks. We RECOMMEND against populating this array unless absolutely necessary depending on the use-case.
Also, note that this approach is not backwards-compatible with the PayID clients that do not understand Self-Sovereign Verifiable PayID protocol.</t>

</section>
</section>
<section anchor="privacy-considerations" title="Privacy Considerations">
<t>All privacy guarantees in the Privacy Considerations section of <xref target="PAYID-PROTOCOL"></xref> apply to this extension of Basic PayID protocol.</t>

</section>


  </middle>

  <back>

    <references title='Normative References'>

&RFC2119;
&RFC2818;
&RFC4949;
&RFC5280;
&RFC6979;
&RFC7515;
&RFC7517;
&RFC7519;
&RFC7797;
<reference anchor="PAYID-URI" target="https://tbd.example.com/">
  <front>
    <title>The 'payid' URI Scheme</title>
    <author initials="D." surname="Fuelling" fullname="David Fuelling">
      <organization></organization>
    </author>
    <date year="n.d."/>
  </front>
</reference>
<reference anchor="PAYID-DISCOVERY" >
  <front>
    <title>PayID Discovery</title>
    <author initials="D." surname="Fuelling" fullname="David Fuelling">
      <organization></organization>
    </author>
    <date year="n.d."/>
  </front>
</reference>
<reference anchor="PAYID-PROTOCOL" >
  <front>
    <title>PayID Protocol</title>
    <author initials="D." surname="Schwartz" fullname="David Schwartz">
      <organization></organization>
    </author>
    <date year="n.d."/>
  </front>
</reference>


    </references>

    <references title='Informative References'>

&RFC4732;


    </references>



  </back>

<!-- ##markdown-source:
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
IYXjinhqSqljhzqXfL18otxEP5CimPSudCUtSuD99CnSJnCgyiRbACyDa2OL
OR02ycVqyL6l7ucUNe8dHD3fP3p+8GSvHppvwVZnIYbmo3T0b1w8x1aMlRie
J/a5bg3zG9ID2O0qopTm2f6Lw/3ne8/2Dw8acgFTD/+g8kWa3eLeP19evGvK
GlRyF2VpgrNx2tXp4OrD6VXTTFNQP2GWXYHq4gvHZOv6lbH1bzdiV87ChbPk
t5eD/OiX4zeD6f7l/fHReO/ueTo4uvklP/34Rr54edSwDaZscoKv7z19tn+w
tTLhj1bzd5veAIHZecIHG/ZtHnYc0AmnF0pCqLMSNPIZ4TzKTGQH/HSaV3Ec
qD3W+U5UwqdzOM02K/h2nKAnAWL46aOPQS3U4LJ5GebW55clSex1M0psOg7s
CTpHCFVvVDuJqZaa7AmGXzyxVNQWCdrVCBTj4j8ZboJM9QWPBv7GzgOXnRdo
SnrGCXm69kjwCTaJX9dlFbIsWVWEhCwZmQsD0ENCU80/DBjDZkGayftoVsxY
ioo5nt2RD6iwwp2E0eOhXCEM7BaFxlut2o4KbXMjXN6UoZUXN8mMdxKegBSh
AlAtwlsVKWwy6tMxydA6C8uNip2qstsbG9q96iB5c/4UHI1WsArO6pShdZaG
gKXEMbR61ZysFK171gUBFE1G1xt+Fcl8dXAF+DWAO7Y2naQmCnMZmS1XOtkw
KXJJ0qqooMZUGNZtmbJ6XS5tGmVDei+rtTlG6d+dKWxZB++eWDRWrGZZQoFU
EGvrmJe4o8x6brO6N/sbtxx6nd8533clkT+2jFGrwleS3D0f2mPN4qH+GRvV
0OHFaRJ28rRzitWaTQ9OXoHMtfpIzw6ZTx3lypTP/W42Y1p9F+DOFO0RnT27
Gq4eogytafLPkerHFeWZP2oFZSgmhgxT7qOJNIZvVxVlsVUexEDnam5ydFk7
tzPHl6ZfFlJA6pGlY8542WOZ+YH9adm9CRloZy6jrNVQc6tlQtunxzucIWP6
Qm7kf1CDo/dqJTjiRpApBowPOuhA3YayHtg4epXeqkS0MJymo5FhzfA2qFvp
hOtH5nLFYQA07Wrk4SlFu1L2sdm/Vwz0RZgS9q7ol+W4RskpGwWiyTQHlqW3
Io5uFTDtd6tva6Jpa+MUmrdPtvC+xZdclI2uedTFgtVYtFTp6qymuQySPcV4
KKxdewxhJ2Ki89BhhJ2DZxIPH0nYWVg4gllUy2ue8cgJhZ2CeV4zSjT82GGF
mfLokYUDZP3BhZl6T4x/sXj2PH6ujseHPyxPDsZ3P8+f/PzlsJiEr4q7jx+D
ZDba++nyy8v4YPK3R9Yi2K/mLy4v+uP98OY2/P7t7sv+fHCze7o8uH6jD559
OL94c/nryYdffjvLL4K/rWYTq/kEPGlIftb5iMfXrPFmy3igBzNEPFtamx5u
lJFukpNunpV+TV76NZnpn81NN81O/yn56doMVTQJ1YN56+q3z63yaes74cxh
rxJkKQizZJaBz+W8xp3DefkU1vipBdKctbzvfxTBNE25iWaezilk4uiBQzZu
66p6kW287lC9y4A+uakto3FXk/a4As/ANtxhfwv2/9i+fm5412VDgC0luRY9
iF5C1UnHY206d9m9lwh0kWI/1V2FodzK86GtMC8bc1L22BcpNwObgMlvQ3qs
uemi3tzUOmumCxZ9pT1uxEuYRWLPJrA7M1FxJW7LqRfV9kHqxliNAkzu3jx3
/QnUNVAPxLi30WtiMMEWH9bJ9U3cnHRh8FD2G7m2zodCBO6ZWenTNGGgpTtt
cMwbXHJWZzu0H+n8ATRvuOml8sajoLQ3xxRViJvFTK3g9dXVhRj+cHo1xBbU
aUqhf2P+V2XV9eU70jbqDkqWppXN754Amo7ScOnSqyocmFvxO3X2G6VAwAYQ
nWNH5Cdz9xKhsL05eADJc0xopVdWAtm1AQ9VN3CcXynvp2D7HJ7wQ54H5AaC
RXpqaiWIFoTCOk3a3IiUN2LBXZX1sNaWqKhVFWy64hDV3p0QMs/VbJ6zvPGV
udWXS0pwWsgtm07Xyjs2nsQNmIiXKy3Ej7WbGfkETl3PqU25vEnCsmEhIrrU
a2x6u2ZhnY7Q7LWyW234QzrqYj5Ps1xvnlvaOzprlcWZ501yFYN2vUnSsN8U
BCxtagUbtsLt1VZvZ6Zhv900K0t62AOOLeCkMq/TBba2thv7hkPsR6Y7Dkwo
mrEprRoaqrGAogVdAPU6VdfXhAjSs8cANIc9TaXZPyM2j5hhjyUNmJICmhds
Dyt2dIAjzeiijsoyPBzi4xib9l7ITD9uvIli9tLUqpEAMlARwMDHJsu4SexF
496QpuNnW3IRp6Z17ZpPWTftdXVXiY2901OsFWtey53YbnSZlZrGp8s5ijG1
LwgdqERmUcou++F+W3LGeG3n2IUbNxT1I9a+3QJoByjSGisW3AMO9li7Ip8U
Y/DN6K7xhgLE7nzSKMVCjTqY14Tmdkh5UZYMCi9GVYbEHQ1gl7LZhSo1cTrp
RInlUX0dtA7YOpCJl+noWwv2tpbLthhW85ghynV1meszwiGXRlmNLnSNc7TU
KFuLDEzjKAPTEpqr9DUHbE1ZJXTrOIjZfXhl35nCkCzSs5pi8/t2k6VVdHe/
H/2u17K6BmTyleYWeGIcLjgRq5S2joyPdunO2S5Qj+bt7nX3ePA1RK09gT/P
UFKVR9jI9ir3Be6zedzJYW0w5d9/0dTSDX/44hre66BfltjrPqHOX+KeYYtp
IajfhTCjJrAkP+hbkR1TH7J2BEtEpEQWN4uMePrkiTh/yw+PuZTWweywCn8J
sp3zTiWTfNoT+0+e+bj85OPCL8hgqjrHfA8Gkrok7dC9N5PXDcyl1v4c5wFI
z7p7e36f6r/KWf8qZ/3/LmfVqll/RTGLKiWH+0f7T/5Vy/pLallXh8dvP76d
XhZf5P2pPhoP7n9cvOnPX+sff7p4ez05OTzN390c/3DVf/VycTWVf13R6g8w
4KbVj44M7IWB9gaJRcQXSFXHlFpsS8/DP37h+gL9oxDwT13jpBqdki1PmDs2
ZbRORQyM46O8mqtzIGpuSDUWr7wgkYeDxtoWpeNuTFeW114VBVIJCLCob6Re
Tas2cleu37jIwkExKWQmwSHiDUm09GnyUCJC7nRpf7WmDFaYmWX424ZAkQKd
QpuGieqPdWBEtXHOiZPX3ODnwNhR/b3bpBoMlyGwX3ujU3MjjbBAw2X4dvPF
6rU34FH2uqK8325Ea/0Fd3dHHmTVnHNCFkeF08xowKN32JnkFSKZUl0zIvTr
Rrn2b5i/VIEsKrfxrSDZbMRBX4G9Ry0IN3Zhcwk+jqR//z2wdxbplw3SGcZ+
rpcxTrX2L8abXz4Z090lB863lV27tCtK9aOcMrSq84pLp+WtaqteUcI/JmFX
sc8naXmVmLLohnvxV5sle+ZHJayZYShI6LriUub8GzAyMZB7yXHjtW9IuQo6
xK3dQjUZTPU3C2oWka+4+sfA2rZFljdBvbvCKJqr94XN8XspwfCmuWjcNVaH
Lp7bBmZTq9iu5PJMb9CgUiJ3CDoFJITFy98a0t6vDQEriryTjiFBTbzGa66y
wZbbUVdBEuKhbC8ceD8fRdXISN9aAB8q3uM1ZNZmEFfbXe5LZBukBJ87QcEj
drr6DflxcIsNYCneTDfS7+5NVH4RgkoB2DHBHetOXu25ObKWfuSC7N8138Zs
uNDadOCyeUHCFHPMwQzXwNYczsBSXmHF/RaMbYLzwHWJj+jjOVXrgdMrvyzs
X67GOgPNgB2LxIhr7WgKf+6gfqyyFnum+APHYLylV3KksGUlW7PQ43HASIm7
Ikbloh9BS8EkLZIJnlRhkRokQtfugckJdm/ndmd3gsVLFgn9noQc6TQucrxW
X7ZqhWpufpCJtRDrTx00ZN1WP9Zpm34Fz1bSI811OcktUlSkB2gWMgt1B2UR
tkaIa+GVjUb4whJbV3MRRn5FsxJFSxeoNsFKsNSPY9aooBKiWFFofKkMocbr
w5e1kt9t/Tf/Tohgj1UAAA==

-->

</rfc>

