<?xml version="1.0" encoding="utf-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.3.8 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!ENTITY RFC2119 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC2818 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2818.xml">
<!ENTITY RFC8446 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8446.xml">
<!ENTITY RFC7258 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7258.xml">
<!ENTITY RFC7231 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7231.xml">
<!ENTITY RFC7413 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7413.xml">
<!ENTITY RFC6265 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6265.xml">
<!ENTITY RFC4732 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.4732.xml">
]>

<?rfc toc="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>
<?rfc comments="yes"?>

<rfc docName="draft-aanchal-payid-protocol-01" category="std">

  <front>
    <title>PayID Protocol</title>

    <author initials="A." surname="Malhotra" fullname="Aanchal Malhotra">
      <organization>Ripple</organization>
      <address>
        <postal>
          <street>315 Montgomery Street</street>
          <city>San Francisco</city>
          <region>CA</region>
          <code>94104</code>
          <country>US</country>
        </postal>
        <phone>-----------------</phone>
        <email>amalhotra@ripple.com</email>
        <uri>https://www.ripple.com</uri>
      </address>
    </author>
    <author initials="D." surname="Schwartz" fullname="David Schwartz">
      <organization>Ripple</organization>
      <address>
        <postal>
          <street>315 Montgomery Street</street>
          <city>San Francisco</city>
          <region>CA</region>
          <code>94104</code>
          <country>US</country>
        </postal>
        <phone>-----------------</phone>
        <email>david@ripple.com</email>
        <uri>https://www.ripple.com</uri>
      </address>
    </author>

    <date year="2020" month="July" day="07"/>

    <area>security</area>
    
    

    <abstract>


<t>This specification defines the PayID protocol - an application-layer protocol, which can be used to interact with a PayID-enabled service provider. The primary use case is to discover payment account information along with optional metadata identified by a PayID <xref target="PAYID-URI"></xref>. The protocol is based on HTTP transfer of PayID protocol messages over a secure transport.</t>



    </abstract>


    <note title="Feedback">


<t>This specification is a draft proposal, and is part of the <eref target="https://payid.org/">PayID Protocol
</eref> work. Feedback related to this specification should
 be sent to <eref target="mailto:rfcs@payid.org">rfcs@payid.org</eref>.</t>


    </note>


  </front>

  <middle>


<section anchor="terminology" title="Terminology">
<t>This protocol can be referred to as the <spanx style="verb">Basic PayID Protocol</spanx> or <spanx style="verb">PayID Protocol</spanx>. The following terminology is used by this specification.</t>

<t><list style="symbols">
  <t>Endpoint: either the client or the server of the connection.
  <list style="symbols">
      <t>Sending Endpoint: sending side of the transaction (wallet or exchange).</t>
      <t>Receiving Endpoint: receiving side of the transaction (wallet or exchange).</t>
    </list></t>
  <t>PayID client: The endpoint that initiates the PayID protocol.</t>
  <t>PayID owner: The owner of the PayID URI as described in <xref target="PAYID-URI"></xref>.</t>
  <t>PayID server: The endpoint that returns payment account information.</t>
</list></t>

<t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in <xref target="RFC2119"></xref>.</t>

</section>
<section anchor="introduction" title="Introduction">
<t><xref target="PAYID-URI"></xref> describes a URI scheme to identify payment account(s) at a service provider. <xref target="PAYID-DISCOVERY"></xref>, on the other hand, defines how to transform a PayID URI into a PayID URL that can be used by other protocols to interact with a PayID-enabled service provider but does not define the protocol(s) to do so.</t>

<t>This document specifies the PayID protocol - an application-layer protocol which can be used to interact with a PayID-enabled service provider identified by a PayID URL using standard HTTP methods over a secure transport. In its most basic mode, a PayID protocol resource returns a JavaScript Object Notation (JSON) object representing the payment account(s) information along with optional metadata corresponding to the queried PayID URI <xref target="PAYID-URI"></xref>. The protocol defines new media formatting types for requests and responses, but uses normal HTTP content negotiation mechanisms for selecting alternatives that the PayID client and server may prefer in anticipation of serving different use cases.</t>

<section anchor="design-goals" title="Design Goals">

<t><list style="symbols">
  <t>Extensibility</t>
</list></t>

<t>Although the primary use case for the payment account(s) information resource returned via the Basic PayID protocol is assumed to be for making payments, the PayID protocol is designed to be easily extensible to facilitate creation and retrieval of other resources about the PayID owner, PayID client and/or PayID server that might be required for making payments.</t>

<t><list style="symbols">
  <t>Neutrality: Currency and Network Agnostic</t>
</list></t>

<t>The PayID protocol is designed to be a fundamentally neutral protocol. The PayID protocol is capable of returning a PayID owner's payment account(s) information for any network that they (or their service) can support. This makes the PayID protocol a network and currency agnostic protocol, capable of enabling payments in BTC, XRP, ERC-20 tokens, Lightning, ILP, or even fiat networks like ACH.</t>

<t><list style="symbols">
  <t>Decentralized &amp; Peer-to-Peer</t>
</list></t>

<t>Just like email servers, anyone can run their own PayID server or use third-party hosted services. If self-hosted, the PayID protocol introduces no new counterparty risk or changes to a service’s security or privacy model. PayID protocol doesn’t require new, complex, and potentially unreliable peer discovery protocols, instead establishing direct peer-to-peer connections between communicating parties from the start.
   PayID is built on the most successful decentralized network: the web. There is no designated centralized authority, or a risk of a patchwork of different standards in different jurisdictions that make a global solution impossibly complex.</t>

<t><list style="symbols">
  <t>Service Sovereignty</t>
</list></t>

<t>Each service provider that uses PayID for their users maintains full control of its PayID URL space and PayID service, and has the ability to incorporate any policies they choose, including privacy, authentication, and security.  They also have full sovereignty over users on their domain, just like with email. PayID is highly generalized and does not prescribe any particular solution outside of the standardized communication, which makes it compatible with existing compliance and user management tools and philosophies.</t>

</section>
</section>
<section anchor="payid-server-discovery" title="PayID Server Discovery">
<t>To support PayID protocol, the PayID client needs to discover the PayID URL corresponding to the PayID URI <xref target="PAYID-URI"></xref>. This can be obtained either by using mechanisms described in <xref target="PAYID-DISCOVERY"></xref> or by manually entering the PayID URL.</t>

</section>
<section anchor="json-format-design" title="JSON Format Design">
<t>JSON, as described in [RFC8259][], defines a test format for serializing structured data. Objects are serialized as an unordered collection of name/value pairs. JSON does not define any semantics around the name/value pairs that make up an object. PayID protocol's JSON format defines name/value pairs that annotate a JSON object, property or array for PayID protocol resources.</t>

<t>The PayID client MUST request a PayID response in JSON format through the <spanx style="verb">Accept</spanx> header with the media type as defined below, optionally followed by format parameters. One of the optional parameters is the case-insensitive <spanx style="verb">q</spanx> value as described in Section 5.3.1 of <xref target="RFC7231"></xref> to indicate relative preference.</t>

<t>Each message body is represented as a single JSON object. This object contains a name/value pair whose value is the correct representation for a primitive value as described in [RFC8259][], or an array or object as described in the section below.</t>

<t>If the PayID server does not support JSON format, it MUST reply with an appropriate error response.</t>

<section anchor="http-method" title="HTTP Method">
<t>The PayID protocol payment account(s) information resource is requested using the HTTP GET method.</t>

<t>Following are the media types to request the payment account(s) information resource on different payment-networks and environments.</t>

</section>
<section anchor="media-type-of-the-payment-accounts-information-resource" title="Media Type of the Payment Account(s) Information Resource">
<t>The media type for the payment account information resource is <spanx style="verb">application/* + json</spanx>.</t>

</section>
<section anchor="response-for-application-json" title="Response for application/* + json">
<t>The response body for <spanx style="verb">application/* + json</spanx> is a JSON object with the following name/value pairs.</t>

<figure><artwork><![CDATA[
  {  
   optional string payId,
   required Address[] addresses,
   optional string memo,
   optional string identity,
   optional ProofOfControlSignature proofOfControlSignature
  }
]]></artwork></figure>

<section anchor="payid" title="payId">
<t>The value of <spanx style="verb">payId</spanx> field is the PayID URI in the client request that identifies the payment account information that the JSON object describes.</t>

<t>The <spanx style="verb">payId</spanx> field is an optional field in the response.</t>

</section>
<section anchor="addresses" title="addresses">
<t>The value of <spanx style="verb">addresses</spanx> field is a JSON array of type <spanx style="verb">Address</spanx> of one or more JSON objects with the following name/value pairs.</t>

<figure><artwork><![CDATA[
  {
   required string paymentNetwork,
   optional string environment,
   required string addressDetailsType,
   required addressDetailsType addressDetails
  }
]]></artwork></figure>

<t><list style="symbols">
  <t>paymentNetwork: The value of payment-network as specified in the client request's <spanx style="verb">Accept</spanx> header</t>
  <t>environment: The value of environment as specified in the client request's <spanx style="verb">Accept</spanx> header</t>
  <t>addressDetailsType: The value of <spanx style="verb">addressDetailsType</spanx> is one of the following strings.
  <list style="symbols">
      <t>CryptoAddressDetails</t>
      <t>ACHAddressDetails</t>
    </list></t>
  <t>addressDetails: The value of <spanx style="verb">addressDetails</spanx> is the address information necessary to send payment on a specific payment-network and environment.</t>
</list></t>

<t>The <spanx style="verb">addresses</spanx> field MUST be present in the response.</t>

<section anchor="addressdetails" title="addressDetails">
<t>We define the following two types of payment address types.</t>

<t><list style="symbols">
  <t>CryptoAddressDetails: This is a JSON object with the following name/value pairs.  <vspace blankLines='1'/>
{
  required string address,
  optional string tag
}  <list style="symbols">
      <t>address: The value of <spanx style="verb">address</spanx> field contains the on-ledger address corresponding to this owner.</t>
      <t>tag: The value of <spanx style="verb">tag</spanx> field is the tag value used by some cryptocurrencies to distinguish accounts contained within a singular address. E.g XRP Ledger's destination tag.</t>
    </list></t>
  <t>ACHAddressDetails: This is a JSON object with the following name/value pairs.  <vspace blankLines='1'/>
{
  required string accountNumber,
  required string routingNumber
}  <list style="symbols">
      <t>accountNumber: The value of <spanx style="verb">accountNumber</spanx> is the ACH account number.</t>
      <t>routingNumber: The value of <spanx style="verb">routingNumber</spanx> is the ACH routing number.</t>
    </list></t>
</list></t>

</section>
</section>
<section anchor="memo" title="memo">
<t>The <spanx style="verb">memo</spanx> string may specify additional metadata corresponding to a payment.</t>

<t>The <spanx style="verb">memo</spanx> string is an OPTIONAL field in the response.</t>

</section>
<section anchor="identity" title="identity">
<t>The <spanx style="verb">identity</spanx> string may specify any additional identity information about the PayID owner or PayID server.</t>

<t>The <spanx style="verb">identity</spanx> string is an OPTIONAL field in the response.</t>

</section>
<section anchor="proofofcontrolsignature" title="proofOfControlSignature">
<t>The value of <spanx style="verb">proofOfControlSignature</spanx> field is a JSON object of type <spanx style="verb">ProofOfControlSignature</spanx> with the following name/value pairs.</t>

<figure><artwork><![CDATA[
  {
   required string publicKey,
   required string payID,
   required string hashAlgorithm,
   required string signature
  }
]]></artwork></figure>

<t><list style="symbols">
  <t>publicKey: On-ledger public key of the Receiving Endpoint</t>
  <t>payID: PayID URI of the PayID owner</t>
  <t>hashAlgorithm: Hash algorithms used to hash the entire contents of the <spanx style="verb">ProofOfControlSignature</spanx> message.</t>
  <t>signature: Digital signature over the hash of the entire contents of the <spanx style="verb">ProofOfControlSignature</spanx> message using the private key corresponding to the public key in <spanx style="verb">publicKey</spanx>. This is a proof that the Receiving Endpoint is the owner of the on-ledger public key in <spanx style="verb">publicKey</spanx>.</t>
</list></t>

<t>The <spanx style="verb">proofOfControlSignature</spanx> is an OPTIONAL field in the response.</t>

</section>
</section>
<section anchor="meaning-of-media-type-application-json" title="Meaning of Media Type application/* + json">
<t><spanx style="verb">*</spanx> may represent different payment-networks and environments. In this document, we propose standards with the media types specific to XRP, ILP, and ACH payment networks. We also propose media types that return all addresses across all payment networks. Other payment networks MUST establish standard media types for their networks at IANA.</t>

<t><list style="symbols">
  <t>Accept: application/payid-json
  Returns all payment account(s) information corresponding to the requested PayID URI</t>
  <t>Accept: application/xrpl-mainnet+json</t>
</list></t>

<t>Returns XRPL mainnet XAddresses</t>

<t><list style="symbols">
  <t>Accept: application/xrpl-testnet+json</t>
</list></t>

<t>Returns XRPL testnet XAddresses</t>

<t><list style="symbols">
  <t>Accept: application/xrpl-devnet+json</t>
</list></t>

<t>Returns XRPL devnet XAddresses</t>

<t><list style="symbols">
  <t>Accept: application/interledger-testnet+json</t>
</list></t>

<t>Returns mainnet payment pointer to initiate SPSP request</t>

<t><list style="symbols">
  <t>Accept: application/interledger-devnet+json</t>
</list></t>

<t>Returns testnet payment pointer to initiate SPSP request</t>

<t><list style="symbols">
  <t>Accept: application/ach+json</t>
</list></t>

<t>Returns account and routing number</t>

<t>The PayID client MAY specify more than one media type along with the preference parameter. The server MUST respond as described in the Content Negotiation section below.</t>

</section>
</section>
<section anchor="header-fields" title="Header Fields">
<t>PayID protocol defines semantics around the following request and response headers. Additional headers MAY be defined, but have no unique semantics defined in the PayID protocol.</t>

<section anchor="common-headers" title="Common Headers">
<t>The following headers are common between PayID requests and responses.</t>

<section anchor="header-content-type" title="Header Content-Type">
<t>PayID requests and responses with a JSON message body MUST have a <spanx style="verb">Content-Type</spanx> header value of <spanx style="verb">application-json</spanx>.</t>

</section>
<section anchor="header-content-length" title="Header Content-Length">
<t>As defined in [RFC7230][], a request or response SHOULD include a <spanx style="verb">Content-Length</spanx> header when the message's length can be determined prior to being transferred. PayID protocol does not add any additional requirements over HTTP for writing Content-Length.</t>

</section>
<section anchor="header-payid-version-todo" title="Header PayID-version (TODO)">
<t>The PayID client MUST include the PayID version request header field to specify the version of the PayID protocol used to generate the request.</t>

<t>If present on a request, the PayID server MUST interpret the request according to the rules defined in the specified version of the PayID protocol or fail the request with an appropriate error response code.</t>

<t>If not specified in a request, the PayID server MUST fail the request with an appropriate error code.</t>

</section>
</section>
<section anchor="request-headers" title="Request Headers">
<t>In addition to common Headers, the PayID client MUST specify the following request header.</t>

<section anchor="header-accept" title="Header Accept">
<t>The PayID client MUST specify the <spanx style="verb">Accept</spanx> request header field with at least one of the registered media types (Section X). The purpose of this header is to indicate what type of content can be understood in the response. It specifies the <spanx style="verb">payment-network</spanx> and <spanx style="verb">environment</spanx> of the payment account and its representation format for which the PayID client wants to receive information. The representation format is always JSON.</t>

<t>The PayID server MUST reject formats that specify unknown or unsupported format parameters.</t>

</section>
</section>
<section anchor="response-headers" title="Response Headers">
<t>In addition to the Common Headers, the PayID server MUST specify the following response header.</t>

<section anchor="header-cache-control" title="Header Cache-Control">
<t>The PayID server MUST include the <spanx style="verb">Cache-Control</spanx> header with the max-age limit of 0. The intermediate hops or PayID client MUST NOT cache the responses.</t>

</section>
</section>
</section>
<section anchor="extensibility" title="Extensibility">

<section anchor="payload-extensibility" title="Payload Extensibility">
<t>PayID protocol supports extensibility in the payload, according to the specific format.</t>

<t>Regardless of the format, additional content MUST NOT be present if it needs to be understood by the receiver in order to correctly interpret the payload according to the specified PayID-Version header. Thus, clients MUST be prepared to handle or safely ignore any content not specifically defined in the version of the payload specified by the PayID-version header.</t>

</section>
<section anchor="header-field-extensibility" title="Header Field Extensibility">
<t>The PayID protocol defines semantics around certain HTTP request and response headers. Services that support a version of the PayID protocol conform to the processing requirements for the headers defined by this specification for that version.</t>

<t>Individual services MAY define custom headers. These headers MUST NOT begin with PayID. Custom headers SHOULD be optional when making requests to the service. A service MUST NOT require the PayID client to understand custom headers to accurately interpret the response.</t>

</section>
<section anchor="format-extensibility" title="Format Extensibility">
<t>A PayID service MUST support JSON format as described above and MAY support additional formats response bodies.</t>

</section>
</section>
<section anchor="basic-payid-protocol" title="Basic PayID Protocol">
<t>The Basic PayID protocol is used to request a payment account(s) information resource identified by a PayID URI from a PayID-enabled service provider identified by a PayID URL using HTTP over secure transport. When successful, the PayID protocol always returns the JSON representation of a payment account(s) information resource along with optional metadata. This information can be used for any purposes outside the scope of this document, though it is expected the most common application would be making payment.</t>

<t>The Basic PayID protocol comprises request and response messages, each of which is defined in more detail below. The following is a visual representation of the basic protocol flow:</t>

<figure><artwork><![CDATA[
PayID client                                         PayID server
   |                                                          |
   |              1.) GET request to PayID URL                |
   |--------------------------------------------------------->|
   |                                                          | |                                                          |
   |              2.) 200 Ok                                  |
   |                  Payment account information response    |
   |<---------------------------------------------------------|
   |                                                          |
   |                                                          |
]]></artwork></figure>

<section anchor="step-1-http-request-to-payid-url-using-http-get-method" title="Step 1: HTTP Request to PayID URL using HTTP GET Method">
<t>A basic PayID client issues a query using the HTTP GET method to the PayID URL without any query parameters and body.</t>

<t>The PayID client MUST query the PayID server using HTTPS only. <xref target="RFC2818"></xref> defines how HTTPS verifies the PayID server's identity. If the HTTPS connection cannot be established for any reason, then the PayID client MUST accept that the PayID request has failed and MUST NOT attempt to reissue the PayID request using HTTP over a non-secure connection.</t>

</section>
<section anchor="step-2-payment-account-information-response" title="Step 2: Payment Account Information Response">
<t>In response, the PayID server returns a JSON object representation of a payment account(s) information resource for the payment-network and environment requested by the PayID client in the request <spanx style="verb">Accept</spanx> header field, along with other required and/or optional metadata.</t>

<t>A PayID server MUST be able to process the <spanx style="verb">application/payid+json</spanx> header type.</t>

<t>If the PayID server does not contain the payment account information corresponding to the request, the PayID server MUST respond with an appropriate error message.</t>

<t>A PayID server MAY redirect the PayID client; if it does, the redirection MUST only be to an <spanx style="verb">https</spanx> URI and the PayID client MUST perform certificate validation again when redirected.</t>

</section>
<section anchor="step-3-parse-payment-account-information-response" title="Step 3: Parse Payment Account Information Response">
<t>If the PayID server returns a valid response, the response will contain one or more of the fields defined above.</t>

</section>
</section>
<section anchor="example-use-of-basic-payid-protocol" title="Example Use of Basic PayID Protocol">
<t>This section shows sample use of Basic PayID protocol in several hypothetical scenarios.</t>

<section anchor="basic-payid-protocol-by-a-wallet" title="Basic PayID Protocol by a Wallet">
<t>Suppose Alice wishes to send a friend some XRP from a web-based wallet provider that Alice has an account on. Alice would log-in to the wallet provider and enter Bob's PayID (say, <spanx style="verb">bob$receiver.example.com</spanx>) into the wallet UI to start the payment.
   The Wallet application would first discover the PayID URL for the PayID service-provider using one of the mechanisms described in PayID discovery <xref target="PAYID-DISCOVERY"></xref> protocol.</t>

<t>The Wallet application would then issue an HTTPS GET request:</t>

<figure><artwork><![CDATA[
 GET /users/bob HTTP/1.1
 Host: www.receiver.example.com
 Accept: application/payid+json
 PayID-version: 1.0
]]></artwork></figure>

<t>The PayID server might respond like this:</t>

<figure><artwork><![CDATA[
 HTTP/1.1 200 OK
 Content-Type: application/json
 Content-Length: 403
 PayID-version: 1.0
 Cache-Control: max-age=0
 Server: Apache/1.3.11
 {
   "payId" : "bob$receiver.example.com",
   "addresses" :
   [
     {  
       "paymentNetwork" : "xrpl",
       "environment" : "testnet",
       "addressDetailsType" : "CryptoAddressDetails",
       "addressDetails" : {
                    "address" : "XTVQWr6BhgBLW2jbFyqqufgq8T9eN7KresB684ZSHKQ3oDth"
            }
      },
     {
       "paymentNetwork" : "ach",
       "environment" : "mainnet",
       "addressDetailsType" : "ACHAddressDetails",
       "addressDetails" : {
                    "accountNumber" : "5674536253",
                    "routingNumber" : "aYJTDFGLKAJD"
            }
      }
    ],
    "memo" : "Additional optional Information"
 }
]]></artwork></figure>

<t>In the above example we see that the PayID server returned a list of payment accounts identified by PayID <spanx style="verb">bob$receiver.example.com</spanx>. This is because Alice's Wallet asked for all the payment accounts corresponding to the PayID in the <spanx style="verb">Accept</spanx> header.
  Alice's Wallet MAY then use the payment account information to make payments.</t>

<t>Another example:</t>

<figure><artwork><![CDATA[
 GET /users/bob HTTP/1.1
 Host: www.receiver.example.com
 Accept: application/xrpl-testnet+json; q=0.4,
         application/ach+json; q=0.1
 PayID-version= 1.0
]]></artwork></figure>

<t>The PayID server might respond like this:</t>

<figure><artwork><![CDATA[
 HTTP/1.1 200 OK
 Content-Type: application/json
 Content-Length: 403
 PayID-version: 1.0
 Cache-Control: max-age=0
 Server: Apache/1.3.11
 {
   "payId" : "bob$receiver.example.com",
   "addresses" :
   [
     {  
       "paymentNetwork" : "xrpl",
       "environment" : "testnet",
       "addressDetailsType" : "CryptoAddressDetails",
       "addressDetails" : {
                    "address" : "XTVQWr6BhgBLW2jbFyqqufgq8T9eN7KresB684ZSHKQ3oDth"
            }
      }
    ]
 }
]]></artwork></figure>

</section>
</section>
<section anchor="common-response-status-codes-todo" title="Common Response Status Codes (TODO)">
<t>A PayID server MAY respond to a request using any valid HTTP response code appropriate for the request. The PayID server SHOULD be as specific as possible in its choice of an HTTP specific status code.</t>

<section anchor="success-responses" title="Success Responses">
<t>The following response codes represent successful requests.</t>

<section anchor="response-code-200-ok" title="Response Code 200 OK">
<t>A request that does not create a resource returns 200 OK if it is completed successfully and the value of the resource is not null. null. In this case, the response body MUST contain the value of the resource specified in the request URL.</t>

</section>
<section anchor="response-code-3xx-redirection" title="Response Code 3xx Redirection">
<t>As per <xref target="RFC7231"></xref>, a 3xx Redirection indicates that further action needs to be taken by the client in order to fulfill the request. In this case, the response SHOULD include a Location header, as appropriate, with the URL from which the result can be obtained; it MAY include a Retry-After header.</t>

</section>
</section>
<section anchor="client-error-responses" title="Client Error Responses">
<t>Error codes in the 4xx range indicate a client error, such as a malformed request.
  In the case that a response body is defined for the error code, the body of the error is as defined for the appropriate format.</t>

</section>
</section>
<section anchor="content-negotiation" title="Content Negotiation">

<t>The PayID client MAY choose to query for all possible payment addresses corresponding to a PayID URI</t>

<figure><artwork><![CDATA[
 GET / HTTP/1.1
 Accept: application/all+json                 
]]></artwork></figure>

<t>In this case, the PayID server MAY respond with all payment account(s) information associated with the queried PayID.</t>

<t>Alternatively, the PayID client MAY choose to query for a subset payment account(s) information in the order of preference.</t>

<figure><artwork><![CDATA[
 GET / HTTP/1.1
 Accept: application/xrpl-testnet+json; q=0.4,
         application/xrpl-mainnet+json; q= 0.1
]]></artwork></figure>

<t>In this case, the PayID server MUST respond with the payment account(s) information corresponding to at least one of the payment-networks and environments mentioned in the <spanx style="verb">Accept</spanx> header in the order of client request preference. If none of those exist, the PayID server MUST send an appropriate error response.</t>

<t>Alternatively, the PayID client MAY combine the above two approaches.</t>

<figure><artwork><![CDATA[
 GET / HTTP/1.1
 Accept: application/xrpl-testnet+json; q=0.4,
         application/xrpl-mainnet+json; q= 0.1,
         application/payid+json
]]></artwork></figure>

<t>In this case, the PayID server MUST respond with the payment account information corresponding to at least one of the payment-network and environment mentioned in the <spanx style="verb">Accept</spanx> header in the order of PayID client's preference. If none of those exist, then the PayID server MUST respond with payment account(s) information corresponding to all payment accounts associated with the queried PayID URI.</t>

</section>
<section anchor="versioningtodo" title="Versioning(TODO)">

<t>Versioning enables clients and servers to evolve independently. PayID protocol defines semantics for protocol versioning.</t>

<t>PayID requests and responses are versioned according to the PayID-version header.
 PayID clients include the PayID-version header in order to specify the maximum acceptable response version. PayID servers respond with the maximum supported version that is less than or equal to the requested <spanx style="verb">major</spanx></t>

</section>
<section anchor="security-considerations" title="Security Considerations">
<t>This security considerations section only considers PayID clients and servers bound to implementations as defined in this document. Such implementations have the following characteristics:</t>

<t><list style="symbols">
  <t>PayID URIs are static and well-known to the PayID client; PayID server URLs can be static or discovered.</t>
</list></t>

<t>The following are considered out-of-scope:</t>

<t><list style="symbols">
  <t>Communication between the PayID owner and the wallet or exchange (which acts as PayID server) for PayID URI registration, etc.</t>
  <t>Communication between the sender of the transaction and the PayID client to transfer information such as PayID URI and other transaction details, etc.</t>
  <t>PayID server URL discovery by the PayID client. Implementations using PayID-Discovery <xref target="PAYID-DISCOVERY"></xref> MUST consider the security considerations in the corresponding document.</t>
  <t>PayID server URL resolution by the PayID client. Implementations using DNS, DNSSEC, DoH, DoT, etc. MUST consider the security considerations of the corresponding documents.</t>
</list></t>

<section anchor="network-attacks" title="Network Attacks">
<t>Basic PayID protocol's security model assumes the following network attackers:</t>

<t><list style="symbols">
  <t>Off-path attacker: An off-path attacker can be anywhere on the network. She can inject and spoof packets but can not observe, or tamper with the legitimate traffic between the PayID client and the server.</t>
  <t>On-path attacker: An on-path attacker can eavesdrop, inject, spoof and replay packets, but can not drop, delay or tamper with the legitimate traffic.</t>
  <t>In-path or Man-in-the-middle (MiTM) attacker: An MiTM is the most powerful network attacker. An MiTM has full access to the communication path between the PayID client and the server. She can observe, modify, delay and drop network packets.</t>
</list></t>

<t>Additionally we assume that the attacker has enough resources to mount an attack but can not break the security guarantees provided by the cryptographic primitives of the underlying secure transport.</t>

<t>The basic PayID protocol runs over HTTPS and thus relies on the security of the underlying transport. Implementations utilizing TLS 1.3 benefit from the TLS security profile defined in <xref target="RFC8446"></xref> against all the above network attackers.</t>

<section anchor="denial-of-service-dos-attacks" title="Denial-of-Service (DoS) attacks">
<t>As such, cryptography can not defend against DoS attacks because any attacker can stop/interrupt the PayID protocol by:
  * Dropping network packets,
  * Exhaustion of resources either at the network level or at PayID client and/or server.</t>

<t>The PayID servers are recommended to follow general best network configuration practices to defend against such attacks <xref target="RFC4732"></xref>.</t>

</section>
</section>
<section anchor="information-integrity" title="Information Integrity">
<t>The HTTPS connection provides transport security for the interaction between PayID client and server but does not provide the response integrity of the data provided by PayID server. A PayID client has no way of knowing if data provided in the payment account information resource has been manipulated at the PayID server, either due to malicious behavior on the part of the PayID server administrator or as a result of being compromised by an attacker. As with any information service available on the Internet, PayID clients should be wary of the information received from untrusted sources.</t>

</section>
</section>
<section anchor="privacy-considerations" title="Privacy Considerations">
<t>The PayID client and server should be aware that placing information on the Internet means that any one can access that information. While PayID protocol is an extremely useful tool to discovering payment account(s) information corresponding to a human-rememberable PayID URI, PayID owners should also understand the associated privacy risks. The easy access to payment account information via PayID protocol was a design goal of the protocol, not a limitation.</t>

<section anchor="access-control" title="Access Control">
<t>PayID protocol MUST NOT be used to provide payment account(s) information corresponding to a PayID URI unless providing that data via PayID protocol by the relevant PayID server was explicitly authorized by the PayID owner. If a PayID owner wishes to limit access to information, PayID servers MAY provide an interface by which PayID owners can select which information is exposed through the PayID server interface. For example, PayID servers MAY allow PayID owners to mark certain data as <spanx style="verb">public</spanx> and then utilize that marking as a means of determining what information to expose via PayID protocol. The PayID servers MAY also allow PayID owners to provide a whitelist of users who are authorized to access the specific information. In such a case, the PayID server MUST authenticate the PayID client.</t>

</section>
<section anchor="payment-address-rotation" title="Payment Address Rotation">
<t>The power of PayID protocol comes from providing a single place where others can find payment account(s) information corresponding to a PayID URI, but PayID owners should be aware of how easily payment account information that one might publish can be used in unintended ways. As one example, one might query a PayID server only to see if a given PayID URI is valid and if so, get the list of associated payment account information. If the PayID server uses the same payment address each time, it becomes easy for a third-party to track one's entire payment history. The PayID server MUST follow the best practice of payment address rotation for every query to mitigate this privacy concern.</t>

</section>
<section anchor="on-the-wire" title="On the Wire">
<t>PayID protocol over HTTPS encrypts the traffic and requires mutual authentication of the PayID client and the PayID server. This mitigates both passive surveillance <xref target="RFC7258"></xref> and the active attacks that attempt to divert PayID protocol queries to rogue servers.</t>

<t>Additionally, the use of the HTTPS default port 443 and the ability
  to mix PayID protocol traffic with other HTTPS traffic on the same connection can deter unprivileged on-path devices from interfering with PayID operations and make PayID traffic analysis more difficult.</t>

</section>
<section anchor="in-the-payid-server" title="In the PayID Server">
<t>The Basic PayID protocol data contains no information about the PayID client; however, various transports of PayID queries and responses do provide data that can be used to correlate requests. A Basic PayID protocol implementation is built on IP, TCP, TLS and HTTP. Each layer contains one or more common features that can be used to correlate queries to the same identity.</t>

<t>At the IP level, the PayID client address provides obvious correlation information. This can be mitigated by use of NAT, proxy, VPN, or simple address rotation over time. It may be aggravated  by use of a PayID server that can correlate real-time addressing information with other identifiers, such as when PayID server and other services are operated by the same entity.</t>

<t>PayID client implementations that use one TCP connection for multiple PayID requests directly group those requests. Long-lived connections have better performance behaviours than short-lived connections; however they group more requests, which can expose more information to correlation and consolidation. TCP-based solutions may also seek performance through the use of TCP Fast Open <xref target="RFC7413"></xref>. The cookies used in TCP Fast open may allow PayID servers to correlate TLS connections together.</t>

<t>TCP-based implementations often achieve better handshake performance through the use of some form of session resumption mechanism, such as Section 2.2 of <xref target="RFC8446"></xref>. Session resumption creates a trivial mechanism for a server to correlate TLS connections together.</t>

<t>HTTP's feature set can also be used for identification and tracking in a number of ways. For example, Authentication request header fields explicitly identify profiles in use and HTTP cookies are designed as an explicit state-tracking mechanism and are often used as an authentication mechanism.</t>

<t>Additionally, the <spanx style="verb">User-Agent</spanx> and <spanx style="verb">Accept-Language</spanx> request header fields often convey specific information about the PayID client version or locale. This allows for content-negotiation and operational work-arounds for implementation bugs. Request header fields that control caching can expose state information about a subset of the client's history. Mixing PayID queries with other HTTP requests on the same connection also provides an opportunity for richer data correlation.</t>

<t>The PayID protocol design allows implementations to fully leverage the HTTP ecosystem, including features that are not enumerated in this document. Utilizing the full set of HTTP features enables PayID to be more than HTTP tunnel, but it is at the cost of opening up implementations to the full set of privacy considerations of HTTP.</t>

<t>Implementations of PayID clients and servers need to consider the benefits and privacy impacts of these features, and their deployment context, when deciding whether or not to enable them. Implementations are advised to expose the minimal set of data needed to achieve the desired feature set.</t>

<t>Determining whether or not PayID client implementation requires HTTP cookie <xref target="RFC6265"></xref> support is particularly important because HTTP cookies are the primary state tracking mechanism in HTTP, HTTP cookies SHOULD NOT be accepted by PayID clients unless they are explicitly required by a use case.</t>

<t>Overall, the PayID protocol does not introduce significant additional privacy concerns beyond those associated with using the underlying IP, TCP, TLS and HTTP layers.</t>

</section>
</section>
<section anchor="iana-considerations" title="IANA Considerations">
<t>This document defines registries for PayID protocol version and application/* +json media types.</t>

<section anchor="header-field-registration" title="Header Field Registration">
<t>Header field name: PayID-version: major.minor</t>

<t>Applicable Protocol: "PayID protocol"</t>

<t>Status: <spanx style="verb">standard</spanx></t>

<t>Author/Change controller: Refer to the contact details of the authors in this document.</t>

<t>Specification Document: <spanx style="verb">PayID protocol</spanx></t>

</section>
<section anchor="media-type-registration" title="Media Type Registration">
<t>This document registers multiple media types, listed in Table 1.</t>

<texttable>
      <ttcol align='left'>Type</ttcol>
      <ttcol align='left'>Subtype</ttcol>
      <ttcol align='left'>Specification</ttcol>
      <c>application</c>
      <c>xrpl-mainnet+json</c>
      <c>&#160;</c>
      <c>application</c>
      <c>xrpl-testnet+json</c>
      <c>&#160;</c>
      <c>application</c>
      <c>xrpl-devnet+json</c>
      <c>&#160;</c>
      <c>application</c>
      <c>ach+json</c>
      <c>&#160;</c>
      <c>application</c>
      <c>interledger-mainnet+json</c>
      <c>&#160;</c>
      <c>application</c>
      <c>interledger-testnet+json</c>
      <c>&#160;</c>
      <c>application</c>
      <c>payid+json</c>
      <c>&#160;</c>
</texttable>

<t>Type Name: application</t>

<t>Subtype name: This document registers multiple subtypes as listed in table 1</t>

<t>Required parameters: n/a</t>

<t>Optional parameters: n/a</t>

<t>Encoding considerations:  Encoding considerations are identical to those specified for the "application/json" media type. See[RFC7159][].</t>

<t>Security considerations: Security considerations relating to the generation and consumption of PayID protocol messages are discussed in Section X.</t>

<t>Interoperability considerations:  This document specifies the format of conforming messages and the interpretation thereof.</t>

<t>Published specification: This document is the specification for these media types; see Table 1 for the section documenting each media type.</t>

<t>Applications that use this media type:  PayID servers and PayID clients.</t>

<t>Additional information:</t>

<t>Magic number(s):  n/a</t>

<t>File extension(s):  This document uses the mime type to refer to protocol messages and thus does not require a file extension.</t>

<t>Macintosh file type code(s):  n/a</t>

<t>Person &amp; email address to contact for further information:  See Authors' Addresses section.</t>

<t>Intended usage:  COMMON</t>

<t>Restrictions on usage:  n/a</t>

<t>Author:  See Authors' Addresses section.</t>

<t>Change controller:  Internet Engineering Task Force (mailto:iesg@ietf.org).</t>

</section>
</section>
<section anchor="acknowledgments" title="Acknowledgments">

</section>


  </middle>

  <back>

    <references title='Normative References'>

&RFC2119;
&RFC2818;
&RFC8446;
&RFC7258;
&RFC7231;
&RFC7413;
&RFC6265;
<reference anchor="PAYID-URI" target="https://tbd.example.com/">
  <front>
    <title>The 'payid' URI Scheme</title>
    <author initials="D." surname="Fuelling" fullname="David Fuelling">
      <organization></organization>
    </author>
    <date year="n.d."/>
  </front>
</reference>
<reference anchor="PAYID-DISCOVERY" >
  <front>
    <title>PayID Discovery</title>
    <author initials="D." surname="Fuelling" fullname="David Fuelling">
      <organization></organization>
    </author>
    <date year="n.d."/>
  </front>
</reference>


    </references>

    <references title='Informative References'>

&RFC4732;


    </references>



  </back>

<!-- ##markdown-source:
H4sIALlaBF8AA+196XIb15Xwfz7FLWpqJDkAJGqLgkymQpNSRJsSFZGK7VG5
Bg3gAmir0Rfu200KiV01rzGvN08yZ7tbd4OkbKe+78ewyjLZy13OPfvWw+Fw
b2bmebkcq6ZeDJ/v7dV5XeixepttT47V28rUZmaKvbmZldkars+rbFEPs6yc
rbJiuMm2+Xy4kaeGDw/2Zlmtl6bajpWt53t7m3ysPsDNgbKmqiu9sPDbds2/
zMx6rcvafr9n11lV/+ePjam1HSuzWOztZZXOYBA9a6q83u5lTb0y1XhvT6kh
/KdUXsKThyP1OitWpq4yushrPOTVpbdMBXt8l282haa/LaxG12P1+OCpem3K
emnWutqqc7pMT8xg3rE6z0r1soIRczszdL3Sy9yUY3V0yI+ZOcz5hycHD5/I
301ZIwDen9Pfm5Up4YFh+4du6nWWF2OVrWWpf65ohSMADd2HzY/Vqq43dvzg
wdXV1Si6n4LieKTOZ6srgOPfI1AcZ5f5PL3x/zUg5rjezwJCaap1VueXekzP
vnt59Ojg4A/hj+cHz/0fz588eeb/+P2jp8+jPx4fhD+eHDz2fzx79Owp//H2
8LuT4+H7dyf8p1JCKvsXK63uEincVXAbwa3Xet89lVVLhK/bQD2dj/SnbC07
eCCPOQRX8uMO9WWjiwII1N9YNEURH27yAK/x+OT86OxvL959114pU/UxnuAl
HPL+bzb3Xl4uOgfx5PePHwHFwhGrEij7P19qPZ9ms497exer3Cq70bN8kQPH
ACxScCFj7qKAn2yMzYqByso53tgA8gJXUDUA+kOLM31/zwGWTmAE6P3gvroy
1UdYv0wImFoAX5qr2sAYnantyjTFfE9NNfCbssan/q1azOyf/Yj/PuJtZFOg
lmxW921grhd5qS0tktfo+KKCF0uVAc7Ks8Mi2+rK3x+oq1U+W6kZPAVraCyv
NC9rjZOpq7xeAXBo0KEus2kBD1hdXeYzjYPASehqpBANN1UOrHSLY8Bw8A8s
E4aay4kDJLfIclU2I+pU/thgA1lhyiVPZjZ4BVjoWtfZPKszBVOUNWwWZp5u
3WLkMJAmvv/wvVuBbBpmnma4FRj61cXFWwWQK+0CFgEn2QLQWlubLQF4tMiM
2b7mNzYgOEaAUHwC63w+B8a1d0dd6Gqdl6Ywyy0gHB2IH08gCWJGVxVDM+OT
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

-->

</rfc>

