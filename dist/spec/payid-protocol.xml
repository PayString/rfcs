<?xml version="1.0" encoding="utf-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.3.8 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!ENTITY RFC2119 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC2818 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2818.xml">
<!ENTITY RFC8446 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8446.xml">
<!ENTITY RFC7258 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7258.xml">
<!ENTITY RFC7231 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7231.xml">
<!ENTITY RFC7413 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7413.xml">
<!ENTITY RFC6265 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6265.xml">
<!ENTITY RFC4732 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.4732.xml">
]>

<?rfc toc="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>
<?rfc comments="yes"?>

<rfc docName="draft-aanchal-payid-protocol-01" category="std">

  <front>
    <title>PayID Protocol</title>

    <author initials="A." surname="Malhotra" fullname="Aanchal Malhotra">
      <organization>Ripple</organization>
      <address>
        <postal>
          <street>315 Montgomery Street</street>
          <city>San Francisco</city>
          <region>CA</region>
          <code>94104</code>
          <country>US</country>
        </postal>
        <phone>-----------------</phone>
        <email>amalhotra@ripple.com</email>
        <uri>https://www.ripple.com</uri>
      </address>
    </author>
    <author initials="D." surname="Schwartz" fullname="David Schwartz">
      <organization>Ripple</organization>
      <address>
        <postal>
          <street>315 Montgomery Street</street>
          <city>San Francisco</city>
          <region>CA</region>
          <code>94104</code>
          <country>US</country>
        </postal>
        <phone>-----------------</phone>
        <email>david@ripple.com</email>
        <uri>https://www.ripple.com</uri>
      </address>
    </author>

    <date year="2020" month="June" day="23"/>

    <area>security</area>
    
    

    <abstract>


<t>This specification defines the PayID protocol - an application-layer protocol, which can be used to interact with a PayID-enabled service provider. The primary use-case is to discover payment account information along with optional metadata identified by a PayID <xref target="PAYID-URI"></xref>. The protocol is based on HTTP transfer of PayID protocol messages over a secure transport.</t>



    </abstract>


    <note title="Feedback">


<t>This specification is a draft proposal, and is part of the <eref target="https://payid.org/">PayID Protocol
</eref> work. Feedback related to this specification should
 be sent to <eref target="mailto:rfcs@payid.org">rfcs@payid.org</eref>.</t>


    </note>


  </front>

  <middle>


<section anchor="terminology" title="Terminology">
<t>This protocol can be referred to as <spanx style="verb">Basic PayID Protocol</spanx> or <spanx style="verb">PayID Protocol</spanx>. The following terminology is used by this specification.</t>

<t><list style="symbols">
  <t>Endpoint: either the client or the server of the connection.
  <list style="symbols">
      <t>Sending Endpoint: sending side of the transaction (wallet or exchange).</t>
      <t>Receiving Endpoint: receiving side of the transaction (wallet or exchange).</t>
    </list></t>
  <t>PayID client: The endpoint that initiates PayID protocol.</t>
  <t>PayID owner: The owner of the PayID URI as described in <xref target="PAYID-URI"></xref>.</t>
  <t>PayID server: The endpoint that returns payment account information.</t>
</list></t>

<t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in <xref target="RFC2119"></xref>.</t>

</section>
<section anchor="introduction" title="Introduction">
<t><xref target="PAYID-URI"></xref> describes a URI scheme to identify payment account(s) at a service provider. <xref target="PAYID-DISCOVERY"></xref>, on the other hand, defines how to transform a PayID URI into a PayID URL that can be used by other protocols to interact with a PayID-enabled service provider but does not define the protocol(s) to do so.</t>

<t>This document specifies the PayID protocol - an application-layer protocol which can be used to interact with a PayID-enabled service provider identified by a PayID URL using standard HTTP methods over a secure transport. In its most basic mode, a PayID protocol resource returns a JavaScript Object Notation (JSON) object representing the payment account(s) information along with optional metadata corresponding to the queried PayID URI <xref target="PAYID-URI"></xref>. The protocol defines new media formatting types for requests and responses but uses normal HTTP content negotiation mechanisms for selecting alternatives that the PayID client and server may prefer in anticipation of serving different use cases.</t>

<section anchor="design-goals" title="Design Goals">

<t><list style="symbols">
  <t>Extensibility</t>
</list></t>

<t>Although the primary use-case for the payment account(s) information resource returned via Basic PayID protocol is assumed to be for making payments, the PayID protocol is designed to be easily extensible to facilitate creation and retrieval of other resources about the PayID owner, PayID client and/or PayID server that might be required for making payments.</t>

<t><list style="symbols">
  <t>Neutrality: Currency and Network Agnostic</t>
</list></t>

<t>PayID protocol is designed to be a fundamentally neutral protocol. PayID protocol is capable of returning a PayID owner's payment account(s) information for any network that they (or their service) can support. This makes PayID protocol a network and currency agnostic protocol, capable of enabling payments in BTC, XRP, ERC-20 tokens, Lightning, ILP, or even fiat networks like ACH.</t>

<t><list style="symbols">
  <t>Decentralized &amp; Peer-to-Peer</t>
</list></t>

<t>Just like email servers, anyone can run their own PayID server or use third-party hosted services. If self-hosted, PayID protocol introduces no new counterparty risk or changes to a service’s security or privacy model. PayID protocol doesn’t require new, complex, and potentially unreliable peer discovery protocols, instead establishing direct peer-to-peer connections between communicating parties from the start.
   PayID is built on the most successful decentralized network: the web. There is no designated centralized authority, or a risk of a patchwork of different standards in different jurisdictions that make a global solution impossibly complex.</t>

<t><list style="symbols">
  <t>Service Sovereignty</t>
</list></t>

<t>Each service provider that uses PayID for their users maintains full control of its PayID URL space, PayID service and has the ability to incorporate any policy they choose, including privacy, authentication, and security.  They also have full sovereignty over users on their domain, just like in email. PayID is highly generalized and does not prescribe any particular solution outside of the standardized communication, which makes it compatible with existing compliance and user management tools and philosophies.</t>

</section>
</section>
<section anchor="payid-server-discovery" title="PayID Server Discovery">
<t>To support PayID protocol, the PayID client needs to discover the PayID URL corresponding to the PayID URI <xref target="PAYID-URI"></xref>. This can be obtained either using mechanisms described in <xref target="PAYID-DISCOVERY"></xref> or could be entered manually.</t>

</section>
<section anchor="json-format-design" title="JSON Format Design">
<t>JSON as described in [RFC8259][], defines a test format for serializing structured data. Objects are serialized as an unordered collection of name/value pairs. JSON does not define any semantics around the name/value pairs that make up an object. PayID protocol's JSON format defines name/value pairs that annotate a JSON object, property or array for PayID protocol resources.</t>

<t>The PayID client MUST request PayID response in JSON format through the <spanx style="verb">Accept</spanx> header with the media type as defined below, optionally followed by format parameters. One of the optional parameters is the case insensitive <spanx style="verb">q</spanx> value as described in Section 5.3.1 of <xref target="RFC7231"></xref> to indicate relative preference.</t>

<t>Each message body is represented as a single JSON object. This object contains name/value pair whose value is the correct representation for a primitive value as described in [RFC8259][], or an array or object as described in the section below.</t>

<t>If the PayID server does not support JSON format, it MUST reply with an appropriate error response.</t>

<section anchor="http-method" title="HTTP Method">
<t>The PayID protocol payment account(s) information resource is requested using the HTTP GET method.</t>

<t>Following are the media types to request the payment account(s) information resource on different payment-networks and environments.</t>

</section>
<section anchor="media-type-of-payment-accounts-information-resource" title="Media Type of Payment Account(s) Information Resource">
<t>The media type for payment account information resource is <spanx style="verb">application/* + json</spanx>.</t>

</section>
<section anchor="response-for-application-json" title="Response for application/* + json">
<t>The response body for <spanx style="verb">application/* + json</spanx> is a JSON object with the following name/value pairs.</t>

<figure><artwork><![CDATA[
  {  
   optional string payId,
   required Address[] addresses, 
   optional string memo,
   optional string identity,
   optional ProofOfControlSignature proofOfControlSignature
  }
]]></artwork></figure>

<section anchor="payid" title="payId">
<t>The value of <spanx style="verb">payId</spanx> field is the PayID URI in the client request that identifies the payment account information that the JSON object describes.</t>

<t>The <spanx style="verb">payId</spanx> field is an optional field in the response.</t>

</section>
<section anchor="addresses" title="addresses">
<t>The value of <spanx style="verb">addresses</spanx> field is a JSON array of type <spanx style="verb">Address</spanx> of one or more JSON objects with the following name/value pairs.</t>

<figure><artwork><![CDATA[
  { 
   required string paymentNetwork,
   optional string environment, 
   required string addressDetailsType,
   required addressDetailsType addressDetails
  }
]]></artwork></figure>

<t><list style="symbols">
  <t>paymentNetwork: The value of payment-network as specified in the client request's <spanx style="verb">Accept</spanx> header</t>
  <t>environment: The value of environment as specified in the client request's <spanx style="verb">Accept</spanx> header</t>
  <t>addressDetailsType: The value of <spanx style="verb">addressDetailsType</spanx> is one of the following strings.
  <list style="symbols">
      <t>CryptoAddressDetails</t>
      <t>ACHAddressDetails</t>
    </list></t>
  <t>addressDetails: The value of <spanx style="verb">addressDetails</spanx> is the address information necessary to send payment on a specific payment-network and environment.</t>
</list></t>

<t>The <spanx style="verb">addresses</spanx> field MUST be present in the response.</t>

<section anchor="addressdetails" title="addressDetails">
<t>We define the following two types of payment address types.</t>

<t><list style="symbols">
  <t>CryptoAddressDetails: This is a JSON object with the following name/value pairs.  <vspace blankLines='1'/>
{
  required string address,
  optional string tag
}  <list style="symbols">
      <t>address: The value of <spanx style="verb">address</spanx> field contains the on-ledger address corresponding ot this owner.</t>
      <t>tag: The value of <spanx style="verb">tag</spanx> field is the tag value used by some cryptocurrencies to distinguish accounts contained within a singular address. E.g XRP Ledger's destination tag.</t>
    </list></t>
  <t>ACHAddressDetails: This is a JSON object with the following name/value pairs.  <vspace blankLines='1'/>
{
  required string accountNumber,
  required string routingNumber
}  <list style="symbols">
      <t>accountNumber: The value of <spanx style="verb">accountNumber</spanx> is the ACH account number.</t>
      <t>routingNumber: The value of <spanx style="verb">routingNumber</spanx> is the ACH routing number.</t>
    </list></t>
</list></t>

</section>
</section>
<section anchor="memo" title="memo">
<t>The <spanx style="verb">memo</spanx> string may specify additional metadata corresponding to a payment.</t>

<t>The <spanx style="verb">memo</spanx> string is an OPTIONAL field in the response.</t>

</section>
<section anchor="identity" title="identity">
<t>The <spanx style="verb">identity</spanx> string may specify any additional identity information about the PayID owner or PayID server.</t>

<t>The <spanx style="verb">identity</spanx> string is an OPTIONAL field in the response.</t>

</section>
<section anchor="proofofcontrolsignature" title="proofOfControlSignature">
<t>The value of <spanx style="verb">proofOfControlSignature</spanx> field is a JSON object of type <spanx style="verb">ProofOfControlSignature</spanx> with the following name/value pairs.</t>

<figure><artwork><![CDATA[
  {
   required string publicKey,
   required string payID, 
   required string hashAlgorithm,
   required string signature
  }
]]></artwork></figure>

<t><list style="symbols">
  <t>publicKey: On-ledger public key of the Receiving Endpoint</t>
  <t>payID: PayID URI of the PayID owner</t>
  <t>hashAlgorithm: Hash algorithms used to hash the entire contents of the <spanx style="verb">ProofOfControlSignature</spanx> message.</t>
  <t>signature: Digital signature over the hash of the entire contents of the <spanx style="verb">ProofOfControlSignature</spanx> message using the private key corresponding to the public key in <spanx style="verb">publicKey</spanx>. This is a proof that the Receiving Endpoint is the owner of the on-ledger public key in <spanx style="verb">publicKey</spanx>.</t>
</list></t>

<t>The <spanx style="verb">proofOfControlSignature</spanx> is an OPTIONAL field in the response.</t>

</section>
</section>
<section anchor="meaning-of-media-type-application-json" title="Meaning of Media Type application/* + json">
<t><spanx style="verb">*</spanx> may represent different payment-networks and environments. In this document, we propose standards with the media types specific to XRP, ILP, and ACH payment networks. We also propose media type that returns all addresses across all payment networks. Other payment networks MUST establish standard media types for their networks at IANA.</t>

<t><list style="symbols">
  <t>Accept: application/payid-json
  Returns all payment account(s) information correspnding to the requested PayID URI</t>
  <t>Accept: application/xrpl-mainnet+json</t>
</list></t>

<t>Returns XRPL mainnet XAddresses</t>

<t><list style="symbols">
  <t>Accept: application/xrpl-testnet+json</t>
</list></t>

<t>Returns XRPL testnet XAddresses</t>

<t><list style="symbols">
  <t>Accept: application/xrpl-devnet+json</t>
</list></t>

<t>Returns XRPL devnet XAddresses</t>

<t><list style="symbols">
  <t>Accept: application/interledger-testnet+json</t>
</list></t>

<t>Returns mainnet payment pointer to initiate SPSP request</t>

<t><list style="symbols">
  <t>Accept: application/interledger-devnet+json</t>
</list></t>

<t>Returns testnet payment pointer to initiate SPSP request</t>

<t><list style="symbols">
  <t>Accept: application/ach+json</t>
</list></t>

<t>Returns account and routing number</t>

<t>The PayID client MAY specify more than one media types along with the preference parameter. The server MUST respond as described in the Content Negotiation section below.</t>

</section>
</section>
<section anchor="header-fields" title="Header Fields">
<t>PayID protocol defines semantics around the following request and response headers. Additional headers MAY be defined, but have no unique semantics defined in the PayID protocol.</t>

<section anchor="common-headers" title="Common Headers">
<t>The following headers are common between PayID requests and responses.</t>

<section anchor="header-content-type" title="Header Content-Type">
<t>PayID requests and responses with a JSON message body MUST have a <spanx style="verb">Content-Type</spanx> header value of <spanx style="verb">application-json</spanx>.</t>

</section>
<section anchor="header-content-length" title="Header Content-Length">
<t>As defined in [RFC7230][], a request or response SHOULD include a <spanx style="verb">Content-Length</spanx> header when the message's length can be determined prior to being transferred. PayID protocol does not add any additional requirements over HTTP for writing Content-Length.</t>

</section>
<section anchor="header-payid-version-todo" title="Header PayID-version (TODO)">
<t>The PayID client MUST include the PayID version request header field to specify the version of the PayID protocol used to generate the request.</t>

<t>If present on a request, the PayID server MUST interpret the request according to the rules defined in the specified version of the PayID protocol or fail the request with an appropriate error response code.</t>

<t>If not specified in a request, the PayID server MUST fail the request with an appropriate error code.</t>

</section>
</section>
<section anchor="request-headers" title="Request Headers">
<t>In addition to common Headers, the PayID client MUST specify the following request header.</t>

<section anchor="header-accept" title="Header Accept">
<t>The PayID client MUST specify the <spanx style="verb">Accept</spanx> request header field with at least one of the registered media types (Section X). The purpose of this header is to indicate what type of content can be understood in the response. It specifies the <spanx style="verb">payment-network</spanx> and <spanx style="verb">environment</spanx> of the payment account and its representation format for which the PayID client wants to receive information. The representation format is always JSON.</t>

<t>PayID server MUST reject formats that specify unknown or unsupported format parameters.</t>

</section>
</section>
<section anchor="response-headers" title="Response Headers">
<t>In addition to the Common Headers, the PayID server MUST specify the following response header.</t>

<section anchor="header-cache-control" title="Header Cache-Control">
<t>PayID server MUST include the <spanx style="verb">Cache-Control</spanx> header with the max-age limit of 0. The intermediate hops or PayID client MUST NOT cache the responses.</t>

</section>
</section>
</section>
<section anchor="extensibility" title="Extensibility">

<section anchor="payload-extensibility" title="Payload Extensibility">
<t>PayID protocol supports extensibility in the payload, according to the specific format.</t>

<t>Regardless of the format, additional content MUST NOT be present if it needs to be understood by the receiver in order to correctly interpret the payload according to the specified PayID-Version header. Thus, clients MUST be prepared to handle or safely ignore any content not specifically defined in the version of the payload specified by the PayID-version header.</t>

</section>
<section anchor="header-field-extensibility" title="Header Field Extensibility">
<t>PayID protocol defines semantics around certain HTTP request and response headers. Services that support a version of PayID protocol conform to the processing requirements for the headers defined by this specification for that version.</t>

<t>Individual services MAY define custom headers. These headers MUST NOT begin with PayID. Custom headers SHOULD be optional when making requests to the service. A service MUST NOT require the PayID client to understand custom headers to accurately interpret the response.</t>

</section>
<section anchor="format-extensibility" title="Format Extensibility">
<t>A PayID service MUST support JSON format as described above and MAY support additional formats response bodies.</t>

</section>
</section>
<section anchor="basic-payid-protocol" title="Basic PayID Protocol">
<t>Basic PayID protocol is used to request payment account(s) information resource identified by a PayID URI from a PayID-enabled service provider identified by a PayID URL using HTTP over secure transport. When successful, PayID protocol always returns the JSON representation of payment account(s) information resource along with optional metadata. This information can be used for any purposes outside the scope of this document, though it is expected the most common application would be making payment.</t>

<t>Basic PayID protocol comprises request and response messages, each of which is defined in more detail below. The following is a visual representation of the basic protocol flow:</t>

<figure><artwork><![CDATA[
PayID client                                         PayID server
   |                                                          |
   |              1.) GET request to PayID URL                |
   |--------------------------------------------------------->|
   |                                                          | |                                                          |
   |              2.) 200 Ok                                  |
   |                  Payment account information response    |
   |<---------------------------------------------------------|
   |                                                          |
   |                                                          | 
]]></artwork></figure>

<section anchor="step-1-http-request-to-payid-url-using-http-get-method" title="Step 1: HTTP Request to PayID URL using HTTP GET Method">
<t>A basic PayID client issues a query using the HTTP GET method to the PayID URL without any query parameters and body.</t>

<t>The PayID client MUST query the PayID server using HTTPS only. <xref target="RFC2818"></xref> defines how HTTPS verifies the PayID server's identity. If the HTTPS connection cannot be established for any reason, then the PayID client MUST accept that the PayID request has failed and MUST NOT attempt to reissue the PayID request using HTTP over a non-secure connection.</t>

</section>
<section anchor="step-2-payment-account-information-response" title="Step 2: Payment Account Information Response">
<t>In response, the PayID server returns a JSON object representation of the payment account(s) information resource for the payment-network and environment requested by PayID client in the request <spanx style="verb">Accept</spanx> header field along with other required and/or optional metadata.</t>

<t>PayID servers MUST be able to process <spanx style="verb">application/payid+json</spanx> header type.</t>

<t>If the PayID server does not contain the payment account information corresponding to the request, the PayID server MUST respond with an appropriate error message.</t>

<t>A PayID server MAY redirect the PayID client; if it does, the redirection MUST only be to an <spanx style="verb">https</spanx> URI and the PayID client MUST perform certificate validation again when redirected.</t>

</section>
<section anchor="step-3-parse-payment-account-information-response" title="Step 3: Parse Payment Account Information Response">
<t>If the PayID server returns a valid response, the response will contain one or more of the fields defined above.</t>

</section>
</section>
<section anchor="example-use-of-basic-payid-protocol" title="Example Use of Basic PayID Protocol">
<t>This section shows sample use of Basic PayID protocol in several hypothetical scenarios.</t>

<section anchor="basic-payid-protocol-by-a-wallet" title="Basic PayID Protocol by a Wallet">
<t>Suppose Alice wishes to send a friend some XRP from a web-based wallet provider that Alice has an account on. Alice would log-in to the wallet provider and enter Bob's PayID (say, <spanx style="verb">bob$receiver.example.com</spanx>) into the wallet UI to start the payment. 
   The Wallet application would first discover the PayID URL for the PayID service-provider using one of the mechanisms described in PayID discovery <xref target="PAYID-DISCOVERY"></xref> protocol.</t>

<t>The Wallet application would then issue an HTTPS GET request:</t>

<figure><artwork><![CDATA[
 GET /users/bob HTTP/1.1
 Host: www.receiver.example.com
 Accept: application/payid+json
 PayID-version: 1.0
]]></artwork></figure>

<t>The PayID server might respond like this:</t>

<figure><artwork><![CDATA[
 HTTP/1.1 200 OK
 Content-Type: application/json
 Content-Length: 403
 PayID-version: 1.0
 Cache-Control: max-age=0
 Server: Apache/1.3.11
 {
   "payId" : "bob$receiver.example.com",
   "addresses" :
   [
     {  
       "paymentNetwork" : "xrpl",
       "environment" : "testnet",
       "addressDetailsType" : "CryptoAddressDetails",
       "addressDetails" : {
                    "address" : "XTVQWr6BhgBLW2jbFyqqufgq8T9eN7KresB684ZSHKQ3oDth"
            }
      },
     {
       "paymentNetwork" : "ach",
       "environment" : "mainnet",
       "addressDetailsType" : "ACHAddressDetails",
       "addressDetails" : {
                    "accountNumber" : "5674536253",
                    "routingNumber" : "aYJTDFGLKAJD"
            }
      }
    ],
    "memo" : "Additional optional Information"
 }
]]></artwork></figure>

<t>In the above example we see that the PayID server returned a list of payment accounts identified by PayID <spanx style="verb">bob$receiver.example.com</spanx>. This is because Alice's Wallet asked for all the payment accounts corresponding to the PayID in the <spanx style="verb">Accept</spanx> header. 
  Alice's Wallet MAY then use the payment account information to make payments.</t>

<t>Another example:</t>

<figure><artwork><![CDATA[
 GET /users/bob HTTP/1.1
 Host: www.receiver.example.com
 Accept: application/xrpl-testnet+json; q=0.4,
         application/ach+json; q=0.1
 PayID-version= 1.0
]]></artwork></figure>

<t>The PayID server might respond like this:</t>

<figure><artwork><![CDATA[
 HTTP/1.1 200 OK
 Content-Type: application/json
 Content-Length: 403
 PayID-version: 1.0
 Cache-Control: max-age=0
 Server: Apache/1.3.11
 {
   "payId" : "bob$receiver.example.com",
   "addresses" :
   [
     {  
       "paymentNetwork" : "xrpl",
       "environment" : "testnet",
       "addressDetailsType" : "CryptoAddressDetails",
       "addressDetails" : {
                    "address" : "XTVQWr6BhgBLW2jbFyqqufgq8T9eN7KresB684ZSHKQ3oDth"
            }
      }
    ]
 }
]]></artwork></figure>

</section>
</section>
<section anchor="common-response-status-codes-todo" title="Common Response Status Codes (TODO)">
<t>A PayID server MAY respond to request using any valid HTTP response code appropriate for the request. The PayID server SHOULD be as specific as possible in its choice of an HTTP specific status code.</t>

<section anchor="success-responses" title="Success Responses">
<t>The following response codes represent successful requests.</t>

<section anchor="response-code-200-ok" title="Response Code 200 OK">
<t>A request that does not create a resource returns 200 OK if it is completed successfully and the value of the resource is not null. null. In this case, the response body MUST contain the value of the resource specified in the request URL.</t>

</section>
<section anchor="response-code-3xx-redirection" title="Response Code 3xx Redirection">
<t>As per <xref target="RFC7231"></xref>, a 3xx Redirection indicates that further action needs to be taken by the client in order to fulfill the request. In this case, the response SHOULD include a Location header, as appropriate, with the URL from which the result can be obtained; it MAY include a Retry-After header.</t>

</section>
</section>
<section anchor="client-error-responses" title="Client Error Responses">
<t>Error codes in the 4xx range indicate a client error, such as a malformed request. 
  In the case that a response body is defined for the error code, the body of the error is as defined for the appropriate format.</t>

</section>
</section>
<section anchor="content-negotiation" title="Content Negotiation">

<t>The PayID client MAY choose to query for all possible payment addresses corresponding to a PayID URI</t>

<figure><artwork><![CDATA[
 GET / HTTP/1.1
 Accept: application/all+json                 
]]></artwork></figure>

<t>In this case, the PayID server MAY respond with all payment account(s) information associated with the queried PayID.</t>

<t>Alternatively, the PayID client MAY choose to query for a subset payment account(s) information in the order of preference.</t>

<figure><artwork><![CDATA[
 GET / HTTP/1.1
 Accept: application/xrpl-testnet+json; q=0.4,
         application/xrpl-mainnet+json; q= 0.1
]]></artwork></figure>

<t>In this case, the PayID server MUST respond with the payment account(s) information corresponding to at least one of the payment-networks and environments mentioned in the <spanx style="verb">Accept</spanx> header in the order of client request preference. If none of those exist, PayID server MUST send an appropriate error response.</t>

<t>Alternatively, the PayID client MAY combine the above two approaches.</t>

<figure><artwork><![CDATA[
 GET / HTTP/1.1
 Accept: application/xrpl-testnet+json; q=0.4,
         application/xrpl-mainnet+json; q= 0.1,
         application/payid+json
]]></artwork></figure>

<t>In this case, the PayID server MUST respond with the payment account information corresponding to at least one of the payment-network and environment mentioned in the <spanx style="verb">Accept</spanx> header in the order of PayID client's preference. If none of those exist, then the PayID server MUST respond with payment account(s) information corresponding to all payment accounts associated with the queried PayID URI.</t>

</section>
<section anchor="versioningtodo" title="Versioning(TODO)">

<t>Versioning enables clients and servers to evolve independently. PayID protocol defines semantics for protocol versioning.</t>

<t>PayID requests and responses are versioned according to the PayID-version header.
 PayID clients include the PayID-version header in order to specify the maximum acceptable response version. PayID servers respond with the maximum supported version that is less than or equal to the requested <spanx style="verb">major</spanx></t>

</section>
<section anchor="security-considerations" title="Security Considerations">
<t>This security considerations section only considers PayID clients and servers bound to implementations as defined in this document. Such implementations have the following characteristics:</t>

<t><list style="symbols">
  <t>PayID URIs are static and well-known to the PayID client; PayID server URLs can be static or discovered.</t>
</list></t>

<t>The following is considered out-of-scope:</t>

<t><list style="symbols">
  <t>Communication between the PayID owner and the wallet or exchange (which acts as PayID server) for PayID URI registration, etc.</t>
  <t>Communication between the sender of the transaction and PayID client to transfer information such as PayID URI and other transaction details, etc.</t>
  <t>PayID server URL discovery by PayID client. Implementations using PayID-Discovery <xref target="PAYID-DISCOVERY"></xref> MUST consider the security considerations in the corresponding document.</t>
  <t>PayID server URL resolution by PayID client. Implementations using DNS, DNSSEC, DoH, DoT, etc. MUST consider the security considerations of the corresponding documents.</t>
</list></t>

<section anchor="network-attacks" title="Network Attacks">
<t>Basic PayID protocol's security model assumes the following network attackers:</t>

<t><list style="symbols">
  <t>Off-path attacker: An off-path attacker can be anywhere on the network. She can inject and spoof packets but can not observe, or tamper with the legitimate traffic between the PayID client and the server.</t>
  <t>On-path attacker: An on-path attacker can eavesdrop, inject, spoof and replay packets, but can not drop, delay or tamper with the legitimate traffic.</t>
  <t>In-path or Man-in-the-middle (MiTM) attacker: An MiTM is the most powerful network attacker. An MiTM has full access to the communication path between the PayID client and the server. She can observe, modify, delay and drop network packets.</t>
</list></t>

<t>Additionally we assume that the attacker has enough resources to mount an attack but can not break the security guarantees provided by the cryptographic primitives of the underlying secure transport.</t>

<t>The basic PayID protocol runs over HTTPS and thus relies on the security of the underlying transport. Implementations utilizing TLS 1.3 benefit from the TLS security profile defined in <xref target="RFC8446"></xref> against all the above network attackers.</t>

<section anchor="denial-of-service-dos-attacks" title="Denial-of-Service (DoS) attacks">
<t>As such, cryptography can not defend against DoS attacks because any attacker can stop/interrupt the PayID protocol by:
  * Dropping network packets, 
  * Exhaustion of resources either at the network level or at PayID client and/or server.</t>

<t>The PayID servers are recommended to follow general best network configuration practices to defend against such attacks <xref target="RFC4732"></xref>.</t>

</section>
</section>
<section anchor="information-integrity" title="Information Integrity">
<t>The HTTPS connection provides transport security for the interaction between PayID client and server but does not provide the response integrity of the data provided by PayID server. A PayID client has no way of knowing if data provided in the payment account information resource has been manipulated at the PayID server, either due to malicious behaviour on the part of PayID server administrator or as a result of being compromised by an attacker. As with any information service available on the Internet, PayID clients should be wary of the information received from untrusted sources.</t>

</section>
</section>
<section anchor="privacy-considerations" title="Privacy Considerations">
<t>The PayID client and server should be aware that placing information on the Internet means that any one can access that information. While PayID protocol is an extremely useful tool to discovering payment account(s) information corresponding to a human-rememberable PayID URI, PayID owners should also understand the associated privacy risks. The easy access to payment account information via PayID protocol was a design goal of the protocol, not a limitation.</t>

<section anchor="access-control" title="Access Control">
<t>PayID protocol MUST NOT be used to provide payment account(s) information corresponding to a PayID URI unless providing that data via PayID protocol by the relevant PayID server was explicitly authorized by the PayID owner. If PayID owner wishes to limit access to information, PayID servers MAY provide an interface by which PayID owners can select which information is exposed through the PayID server interface. For example, PayID servers MAY allow PayID owners to mark certain data as <spanx style="verb">public</spanx> and then utilize that marking as a means of determining what information to expose via PayID protocol. The PayID servers MAY also allow PayID owners to provide a whitelist of users who are authorized to access the specific information. In such a case, the PayID server MUST authenticate the PayID client.</t>

</section>
<section anchor="payment-address-rotation" title="Payment Address Rotation">
<t>The power of PayID protocol comes from providing a single place where others can find payment account(s) information corresponding to a PayID URI, but PayID owners should be aware of how easily payment account information that one might publish can be used in unintended ways. As one example, one might query a PayID server only to see if a given PayID URI is valid and if so, get the list of associated payment account information. If the PayID server uses the same payment address each time, it becomes easy for a third-party to track one's entire payment history. The PayID server MUST follow the best practice of payment address rotation for every query to mitigate this privacy concern.</t>

</section>
<section anchor="on-the-wire" title="On the Wire">
<t>PayID protocol over HTTPS encrypts the traffic and requires mutual authentication of the PayID client and the PayID server. This mitigates both passive surveillance <xref target="RFC7258"></xref> and the active attacks that attempt to divert PayID protocol queries to rogue servers.</t>

<t>Additionally, the use of the HTTPS default port 443 and the ability
  to mix PayID protocol traffic with other HTTPS traffic on the same connection can deter unprivileged on-path devices from interfering with PayID operations and make PayID traffic analysis more difficult.</t>

</section>
<section anchor="in-the-payid-server" title="In the PayID Server">
<t>The Basic PayID protocol data contains no information about the PayID client; however, various transports of PayID queries and responses do provide data that can be used to correlate requests. A Basic PayID protocol implementation is built on IP, TCP, TLS and HTTP. Each layer contains one or more common features that can be used to correlate queries to the same identity.</t>

<t>At the IP level, the PayID client address provides obvious correlation information. This can be mitigated by usee of NAT, proxy, VPN, or simple address rotation over time. It may be aggravated  by use of a PayID server that can correlate real-time addressing information with other identifiers, such as when PayID server and other services are operated by the same entity.</t>

<t>PayID client implementations that use one TCP connection for multiple PayID requests directly group those requests. Long-lived connections have better performance behaviours than short-lived connections; however they group more requests, which can expose more information to correlation and consolidation. TCP-based solutions may also seek performance through the use of TCP Fast Open <xref target="RFC7413"></xref>. The cookies used in TCP Fast open may allow PayID servers to correlate TLS connections together.</t>

<t>TCP-based implementations often achieve better handshake performance through the use of some form of session resumption mechanism, such as Section 2.2 of <xref target="RFC8446"></xref>. Session resumption creates a trivial mechanism for a server to correlate TLS connections together.</t>

<t>HTTP's feature set can also be used for identification and tracking in a number of ways. For example, Authentication request header fields explicitly identify profiles in use and HTTP cookies are designed as an explicit state-tracking mechanism and are often used as an authentication mechanism.</t>

<t>Additionally, the <spanx style="verb">User-Agent</spanx> and <spanx style="verb">Accept-Language</spanx> request header fields often convey specific information about the PayID client version or locale. This allows for content-negotiation and operational work-arounds for implementation bugs. Request header fields that control caching can expose state information about a subset of the client's history. Mixing PayID queries with other HTTP requests on the same connection also provides an opportunity for richer data correlation.</t>

<t>The PayID protocol design allows implementations to fully leverage the HTTP ecosystem, including features that are not enumerated in this document. Utilizing the full set of HTTP features enables PayID to be more than HTTP tunnel, but it is at the cost of opening up implementations to the full set of privacy considerations of HTTP.</t>

<t>Implementations of PayID clients and servers need to consider the benefits and privacy impacts of these features, and their deployment context, when deciding whether or not to enable them. Implementations are advised to expose the minimal set of data needed to achieve the desired feature set.</t>

<t>Determining whether or not PayID client implementation requires HTTP cookie <xref target="RFC6265"></xref> support is particularly important because HTTP cookies are the primary state tracking mechanism in HTTP, HTTP cookies SHOULD NOT be accepted by PayID clients unless they are explicitly required by a use case.</t>

<t>Overall, the PayID protocol does not introduce significant additional privacy concerns beyond those associated with using the underlying IP, TCP, TLS and HTTP layers.</t>

</section>
</section>
<section anchor="iana-considerations" title="IANA Considerations">
<t>This document defines registries for PayID protocol version and application/* +json media types.</t>

<section anchor="header-field-registration" title="Header Field Registration">
<t>Header field name: PayID-version: major.minor</t>

<t>Applicable Protocol: "PayID protocol"</t>

<t>Status: <spanx style="verb">standard</spanx></t>

<t>Author/Change controller: Refer to the contact details of the authors in this document.</t>

<t>Specification Document: <spanx style="verb">PayID protocol</spanx></t>

</section>
<section anchor="media-type-registration" title="Media Type Registration">
<t>This document registers multiple media types, listed in Table 1.</t>

<texttable>
      <ttcol align='left'>Type</ttcol>
      <ttcol align='left'>Subtype</ttcol>
      <ttcol align='left'>Specification</ttcol>
      <c>application</c>
      <c>xrpl-mainnet+json</c>
      <c>&#160;</c>
      <c>application</c>
      <c>xrpl-testnet+json</c>
      <c>&#160;</c>
      <c>application</c>
      <c>xrpl-devnet+json</c>
      <c>&#160;</c>
      <c>application</c>
      <c>ach+json</c>
      <c>&#160;</c>
      <c>application</c>
      <c>interledger-mainnet+json</c>
      <c>&#160;</c>
      <c>application</c>
      <c>interledger-testnet+json</c>
      <c>&#160;</c>
      <c>application</c>
      <c>payid+json</c>
      <c>&#160;</c>
</texttable>

<t>Type Name: application</t>

<t>Subtype name: This document registers multiple subtypes as listed in table 1</t>

<t>Required parameters: n/a</t>

<t>Optional parameters: n/a</t>

<t>Encoding considerations:  Encoding considerations are identical to those specified for the "application/json" media type. See[RFC7159][].</t>

<t>Security considerations: Security considerations relating to the generation and consumption of PayID protocol messages are discussed in Section X.</t>

<t>Interoperability considerations:  This document specifies format of conforming messages and the interpretation thereof.</t>

<t>Published specification: This document is the specification for these media types; see Table 1 for the section documenting each media type.</t>

<t>Applications that use this media type:  PayID servers and PayID clients.</t>

<t>Additional information:</t>

<t>Magic number(s):  n/a</t>

<t>File extension(s):  This document uses the mime type to refer to protocol messages and thus does not require a file extension.</t>

<t>Macintosh file type code(s):  n/a</t>

<t>Person &amp; email address to contact for further information:  See Authors' Addresses section.</t>

<t>Intended usage:  COMMON</t>

<t>Restrictions on usage:  n/a</t>

<t>Author:  See Authors' Addresses section.</t>

<t>Change controller:  Internet Engineering Task Force (mailto:iesg@ietf.org).</t>

</section>
</section>
<section anchor="acknowledgments" title="Acknowledgments">

</section>


  </middle>

  <back>

    <references title='Normative References'>

&RFC2119;
&RFC2818;
&RFC8446;
&RFC7258;
&RFC7231;
&RFC7413;
&RFC6265;
<reference anchor="PAYID-URI" target="https://tbd.example.com/">
  <front>
    <title>The 'payid' URI Scheme</title>
    <author initials="D." surname="Fuelling" fullname="David Fuelling">
      <organization></organization>
    </author>
    <date year="n.d."/>
  </front>
</reference>
<reference anchor="PAYID-DISCOVERY" >
  <front>
    <title>PayID Discovery</title>
    <author initials="D." surname="Fuelling" fullname="David Fuelling">
      <organization></organization>
    </author>
    <date year="n.d."/>
  </front>
</reference>


    </references>

    <references title='Informative References'>

&RFC4732;


    </references>



  </back>

<!-- ##markdown-source:
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
rzLR7gTfKfSXFdlaB8AQbuFuvGuDBQp51wGd6BuVkeESoI4b3pnGsm7QUKLN
ljBFEiPPHz9/hmaV7/Uin4Dnb5/lBEG4jA45H+TpsFX2QvIXSZmoe1iptB4a
NF+PX2cmJZGYYrco23lXIukrOGUiAkLpNdWY+u+rsq58RuWqDR2520YxfIiR
+j+T6CoaPW9adjSGDbaUyk/aWjt7K7Y3SIKCvbYDWw3cOwf79e7ICgqfN/ap
WZJikknz39a+POcn2dXstUzJt0lbvJ72UudJ+gpK/bTqHbuXj9vFLZTcNMJP
tZck+3hGcqDLisZqv7nEfXyQCyfGauKbGk/odXL1PTzitBsRHjnG0M/pG7sh
BA54TZ+VoYQWLynYUei6vJEmbDSXOpZbY/8her+4SfuDSS2INI/Etxt0UcNP
4DsgJ5UopwSTA1jKzzyu/PysLupplVyIPz83l/zzXrOHyw0dXdq3YM60Yvdn
1ckNjcvpfzZNPQ3P9j+atB1Wux/1FV3dXXceTXsaN9bcbn9y45uNHXQniZmv
nfXgqeMBvSH8T14jtJLTY+K4FTscP05pZBE5OD/xgPvrCTuLnU7GqnioiZ11
P1UX7r0oZnbOcciUiYx33iE+yvrzzKctkloWalZ8HHm/Xf62nyA52h+GTLOD
Z/KhexXzHNuL2XFDsXIVc0Ol72tqWHrbputu9/2iWMfP3Kx2rvlVvm+ldxxA
jLRbaYDYAdWuz8lLqzRuAop/sGzz04oPMHRp8z50Uxq7YOdB7bu+NHrctREm
a8Y1op+XlZeEtfyZnObCVMJJ+URRPyAlBfOHBcN5JVy65bsgnhmfHLcblrTz
Edte01SX5+LK13oJ5gpbfPfdAxhRsBWkTW58O0pb8L0mLIJvfo3eH+6uj7Vz
IgZ6Tt+n6gTJ7lvvabVoTDeSxc2wbYNb8V2aAatyGgt9CxsHgP67fCY6fL3I
BhmEsPf1VikAkAqMCDT3mQ8hmZDNG1CS4ic17gHeOTp7/frsDTMClPFiitsi
PCEL44HvNkuPOI3B+RfFErQK9hpfavcBDXLMDcL9VnYM6L/8a2aqxciWywf8
8Zs9jCljCgeyVsp13Nv7v06/tDPxjAAA

-->

</rfc>

