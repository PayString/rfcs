<?xml version="1.0" encoding="utf-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.3.10 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!ENTITY RFC2119 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC2818 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2818.xml">
<!ENTITY RFC8446 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8446.xml">
<!ENTITY RFC7258 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7258.xml">
<!ENTITY RFC7231 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7231.xml">
<!ENTITY RFC7413 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7413.xml">
<!ENTITY RFC6265 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6265.xml">
<!ENTITY RFC4732 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.4732.xml">
]>

<?rfc toc="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>
<?rfc comments="yes"?>

<rfc docName="draft-aanchal-payid-protocol-01" category="std">

  <front>
    <title>PayID Protocol</title>

    <author initials="A." surname="Malhotra" fullname="Aanchal Malhotra">
      <organization>Ripple</organization>
      <address>
        <postal>
          <street>315 Montgomery Street</street>
          <city>San Francisco</city>
          <region>CA</region>
          <code>94104</code>
          <country>US</country>
        </postal>
        <phone>-----------------</phone>
        <email>amalhotra@ripple.com</email>
        <uri>https://www.ripple.com</uri>
      </address>
    </author>
    <author initials="D." surname="Schwartz" fullname="David Schwartz">
      <organization>Ripple</organization>
      <address>
        <postal>
          <street>315 Montgomery Street</street>
          <city>San Francisco</city>
          <region>CA</region>
          <code>94104</code>
          <country>US</country>
        </postal>
        <phone>-----------------</phone>
        <email>david@ripple.com</email>
        <uri>https://www.ripple.com</uri>
      </address>
    </author>

    <date year="2020" month="August" day="06"/>

    <area>security</area>
    
    

    <abstract>


<t>This specification defines the PayID protocol - an application-layer protocol, which can be used to interact with a PayID-enabled service provider. The primary use case is to discover payment account information along with optional metadata identified by a PayID <xref target="PAYID-URI"></xref>. The protocol is based on HTTP transfer of PayID protocol messages over a secure transport.</t>



    </abstract>


    <note title="Feedback">


<t>This specification is a draft proposal, and is part of the <eref target="https://payid.org/">PayID Protocol
</eref> work. Feedback related to this specification should
 be sent to <eref target="mailto:rfcs@payid.org">rfcs@payid.org</eref>.</t>


    </note>


  </front>

  <middle>


<section anchor="terminology" title="Terminology">
<t>This protocol can be referred to as the <spanx style="verb">Basic PayID Protocol</spanx> or <spanx style="verb">PayID Protocol</spanx>. The following terminology is used by this specification.</t>

<t><list style="symbols">
  <t>Endpoint: either the client or the server of the connection.
  <list style="symbols">
      <t>Sending Endpoint: sending side of the transaction (wallet or exchange).</t>
      <t>Receiving Endpoint: receiving side of the transaction (wallet or exchange).</t>
    </list></t>
  <t>PayID client: The endpoint that initiates the PayID protocol.</t>
  <t>PayID owner: The owner of the PayID URI as described in <xref target="PAYID-URI"></xref>.</t>
  <t>PayID server: The endpoint that returns payment account information.</t>
</list></t>

<t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in <xref target="RFC2119"></xref>.</t>

</section>
<section anchor="introduction" title="Introduction">
<t><xref target="PAYID-URI"></xref> describes a URI scheme to identify payment account(s) at a service provider. <xref target="PAYID-DISCOVERY"></xref>, on the other hand, defines how to transform a PayID URI into a PayID URL that can be used by other protocols to interact with a PayID-enabled service provider but does not define the protocol(s) to do so.</t>

<t>This document specifies the PayID protocol - an application-layer protocol which can be used to interact with a PayID-enabled service provider identified by a PayID URL using standard HTTP methods over a secure transport. In its most basic mode, a PayID protocol resource returns a JavaScript Object Notation (JSON) object representing the payment account(s) information along with optional metadata corresponding to the queried PayID URI <xref target="PAYID-URI"></xref>. The protocol defines new media formatting types for requests and responses, but uses normal HTTP content negotiation mechanisms for selecting alternatives that the PayID client and server may prefer in anticipation of serving different use cases.</t>

<section anchor="design-goals" title="Design Goals">

<t><list style="symbols">
  <t>Extensibility</t>
</list></t>

<t>Although the primary use case for the payment account(s) information resource returned via the Basic PayID protocol is assumed to be for making payments, the PayID protocol is designed to be easily extensible to facilitate creation and retrieval of other resources about the PayID owner, PayID client and/or PayID server that might be required for making payments.</t>

<t><list style="symbols">
  <t>Neutrality: Currency and Network Agnostic</t>
</list></t>

<t>The PayID protocol is designed to be a fundamentally neutral protocol. The PayID protocol is capable of returning a PayID owner's payment account(s) information for any network that they (or their service) can support. This makes the PayID protocol a network and currency agnostic protocol, capable of enabling payments in BTC, XRP, ERC-20 tokens, Lightning, ILP, or even fiat networks like ACH.</t>

<t><list style="symbols">
  <t>Decentralized &amp; Peer-to-Peer</t>
</list></t>

<t>Just like email servers, anyone can run their own PayID server or use third-party hosted services. If self-hosted, the PayID protocol introduces no new counterparty risk or changes to a service’s security or privacy model. PayID protocol doesn’t require new, complex, and potentially unreliable peer discovery protocols, instead establishing direct peer-to-peer connections between communicating parties from the start.
   PayID is built on the most successful decentralized network: the web. There is no designated centralized authority, or a risk of a patchwork of different standards in different jurisdictions that make a global solution impossibly complex.</t>

<t><list style="symbols">
  <t>Service Sovereignty</t>
</list></t>

<t>Each service provider that uses PayID for their users maintains full control of its PayID URL space and PayID service, and has the ability to incorporate any policies they choose, including privacy, authentication, and security.  They also have full sovereignty over users on their domain, just like with email. PayID is highly generalized and does not prescribe any particular solution outside of the standardized communication, which makes it compatible with existing compliance and user management tools and philosophies.</t>

</section>
</section>
<section anchor="payid-server-discovery" title="PayID Server Discovery">
<t>To support PayID protocol, the PayID client needs to discover the PayID URL corresponding to the PayID URI <xref target="PAYID-URI"></xref>. This can be obtained either by using mechanisms described in <xref target="PAYID-DISCOVERY"></xref> or by manually entering the PayID URL.</t>

</section>
<section anchor="json-format-design" title="JSON Format Design">
<t>JSON, as described in [RFC8259][], defines a test format for serializing structured data. Objects are serialized as an unordered collection of name/value pairs. JSON does not define any semantics around the name/value pairs that make up an object. PayID protocol's JSON format defines name/value pairs that annotate a JSON object, property or array for PayID protocol resources.</t>

<t>The PayID client MUST request a PayID response in JSON format through the <spanx style="verb">Accept</spanx> header with the media type as defined below, optionally followed by format parameters. One of the optional parameters is the case-insensitive <spanx style="verb">q</spanx> value as described in Section 5.3.1 of <xref target="RFC7231"></xref> to indicate relative preference.</t>

<t>Each message body is represented as a single JSON object. This object contains a name/value pair whose value is the correct representation for a primitive value as described in [RFC8259][], or an array or object as described in the section below.</t>

<t>If the PayID server does not support JSON format, it MUST reply with an appropriate error response.</t>

<section anchor="http-method" title="HTTP Method">
<t>The PayID protocol payment account(s) information resource is requested using the HTTP GET method.</t>

<t>Following are the media types to request the payment account(s) information resource on different payment-networks and environments.</t>

</section>
<section anchor="media-type-of-the-payment-accounts-information-resource" title="Media Type of the Payment Account(s) Information Resource">
<t>The media type for the payment account information resource is <spanx style="verb">application/* + json</spanx>.</t>

</section>
<section anchor="response-for-application-json" title="Response for application/* + json">
<t>The response body for <spanx style="verb">application/* + json</spanx> is a JSON object with the following name/value pairs.</t>

<figure><artwork><![CDATA[
  {
   optional string payId,
   required Address[] addresses,
   optional string memo,
   optional string identity,
   optional ProofOfControlSignature proofOfControlSignature
  }
]]></artwork></figure>

<section anchor="payid" title="payId">
<t>The value of <spanx style="verb">payId</spanx> field is the PayID URI in the client request that identifies the payment account information that the JSON object describes.</t>

<t>The <spanx style="verb">payId</spanx> field is an optional field in the response.</t>

</section>
<section anchor="addresses" title="addresses">
<t>The value of <spanx style="verb">addresses</spanx> field is a JSON array of type <spanx style="verb">Address</spanx> of one or more JSON objects with the following name/value pairs.</t>

<figure><artwork><![CDATA[
  {
   required string paymentNetwork,
   optional string environment,
   required string addressDetailsType,
   required addressDetailsType addressDetails
  }
]]></artwork></figure>

<t><list style="symbols">
  <t>paymentNetwork: The value of payment-network as specified in the client request's <spanx style="verb">Accept</spanx> header</t>
  <t>environment: The value of environment as specified in the client request's <spanx style="verb">Accept</spanx> header</t>
  <t>addressDetailsType: The value of <spanx style="verb">addressDetailsType</spanx> is one of the following strings.
  <list style="symbols">
      <t>CryptoAddressDetails</t>
      <t>ACHAddressDetails</t>
    </list></t>
  <t>addressDetails: The value of <spanx style="verb">addressDetails</spanx> is the address information necessary to send payment on a specific payment-network and environment.</t>
</list></t>

<t>The <spanx style="verb">addresses</spanx> field MUST be present in the response.</t>

<section anchor="addressdetails" title="addressDetails">
<t>We define the following two types of payment address types.</t>

<t><list style="symbols">
  <t>CryptoAddressDetails: This is a JSON object with the following name/value pairs.  <vspace blankLines='1'/>
{
  required string address,
  optional string tag
}  <list style="symbols">
      <t>address: The value of <spanx style="verb">address</spanx> field contains the on-ledger address corresponding to this owner.</t>
      <t>tag: The value of <spanx style="verb">tag</spanx> field is the tag value used by some cryptocurrencies to distinguish accounts contained within a singular address. E.g XRP Ledger's destination tag.</t>
    </list></t>
  <t>ACHAddressDetails: This is a JSON object with the following name/value pairs.  <vspace blankLines='1'/>
{
  required string accountNumber,
  required string routingNumber
}  <list style="symbols">
      <t>accountNumber: The value of <spanx style="verb">accountNumber</spanx> is the ACH account number.</t>
      <t>routingNumber: The value of <spanx style="verb">routingNumber</spanx> is the ACH routing number.</t>
    </list></t>
</list></t>

</section>
</section>
<section anchor="memo" title="memo">
<t>The <spanx style="verb">memo</spanx> string may specify additional metadata corresponding to a payment.</t>

<t>The <spanx style="verb">memo</spanx> string is an OPTIONAL field in the response.</t>

</section>
<section anchor="identity" title="identity">
<t>The <spanx style="verb">identity</spanx> string may specify any additional identity information about the PayID owner or PayID server.</t>

<t>The <spanx style="verb">identity</spanx> string is an OPTIONAL field in the response.</t>

</section>
<section anchor="proofofcontrolsignature" title="proofOfControlSignature">
<t>The value of <spanx style="verb">proofOfControlSignature</spanx> field is a JSON object of type <spanx style="verb">ProofOfControlSignature</spanx> with the following name/value pairs.</t>

<figure><artwork><![CDATA[
  {
   required string publicKey,
   required string payID,
   required string hashAlgorithm,
   required string signature
  }
]]></artwork></figure>

<t><list style="symbols">
  <t>publicKey: On-ledger public key of the Receiving Endpoint</t>
  <t>payID: PayID URI of the PayID owner</t>
  <t>hashAlgorithm: Hash algorithms used to hash the entire contents of the <spanx style="verb">ProofOfControlSignature</spanx> message.</t>
  <t>signature: Digital signature over the hash of the entire contents of the <spanx style="verb">ProofOfControlSignature</spanx> message using the private key corresponding to the public key in <spanx style="verb">publicKey</spanx>. This is a proof that the Receiving Endpoint is the owner of the on-ledger public key in <spanx style="verb">publicKey</spanx>.</t>
</list></t>

<t>The <spanx style="verb">proofOfControlSignature</spanx> is an OPTIONAL field in the response.</t>

</section>
</section>
<section anchor="meaning-of-media-type-application-json" title="Meaning of Media Type application/* + json">
<t><spanx style="verb">*</spanx> may represent different payment-networks and environments. In this document, we propose standards with the media types specific to XRP, ILP, and ACH payment networks. We also propose media types that return all addresses across all payment networks. Other payment networks MUST establish standard media types for their networks at IANA.</t>

<t><list style="symbols">
  <t>Accept: application/payid-json
  Returns all payment account(s) information corresponding to the requested PayID URI</t>
  <t>Accept: application/xrpl-mainnet+json</t>
</list></t>

<t>Returns XRPL mainnet XAddresses</t>

<t><list style="symbols">
  <t>Accept: application/xrpl-testnet+json</t>
</list></t>

<t>Returns XRPL testnet XAddresses</t>

<t><list style="symbols">
  <t>Accept: application/xrpl-devnet+json</t>
</list></t>

<t>Returns XRPL devnet XAddresses</t>

<t><list style="symbols">
  <t>Accept: application/interledger-testnet+json</t>
</list></t>

<t>Returns mainnet payment pointer to initiate SPSP request</t>

<t><list style="symbols">
  <t>Accept: application/interledger-devnet+json</t>
</list></t>

<t>Returns testnet payment pointer to initiate SPSP request</t>

<t><list style="symbols">
  <t>Accept: application/ach+json</t>
</list></t>

<t>Returns account and routing number</t>

<t>The PayID client MAY specify more than one media type along with the preference parameter. The server MUST respond as described in the Content Negotiation section below.</t>

</section>
</section>
<section anchor="header-fields" title="Header Fields">
<t>PayID protocol defines semantics around the following request and response headers. Additional headers MAY be defined, but have no unique semantics defined in the PayID protocol.</t>

<section anchor="common-headers" title="Common Headers">
<t>The following headers are common between PayID requests and responses.</t>

<section anchor="header-content-type" title="Header Content-Type">
<t>PayID requests and responses with a JSON message body MUST have a <spanx style="verb">Content-Type</spanx> header value of <spanx style="verb">application-json</spanx>.</t>

</section>
<section anchor="header-content-length" title="Header Content-Length">
<t>As defined in [RFC7230][], a request or response SHOULD include a <spanx style="verb">Content-Length</spanx> header when the message's length can be determined prior to being transferred. PayID protocol does not add any additional requirements over HTTP for writing Content-Length.</t>

</section>
<section anchor="header-payid-version-todo" title="Header PayID-version (TODO)">
<t>The PayID client MUST include the PayID version request header field to specify the version of the PayID protocol used to generate the request.</t>

<t>If present on a request, the PayID server MUST interpret the request according to the rules defined in the specified version of the PayID protocol or fail the request with an appropriate error response code.</t>

<t>If not specified in a request, the PayID server MUST fail the request with an appropriate error code.</t>

</section>
</section>
<section anchor="request-headers" title="Request Headers">
<t>In addition to common Headers, the PayID client MUST specify the following request header.</t>

<section anchor="header-accept" title="Header Accept">
<t>The PayID client MUST specify the <spanx style="verb">Accept</spanx> request header field with at least one of the registered media types (Section X). The purpose of this header is to indicate what type of content can be understood in the response. It specifies the <spanx style="verb">payment-network</spanx> and <spanx style="verb">environment</spanx> of the payment account and its representation format for which the PayID client wants to receive information. The representation format is always JSON.</t>

<t>The PayID server MUST reject formats that specify unknown or unsupported format parameters.</t>

</section>
</section>
<section anchor="response-headers" title="Response Headers">
<t>In addition to the Common Headers, the PayID server MUST specify the following response header.</t>

<section anchor="header-cache-control" title="Header Cache-Control">
<t>The PayID server MUST include the <spanx style="verb">Cache-Control</spanx> header with the max-age limit of 0. The intermediate hops or PayID client MUST NOT cache the responses.</t>

</section>
</section>
</section>
<section anchor="extensibility" title="Extensibility">

<section anchor="payload-extensibility" title="Payload Extensibility">
<t>PayID protocol supports extensibility in the payload, according to the specific format.</t>

<t>Regardless of the format, additional content MUST NOT be present if it needs to be understood by the receiver in order to correctly interpret the payload according to the specified PayID-Version header. Thus, clients MUST be prepared to handle or safely ignore any content not specifically defined in the version of the payload specified by the PayID-version header.</t>

</section>
<section anchor="header-field-extensibility" title="Header Field Extensibility">
<t>The PayID protocol defines semantics around certain HTTP request and response headers. Services that support a version of the PayID protocol conform to the processing requirements for the headers defined by this specification for that version.</t>

<t>Individual services MAY define custom headers. These headers MUST NOT begin with PayID. Custom headers SHOULD be optional when making requests to the service. A service MUST NOT require the PayID client to understand custom headers to accurately interpret the response.</t>

</section>
<section anchor="format-extensibility" title="Format Extensibility">
<t>A PayID service MUST support JSON format as described above and MAY support additional formats response bodies.</t>

</section>
</section>
<section anchor="basic-payid-protocol" title="Basic PayID Protocol">
<t>The Basic PayID protocol is used to request a payment account(s) information resource identified by a PayID URI from a PayID-enabled service provider identified by a PayID URL using HTTP over secure transport. When successful, the PayID protocol always returns the JSON representation of a payment account(s) information resource along with optional metadata. This information can be used for any purposes outside the scope of this document, though it is expected the most common application would be making payment.</t>

<t>The Basic PayID protocol comprises request and response messages, each of which is defined in more detail below. The following is a visual representation of the basic protocol flow:</t>

<figure><artwork><![CDATA[
PayID client                                         PayID server
   |                                                          |
   |              1.) GET request to PayID URL                |
   |--------------------------------------------------------->|
   |                                                          | |                                                          |
   |              2.) 200 Ok                                  |
   |                  Payment account information response    |
   |<---------------------------------------------------------|
   |                                                          |
   |                                                          |
]]></artwork></figure>

<section anchor="step-1-http-request-to-payid-url-using-http-get-method" title="Step 1: HTTP Request to PayID URL using HTTP GET Method">
<t>A basic PayID client issues a query using the HTTP GET method to the PayID URL without any query parameters and body.</t>

<t>The PayID client MUST query the PayID server using HTTPS only. <xref target="RFC2818"></xref> defines how HTTPS verifies the PayID server's identity. If the HTTPS connection cannot be established for any reason, then the PayID client MUST accept that the PayID request has failed and MUST NOT attempt to reissue the PayID request using HTTP over a non-secure connection.</t>

</section>
<section anchor="step-2-payment-account-information-response" title="Step 2: Payment Account Information Response">
<t>In response, the PayID server returns a JSON object representation of a payment account(s) information resource for the payment-network and environment requested by the PayID client in the request <spanx style="verb">Accept</spanx> header field, along with other required and/or optional metadata.</t>

<t>A PayID server MUST be able to process the <spanx style="verb">application/payid+json</spanx> header type.</t>

<t>If the PayID server does not contain the payment account information corresponding to the request, the PayID server MUST respond with an appropriate error message.</t>

<t>A PayID server MAY redirect the PayID client; if it does, the redirection MUST only be to an <spanx style="verb">https</spanx> URI and the PayID client MUST perform certificate validation again when redirected.</t>

</section>
<section anchor="step-3-parse-payment-account-information-response" title="Step 3: Parse Payment Account Information Response">
<t>If the PayID server returns a valid response, the response will contain one or more of the fields defined above.</t>

</section>
</section>
<section anchor="example-use-of-basic-payid-protocol" title="Example Use of Basic PayID Protocol">
<t>This section shows sample use of Basic PayID protocol in several hypothetical scenarios.</t>

<section anchor="basic-payid-protocol-by-a-wallet" title="Basic PayID Protocol by a Wallet">
<t>Suppose Alice wishes to send a friend some XRP from a web-based wallet provider that Alice has an account on. Alice would log-in to the wallet provider and enter Bob's PayID (say, <spanx style="verb">bob$receiver.example.com</spanx>) into the wallet UI to start the payment.
   The Wallet application would first discover the PayID URL for the PayID service-provider using one of the mechanisms described in PayID discovery <xref target="PAYID-DISCOVERY"></xref> protocol.</t>

<t>The Wallet application would then issue an HTTPS GET request:</t>

<figure><artwork><![CDATA[
 GET /users/bob HTTP/1.1
 Host: www.receiver.example.com
 Accept: application/payid+json
 PayID-version: 1.0
]]></artwork></figure>

<t>The PayID server might respond like this:</t>

<figure><artwork><![CDATA[
 HTTP/1.1 200 OK
 Content-Type: application/json
 Content-Length: 403
 PayID-version: 1.0
 Cache-Control: max-age=0
 Server: Apache/1.3.11
 {
   "payId" : "bob$receiver.example.com",
   "addresses" :
   [
     {
       "paymentNetwork" : "xrpl",
       "environment" : "testnet",
       "addressDetailsType" : "CryptoAddressDetails",
       "addressDetails" : {
                    "address" : "XTVQWr6BhgBLW2jbFyqqufgq8T9eN7KresB684ZSHKQ3oDth"
            }
      },
     {
       "paymentNetwork" : "ach",
       "environment" : "mainnet",
       "addressDetailsType" : "ACHAddressDetails",
       "addressDetails" : {
                    "accountNumber" : "5674536253",
                    "routingNumber" : "aYJTDFGLKAJD"
            }
      }
    ],
    "memo" : "Additional optional Information"
 }
]]></artwork></figure>

<t>In the above example we see that the PayID server returned a list of payment accounts identified by PayID <spanx style="verb">bob$receiver.example.com</spanx>. This is because Alice's Wallet asked for all the payment accounts corresponding to the PayID in the <spanx style="verb">Accept</spanx> header.
  Alice's Wallet MAY then use the payment account information to make payments.</t>

<t>Another example:</t>

<figure><artwork><![CDATA[
 GET /users/bob HTTP/1.1
 Host: www.receiver.example.com
 Accept: application/xrpl-testnet+json; q=0.4,
         application/ach+json; q=0.1
 PayID-version= 1.0
]]></artwork></figure>

<t>The PayID server might respond like this:</t>

<figure><artwork><![CDATA[
 HTTP/1.1 200 OK
 Content-Type: application/json
 Content-Length: 403
 PayID-version: 1.0
 Cache-Control: max-age=0
 Server: Apache/1.3.11
 {
   "payId" : "bob$receiver.example.com",
   "addresses" :
   [
     {
       "paymentNetwork" : "xrpl",
       "environment" : "testnet",
       "addressDetailsType" : "CryptoAddressDetails",
       "addressDetails" : {
                    "address" : "XTVQWr6BhgBLW2jbFyqqufgq8T9eN7KresB684ZSHKQ3oDth"
            }
      }
    ]
 }
]]></artwork></figure>

</section>
</section>
<section anchor="common-response-status-codes-todo" title="Common Response Status Codes (TODO)">
<t>A PayID server MAY respond to a request using any valid HTTP response code appropriate for the request. The PayID server SHOULD be as specific as possible in its choice of an HTTP specific status code.</t>

<section anchor="success-responses" title="Success Responses">
<t>The following response codes represent successful requests.</t>

<section anchor="response-code-200-ok" title="Response Code 200 OK">
<t>A request that does not create a resource returns 200 OK if it is completed successfully and the value of the resource is not null. null. In this case, the response body MUST contain the value of the resource specified in the request URL.</t>

</section>
<section anchor="response-code-3xx-redirection" title="Response Code 3xx Redirection">
<t>As per <xref target="RFC7231"></xref>, a 3xx Redirection indicates that further action needs to be taken by the client in order to fulfill the request. In this case, the response SHOULD include a Location header, as appropriate, with the URL from which the result can be obtained; it MAY include a Retry-After header.</t>

</section>
</section>
<section anchor="client-error-responses" title="Client Error Responses">
<t>Error codes in the 4xx range indicate a client error, such as a malformed request.
  In the case that a response body is defined for the error code, the body of the error is as defined for the appropriate format.</t>

</section>
</section>
<section anchor="content-negotiation" title="Content Negotiation">

<t>The PayID client MAY choose to query for all possible payment addresses corresponding to a PayID URI</t>

<figure><artwork><![CDATA[
 GET / HTTP/1.1
 Accept: application/all+json
]]></artwork></figure>

<t>In this case, the PayID server MAY respond with all payment account(s) information associated with the queried PayID.</t>

<t>Alternatively, the PayID client MAY choose to query for a subset payment account(s) information in the order of preference.</t>

<figure><artwork><![CDATA[
 GET / HTTP/1.1
 Accept: application/xrpl-testnet+json; q=0.4,
         application/xrpl-mainnet+json; q= 0.1
]]></artwork></figure>

<t>In this case, the PayID server MUST respond with the payment account(s) information corresponding to at least one of the payment-networks and environments mentioned in the <spanx style="verb">Accept</spanx> header in the order of client request preference. If none of those exist, the PayID server MUST send an appropriate error response.</t>

<t>Alternatively, the PayID client MAY combine the above two approaches.</t>

<figure><artwork><![CDATA[
 GET / HTTP/1.1
 Accept: application/xrpl-testnet+json; q=0.4,
         application/xrpl-mainnet+json; q= 0.1,
         application/payid+json
]]></artwork></figure>

<t>In this case, the PayID server MUST respond with the payment account information corresponding to at least one of the payment-network and environment mentioned in the <spanx style="verb">Accept</spanx> header in the order of PayID client's preference. If none of those exist, then the PayID server MUST respond with payment account(s) information corresponding to all payment accounts associated with the queried PayID URI.</t>

</section>
<section anchor="versioningtodo" title="Versioning(TODO)">

<t>Versioning enables clients and servers to evolve independently. PayID protocol defines semantics for protocol versioning.</t>

<t>PayID requests and responses are versioned according to the PayID-version header.
 PayID clients include the PayID-version header in order to specify the maximum acceptable response version. PayID servers respond with the maximum supported version that is less than or equal to the requested <spanx style="verb">major</spanx></t>

</section>
<section anchor="security-considerations" title="Security Considerations">
<t>This security considerations section only considers PayID clients and servers bound to implementations as defined in this document. Such implementations have the following characteristics:</t>

<t><list style="symbols">
  <t>PayID URIs are static and well-known to the PayID client; PayID server URLs can be static or discovered.</t>
</list></t>

<t>The following are considered out-of-scope:</t>

<t><list style="symbols">
  <t>Communication between the PayID owner and the wallet or exchange (which acts as PayID server) for PayID URI registration, etc.</t>
  <t>Communication between the sender of the transaction and the PayID client to transfer information such as PayID URI and other transaction details, etc.</t>
  <t>PayID server URL discovery by the PayID client. Implementations using PayID-Discovery <xref target="PAYID-DISCOVERY"></xref> MUST consider the security considerations in the corresponding document.</t>
  <t>PayID server URL resolution by the PayID client. Implementations using DNS, DNSSEC, DoH, DoT, etc. MUST consider the security considerations of the corresponding documents.</t>
</list></t>

<section anchor="network-attacks" title="Network Attacks">
<t>Basic PayID protocol's security model assumes the following network attackers:</t>

<t><list style="symbols">
  <t>Off-path attacker: An off-path attacker can be anywhere on the network. She can inject and spoof packets but can not observe, or tamper with the legitimate traffic between the PayID client and the server.</t>
  <t>On-path attacker: An on-path attacker can eavesdrop, inject, spoof and replay packets, but can not drop, delay or tamper with the legitimate traffic.</t>
  <t>In-path or Man-in-the-middle (MiTM) attacker: An MiTM is the most powerful network attacker. An MiTM has full access to the communication path between the PayID client and the server. She can observe, modify, delay and drop network packets.</t>
</list></t>

<t>Additionally we assume that the attacker has enough resources to mount an attack but can not break the security guarantees provided by the cryptographic primitives of the underlying secure transport.</t>

<t>The basic PayID protocol runs over HTTPS and thus relies on the security of the underlying transport. Implementations utilizing TLS 1.3 benefit from the TLS security profile defined in <xref target="RFC8446"></xref> against all the above network attackers.</t>

<section anchor="denial-of-service-dos-attacks" title="Denial-of-Service (DoS) attacks">
<t>As such, cryptography can not defend against DoS attacks because any attacker can stop/interrupt the PayID protocol by:
  * Dropping network packets,
  * Exhaustion of resources either at the network level or at PayID client and/or server.</t>

<t>The PayID servers are recommended to follow general best network configuration practices to defend against such attacks <xref target="RFC4732"></xref>.</t>

</section>
</section>
<section anchor="information-integrity" title="Information Integrity">
<t>The HTTPS connection provides transport security for the interaction between PayID client and server but does not provide the response integrity of the data provided by PayID server. A PayID client has no way of knowing if data provided in the payment account information resource has been manipulated at the PayID server, either due to malicious behavior on the part of the PayID server administrator or as a result of being compromised by an attacker. As with any information service available on the Internet, PayID clients should be wary of the information received from untrusted sources.</t>

</section>
</section>
<section anchor="privacy-considerations" title="Privacy Considerations">
<t>The PayID client and server should be aware that placing information on the Internet means that any one can access that information. While PayID protocol is an extremely useful tool to discovering payment account(s) information corresponding to a human-rememberable PayID URI, PayID owners should also understand the associated privacy risks. The easy access to payment account information via PayID protocol was a design goal of the protocol, not a limitation.</t>

<section anchor="access-control" title="Access Control">
<t>PayID protocol MUST NOT be used to provide payment account(s) information corresponding to a PayID URI unless providing that data via PayID protocol by the relevant PayID server was explicitly authorized by the PayID owner. If a PayID owner wishes to limit access to information, PayID servers MAY provide an interface by which PayID owners can select which information is exposed through the PayID server interface. For example, PayID servers MAY allow PayID owners to mark certain data as <spanx style="verb">public</spanx> and then utilize that marking as a means of determining what information to expose via PayID protocol. The PayID servers MAY also allow PayID owners to provide a whitelist of users who are authorized to access the specific information. In such a case, the PayID server MUST authenticate the PayID client.</t>

</section>
<section anchor="payment-address-rotation" title="Payment Address Rotation">
<t>The power of PayID protocol comes from providing a single place where others can find payment account(s) information corresponding to a PayID URI, but PayID owners should be aware of how easily payment account information that one might publish can be used in unintended ways. As one example, one might query a PayID server only to see if a given PayID URI is valid and if so, get the list of associated payment account information. If the PayID server uses the same payment address each time, it becomes easy for a third-party to track one's entire payment history. The PayID server MUST follow the best practice of payment address rotation for every query to mitigate this privacy concern.</t>

</section>
<section anchor="on-the-wire" title="On the Wire">
<t>PayID protocol over HTTPS encrypts the traffic and requires mutual authentication of the PayID client and the PayID server. This mitigates both passive surveillance <xref target="RFC7258"></xref> and the active attacks that attempt to divert PayID protocol queries to rogue servers.</t>

<t>Additionally, the use of the HTTPS default port 443 and the ability
  to mix PayID protocol traffic with other HTTPS traffic on the same connection can deter unprivileged on-path devices from interfering with PayID operations and make PayID traffic analysis more difficult.</t>

</section>
<section anchor="in-the-payid-server" title="In the PayID Server">
<t>The Basic PayID protocol data contains no information about the PayID client; however, various transports of PayID queries and responses do provide data that can be used to correlate requests. A Basic PayID protocol implementation is built on IP, TCP, TLS and HTTP. Each layer contains one or more common features that can be used to correlate queries to the same identity.</t>

<t>At the IP level, the PayID client address provides obvious correlation information. This can be mitigated by use of NAT, proxy, VPN, or simple address rotation over time. It may be aggravated  by use of a PayID server that can correlate real-time addressing information with other identifiers, such as when PayID server and other services are operated by the same entity.</t>

<t>PayID client implementations that use one TCP connection for multiple PayID requests directly group those requests. Long-lived connections have better performance behaviours than short-lived connections; however they group more requests, which can expose more information to correlation and consolidation. TCP-based solutions may also seek performance through the use of TCP Fast Open <xref target="RFC7413"></xref>. The cookies used in TCP Fast open may allow PayID servers to correlate TLS connections together.</t>

<t>TCP-based implementations often achieve better handshake performance through the use of some form of session resumption mechanism, such as Section 2.2 of <xref target="RFC8446"></xref>. Session resumption creates a trivial mechanism for a server to correlate TLS connections together.</t>

<t>HTTP's feature set can also be used for identification and tracking in a number of ways. For example, Authentication request header fields explicitly identify profiles in use and HTTP cookies are designed as an explicit state-tracking mechanism and are often used as an authentication mechanism.</t>

<t>Additionally, the <spanx style="verb">User-Agent</spanx> and <spanx style="verb">Accept-Language</spanx> request header fields often convey specific information about the PayID client version or locale. This allows for content-negotiation and operational work-arounds for implementation bugs. Request header fields that control caching can expose state information about a subset of the client's history. Mixing PayID queries with other HTTP requests on the same connection also provides an opportunity for richer data correlation.</t>

<t>The PayID protocol design allows implementations to fully leverage the HTTP ecosystem, including features that are not enumerated in this document. Utilizing the full set of HTTP features enables PayID to be more than HTTP tunnel, but it is at the cost of opening up implementations to the full set of privacy considerations of HTTP.</t>

<t>Implementations of PayID clients and servers need to consider the benefits and privacy impacts of these features, and their deployment context, when deciding whether or not to enable them. Implementations are advised to expose the minimal set of data needed to achieve the desired feature set.</t>

<t>Determining whether or not PayID client implementation requires HTTP cookie <xref target="RFC6265"></xref> support is particularly important because HTTP cookies are the primary state tracking mechanism in HTTP, HTTP cookies SHOULD NOT be accepted by PayID clients unless they are explicitly required by a use case.</t>

<t>Overall, the PayID protocol does not introduce significant additional privacy concerns beyond those associated with using the underlying IP, TCP, TLS and HTTP layers.</t>

</section>
</section>
<section anchor="iana-considerations" title="IANA Considerations">
<t>This document defines registries for PayID protocol version and application/* +json media types.</t>

<section anchor="header-field-registration" title="Header Field Registration">
<t>Header field name: PayID-version: major.minor</t>

<t>Applicable Protocol: "PayID protocol"</t>

<t>Status: <spanx style="verb">standard</spanx></t>

<t>Author/Change controller: Refer to the contact details of the authors in this document.</t>

<t>Specification Document: <spanx style="verb">PayID protocol</spanx></t>

</section>
<section anchor="media-type-registration" title="Media Type Registration">
<t>This document registers multiple media types, listed in Table 1.</t>

<texttable>
      <ttcol align='left'>Type</ttcol>
      <ttcol align='left'>Subtype</ttcol>
      <ttcol align='left'>Specification</ttcol>
      <c>application</c>
      <c>xrpl-mainnet+json</c>
      <c>&#160;</c>
      <c>application</c>
      <c>xrpl-testnet+json</c>
      <c>&#160;</c>
      <c>application</c>
      <c>xrpl-devnet+json</c>
      <c>&#160;</c>
      <c>application</c>
      <c>ach+json</c>
      <c>&#160;</c>
      <c>application</c>
      <c>interledger-mainnet+json</c>
      <c>&#160;</c>
      <c>application</c>
      <c>interledger-testnet+json</c>
      <c>&#160;</c>
      <c>application</c>
      <c>payid+json</c>
      <c>&#160;</c>
</texttable>

<t>Type Name: application</t>

<t>Subtype name: This document registers multiple subtypes as listed in table 1</t>

<t>Required parameters: n/a</t>

<t>Optional parameters: n/a</t>

<t>Encoding considerations:  Encoding considerations are identical to those specified for the "application/json" media type. See[RFC7159][].</t>

<t>Security considerations: Security considerations relating to the generation and consumption of PayID protocol messages are discussed in Section X.</t>

<t>Interoperability considerations:  This document specifies the format of conforming messages and the interpretation thereof.</t>

<t>Published specification: This document is the specification for these media types; see Table 1 for the section documenting each media type.</t>

<t>Applications that use this media type:  PayID servers and PayID clients.</t>

<t>Additional information:</t>

<t>Magic number(s):  n/a</t>

<t>File extension(s):  This document uses the mime type to refer to protocol messages and thus does not require a file extension.</t>

<t>Macintosh file type code(s):  n/a</t>

<t>Person &amp; email address to contact for further information:  See Authors' Addresses section.</t>

<t>Intended usage:  COMMON</t>

<t>Restrictions on usage:  n/a</t>

<t>Author:  See Authors' Addresses section.</t>

<t>Change controller:  Internet Engineering Task Force (mailto:iesg@ietf.org).</t>

</section>
</section>
<section anchor="acknowledgments" title="Acknowledgments">

</section>


  </middle>

  <back>

    <references title='Normative References'>

&RFC2119;
&RFC2818;
&RFC8446;
&RFC7258;
&RFC7231;
&RFC7413;
&RFC6265;
<reference anchor="PAYID-URI" target="https://tbd.example.com/">
  <front>
    <title>The 'payid' URI Scheme</title>
    <author initials="D." surname="Fuelling" fullname="David Fuelling">
      <organization></organization>
    </author>
    <date year="n.d."/>
  </front>
</reference>
<reference anchor="PAYID-DISCOVERY" >
  <front>
    <title>PayID Discovery</title>
    <author initials="D." surname="Fuelling" fullname="David Fuelling">
      <organization></organization>
    </author>
    <date year="n.d."/>
  </front>
</reference>


    </references>

    <references title='Informative References'>

&RFC4732;


    </references>



  </back>

<!-- ##markdown-source:
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
ZSgkcquMAAA=

-->

</rfc>

