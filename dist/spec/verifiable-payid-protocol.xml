<?xml version="1.0" encoding="utf-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.3.8 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!ENTITY RFC2119 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC2818 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2818.xml">
<!ENTITY RFC8446 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8446.xml">
<!ENTITY RFC7258 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7258.xml">
<!ENTITY RFC5280 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.5280.xml">
<!ENTITY RFC6979 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6979.xml">
<!ENTITY RFC8422 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8422.xml">
<!ENTITY RFC4732 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.4732.xml">
]>

<?rfc toc="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>
<?rfc comments="yes"?>

<rfc docName="draft-aanchal-verifiable-payid-protocol-01" category="std">

  <front>
    <title>Verifiable PayID Protocol</title>

    <author initials="A." surname="Malhotra" fullname="Aanchal Malhotra">
      <organization>Ripple</organization>
      <address>
        <postal>
          <street>315 Montgomery Street</street>
          <city>San Francisco</city>
          <region>CA</region>
          <code>94104</code>
          <country>US</country>
        </postal>
        <phone>-----------------</phone>
        <email>amalhotra@ripple.com</email>
        <uri>https://www.ripple.com</uri>
      </address>
    </author>
    <author initials="D." surname="Schwartz" fullname="David Schwartz">
      <organization>Ripple</organization>
      <address>
        <postal>
          <street>315 Montgomery Street</street>
          <city>San Francisco</city>
          <region>CA</region>
          <code>94104</code>
          <country>US</country>
        </postal>
        <phone>-----------------</phone>
        <email>david@ripple.com</email>
        <uri>https://www.ripple.com</uri>
      </address>
    </author>

    <date year="2020" month="July" day="07"/>

    <area>security</area>
    
    

    <abstract>


<t>This specification defines the Verifiable PayID protocol - an extension to <xref target="PAYID-PROTOCOL"></xref> that aims to provide payment account(s) information associated with a PayID <xref target="PAYID-URI"></xref> while allowing involved parties to exchange <spanx style="verb">identity</spanx> information and provides third-party verifiable cryptographic proof trail of the entire communication. More specifically, the Verifiable PayID protocol provides the following enhancements to the Basic PayID protocol<xref target="PAYID-PROTOCOL"></xref>.</t>

<t><list style="symbols">
  <t>Verifiable Custodial PayID service: It allows custodial wallets and exchanges to send payment account(s) address information and other resources digitally signed with their off-ledger private key.</t>
  <t>Verifiable Non-Custodial PayID service: It allows non-custodial wallets and exchanges to send payment account(s) address information digitally signed with the off-ledger private key of the PayID owner along with PayID owner's <spanx style="verb">identity</spanx> information.</t>
  <t>Privacy-enhanced PayID service: It allows PayID service providers (both custodial and non-custodial) to deploy appropriate access control mechanisms by allowing the PayID clients or senders to transmit their <spanx style="verb">identity</spanx> information for authentication.</t>
</list></t>



    </abstract>


    <note title="Feedback">


<t>This specification is a draft proposal, and is part of the
  <eref target="https://payid.org/">PayID Protocol</eref> initiative. Feedback related to this
  document should be sent in the form of a Github issue at:
  https://github.com/payid-org/rfcs/issues.</t>


    </note>


  </front>

  <middle>


<section anchor="terminology" title="Terminology">
<t>This protocol can be referred to as the <spanx style="verb">Verifiable PayID Protocol</spanx>. It uses the following terminology.</t>

<t><list style="symbols">
  <t>endpoint: either the client or the server of the connection.</t>
  <t>sender: individual or entity originating the transaction.</t>
  <t>PayID client: the endpoint that initiates PayID protocol/sending side of the transaction.</t>
  <t>PayID server: the endpoint that returns payment account(s) information/receiving side of the transaction (custodial or non-custodial wallets, exchanges, etc).</t>
  <t>receiver/PayID owner: individual or entity receiving the transaction/owner of the PayID<xref target="PAYID-URI"></xref>.</t>
</list></t>

<t>The terms <spanx style="verb">receiver</spanx> and <spanx style="verb">PayID owner</spanx> are used interchangeably.</t>

<t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in <xref target="RFC2119"></xref> and [RFC9174][].</t>

</section>
<section anchor="motivation" title="Motivation">
<t>Basic PayID protocol <xref target="PAYID-PROTOCOL"></xref> specifies a protocol to interact with a PayID server and retrieve a payment account(s) information resource along with other meta-data corresponding to the queried PayID. The protocol relies on the underlying secure transport (TLS 1.3 <xref target="RFC8446"></xref>) to ensure message integrity and privacy from network attackers. There are at least two assumptions in the security and privacy model of the basic PayID protocol that are less desirable.</t>

<t><list style="numbers">
  <t>Trust requirement between the PayID client and PayID server: As pointed out in the security considerations section of the <xref target="PAYID-PROTOCOL"></xref>, PayID server has full control over the contents of the response message, and may go rogue or be compromised. The PayID client has no way of knowing if the PayID server behaves maliciously. This implicit trust assumption between the PayID client and server is not ideal in the world where the information provided by the PayID server may be used by the PayID client to transmit money.</t>
  <t>Privacy: Per <xref target="PAYID-PROTOCOL"></xref>, anyone can query the PayID server and retrieve the payment account(s) information corresponding to the queried PayID. The PayID server or PayID owner has no way of deploying access control mechanisms since the <spanx style="verb">identity</spanx> of the PayID client and the sender is unknown to the PayID server.</t>
</list></t>

<t>The motivation for the Verifiable PayID protocol is threefold:</t>

<t><list style="numbers">
  <t>Eliminate implicit trust assumption between the PayID client and server: While it is not possible for the protocol to prevent PayID server from acting maliciously, the best we can do is to allow for mechanisms in the protocol that enables PayID client to prove this misbehaviour to third-parties and potentially hold the PayID server legally accountable for misbehaving.</t>
  <t>Enhance privacy of the PayID protocol by allowing the PayID client to share their and sender's <spanx style="verb">identity</spanx> information with the PayID server. This information could then be used to:
  <list style="symbols">
      <t>Give the PayID owner and/or PayID server the ability to decide if they want to share their payment account(s) information and other resources with the PayID client or the sender.</t>
      <t>Allow for an open standards based way for endpoints to keep verifiable records of their financial transactions, to better meet the needs of accounting practices or other reporting and regulatory requirements.</t>
    </list></t>
  <t>Ensure that if the PayID server is compromised, an attacker cannot swap a payment address in the payment account information response and redirect funds to the attacker-controlled payment network and address. Allow the PayID server or PayID owner to pre-sign <spanx style="verb">PaymentInformation</spanx> in a cold/airgapped system offline instead of online on a hot wallet.</t>
  <t>Allows for non-custodial service providers to run non-custodial PayID service by allowing the PayID owners to digitally sign the <spanx style="verb">PaymentInformation</spanx> resource locally on their device with their off-ledger private keys and send PayID owner's <spanx style="verb">identity</spanx> information in the response. This information can then be used by the PayID client and sender to authenticate the PayID owner and decide if they want to proceed with the transaction.</t>
</list></t>

</section>
<section anchor="verifiable-payid-protocol-specification" title="Verifiable PayID Protocol Specification">
<t>The Verifiable PayID protocol is designed along the same design principles as <xref target="PAYID-PROTOCOL"></xref>.</t>

<section anchor="basic-operations" title="Basic Operations">
<t>Following are the basic operations performed by the verifiable PayID client and PayID server to retrieve <spanx style="verb">PaymentInformation</spanx> resource corresponding to PayID.</t>

<section anchor="payid-client-requesting-the-paymentinformation-resource" title="PayID Client Requesting the PaymentInformation Resource">
<t>When requesting the payment accounts(s) information resource per <xref target="PAYID-PROTOCOL"></xref> that is digitally signed and requires input parameters, the PayID client uses the HTTP <spanx style="verb">POST</spanx> method with path parameter <spanx style="verb">payment-setup-details</spanx> with an optional payload in JSON format. We define this resource as a <spanx style="verb">PaymentInformation</spanx> resource.</t>

</section>
<section anchor="payid-server-responding-to-the-paymentinformation-resource-request" title="PayID Server Responding to the PaymentInformation Resource Request">
<t>Upon receiving a request for a <spanx style="verb">PaymentInformation</spanx> resource that the PayID server can provide, the PayID server normally returns the requested response. However, if PayID server does not support the Verifiable PayID protocol, the PayID server MAY send back an appropriate error code (TBD) to indicate to the PayID client that the resource is available via an HTTP <spanx style="verb">GET</spanx> request to an alternate URL.</t>

</section>
</section>
<section anchor="json-payloads" title="JSON Payloads">

<section anchor="payid-client-request-query-body-for-paymentinformation-resource" title="PayID Client Request Query Body for PaymentInformation Resource">
<figure><artwork><![CDATA[
  {
   optional string identity,
   optional string memo
  }
]]></artwork></figure>

<section anchor="identity" title="identity">
<t>The type/value of the <spanx style="verb">identity</spanx> field is TBD. We anticipate this being a mechanism for the PayID client to transmit their or the sender's <spanx style="verb">identity</spanx> information to the PayID server. This information can then be used by the PayID server/PayID owner to
  * Enhance privacy by exercising access control mechanisms such as authorized access via accept/deny lists, etc. for the <spanx style="verb">PaymentInformation</spanx> or other resources for a PayID.
  * Record-Keeping</t>

</section>
<section anchor="memo" title="memo">
<t>The type/value of the <spanx style="verb">memo</spanx> field is TBD. <spanx style="verb">memo</spanx> field is a placeholder to ensure protocol extensibility. e.g. for the primary use-case of making payments, the PayID client MAY send information such as amount, scale, etc. necessary to make the payment.
  //TBD: The request body parameters will depend on the use-case.</t>

</section>
</section>
<section anchor="payid-server-response-body-for-paymentinformation-resource-request" title="PayID Server Response Body for PaymentInformation Resource Request">
<t>Refer to the payment account(s) information resource in <xref target="PAYID-PROTOCOL"></xref>.</t>

</section>
<section anchor="signaturewrapper" title="SignatureWrapper">

<t><spanx style="verb">SignatureWrapper</spanx> is an encapsulating wrapper for any verifiable PayID protocol messages. It allows for the generation of cryptographically signed third-party verifiable proofs of the contents of the messages exchanged between the participating endpoints. We define <spanx style="verb">SignatureWrapper</spanx> as JSON object with the following name/value pairs:</t>

<figure><artwork><![CDATA[
  {
   required string messageType,
   required Message message,
   required string publicKeyType,
   required array publicKeyData,
   required string publicKey,
   required string signature
  }
]]></artwork></figure>

<section anchor="messagetype" title="messageType">
<t>The value of <spanx style="verb">messageType</spanx> is the message type of the signed <spanx style="verb">message</spanx>. <spanx style="verb">messageType</spanx> is essential for future extensibility of the protocol to include more message types. We define the following enum for message types:
    enum messageType
      {
        PaymentInformation
      }</t>

</section>
<section anchor="message" title="message">
<t>The value of <spanx style="verb">message</spanx> includes the contents of the Verifiable PayID protocol message of the type <spanx style="verb">messageType</spanx> to be signed.</t>

</section>
<section anchor="publickeytype" title="publicKeyType">
<t>The value of <spanx style="verb">publicKeyType</spanx> is the Public Key Infrastructure (PKI)/identity system being used to identify the signing endpoint. e.g. <spanx style="verb">X509+SHA512</spanx> means an X.509 certificate as described in <xref target="RFC5280"></xref> and SHA512 hash algorithm used to hash the contents of <spanx style="verb">message</spanx> for signing. This field defaults to empty string. We define the following <spanx style="verb">publicKeyType</spanx> values. One can register more in future.</t>

<texttable>
      <ttcol align='left'>publicKeyType</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>X509+SHA512</c>
      <c>A X.509 certificate <xref target="RFC5280"></xref></c>
      <c>pgp+SHA512</c>
      <c>An OpenPGP certificate</c>
      <c>ecdsa+SHA256</c>
      <c>A secp256k1 ECDSA public key <xref target="RFC6979"></xref> <xref target="RFC8422"></xref></c>
</texttable>

</section>
<section anchor="publickeydata" title="publicKeyData">
<t>The value of <spanx style="verb">publicKeyData</spanx> is the PKI-system/identity data used to identify the signing endpoint who creates digital signatures over the hash of the contents of the <spanx style="verb">message</spanx>. e.g. in the case of X.509 certificates, it may contain one or more X.509 certificates as a list upto the root trust certificate. Defaults to empty.</t>

</section>
<section anchor="publickey" title="publicKey">
<t>The value of <spanx style="verb">publicKey</spanx> is the contents of the public key. Defaults to empty.</t>

</section>
<section anchor="signature" title="signature">
<t>The value of <spanx style="verb">signature</spanx> is the digital signature over the hash of the contents of the <spanx style="verb">message</spanx> using the private key corresponding to the public key in <spanx style="verb">publicKey</spanx>. This is a proof that the <spanx style="verb">message</spanx> was signed by the corresponding private key holder.</t>

</section>
</section>
</section>
</section>
<section anchor="custodial-and-non-custodial-payid-service-providers" title="Custodial and Non-Custodial PayID Service Providers">
<t>We anticipate that the most common use-case for retrieving the <spanx style="verb">PaymentInformation</spanx> resource is to make transactions. We can categorize the providers of such services as follows:
* Custodial wallets and exchanges: Custodial wallets and exchanges hold the private keys of their customers on their servers and essentially hold their funds. There is an implicit trust between the custodial service provider and their customers.</t>

<t><list style="symbols">
  <t>Non-Custodial wallets and exchanges: Non-custodial wallets and exchanges do not store their customers’ keys on their servers. The customers hold their private keys locally on their device. [Arguably] there is a no trust requirement between the non-custodial wallets and exchanges and their customers. Since the customers hold the private keys so the wallets are not liable for any consequences coming from the lost, compromised or hacked private keys of the customers. Nor do they need their customers to trust their servers in case wallet's servers go malicious or are compromised.</t>
</list></t>

<t>Notice that the custodial and non-custodial service providers operate under different trust models. To continue operating under the same trust model, verifiable PayID requires slightly different treatment for custodial and non-custodial service providers.</t>

</section>
<section anchor="verifiable-payid-protocol-for-custodial-wallets-and-exchanges" title="Verifiable PayID Protocol for Custodial Wallets and Exchanges">

<t>The Verifiable PayID protocol flow is similar to that of the Basic PayID protocol <xref target="PAYID-PROTOCOL"></xref> with the following modifications.</t>

<figure><artwork><![CDATA[
Sender  PayID client                                             PayID server    Receiver
  |           |                                                          |            |
  |PayID, etc.|                                                          |            |
  |---------->|                                                          |            |
  |           |     1.) POST /payment-setup-details request to PayID URL |            |
  |           |--------------------------------------------------------->|            |
  |           |     2.) 200 Ok                                           |            |
  |           |       Signed PaymentInformation response                 |            |
  |           |<---------------------------------------------------------|  Optional  |
  |           |                                                          |notification|
  |           |                                                          |----------->|
  |           |                                                          |            |
]]></artwork></figure>

<section anchor="step-1-preparing-the-http-request-to-payid-url-using-http-post-method" title="Step 1: Preparing the HTTP Request to PayID URL using HTTP POST Method">
<t>A verifiable PayID client issues a query using the HTTP <spanx style="verb">POST</spanx> method to the PayID URL with path parameter <spanx style="verb">payment-setup-details</spanx> and optional body parameters as described above.</t>

</section>
<section anchor="step-2-preparing-the-paymentinformation-response" title="Step 2: Preparing the PaymentInformation Response">
<t>In response, the PayID server returns a JSON representation of the <spanx style="verb">PaymentInformation</spanx> resource. <spanx style="verb">PaymentInformation</spanx> resource is the <spanx style="verb">signed</spanx> payment account(s) information message <xref target="PAYID-PROTOCOL"></xref> for the payment-network and environment requested by PayID client in the request <spanx style="verb">Accept</spanx> header field along with other required and optional metadata as <spanx style="verb">message</spanx> field in the <spanx style="verb">SignatureWrapper</spanx>.</t>

<section anchor="preparing-the-payment-accounts-information-message" title="Preparing the payment account(s) information message">
<t><list style="symbols">
  <t>Set <spanx style="verb">payId</spanx> to the value of the PayID in the client query. This is a required field in the Verifiable PayID protocol.</t>
  <t>Set <spanx style="verb">addresses</spanx> to the value as described in <xref target="PAYID-PROTOCOL"></xref></t>
  <t>Optionally set <spanx style="verb">memo</spanx> to any additional information.</t>
  <t><spanx style="verb">identity</spanx> field is optional.</t>
  <t>Optionally set <spanx style="verb">proofOfControlSignature</spanx> to the value as described in <xref target="PAYID-PROTOCOL"></xref>.</t>
</list></t>

</section>
<section anchor="preparing-signaturewrapper-message" title="Preparing SignatureWrapper message">
<t><list style="symbols">
  <t>Set <spanx style="verb">messageType</spanx> to <spanx style="verb">PaymentInformation</spanx>.</t>
  <t>Set <spanx style="verb">message</spanx> to the value of the payment account(s) information message as generated above.</t>
  <t>Set <spanx style="verb">publicKeyType</spanx> to one of the values described in the Section above.</t>
  <t>Set <spanx style="verb">publicKeyData</spanx> to the data corresponding to the value in <spanx style="verb">publicKeyType</spanx>.</t>
  <t>Set <spanx style="verb">publicKey</spanx> to the value of the public key of the signing endpoint (PayID server.)</t>
  <t>Sign the <spanx style="verb">message</spanx> using the hash algorithm and the signature scheme corresponding to the value in <spanx style="verb">publicKeyType</spanx></t>
  <t>Set <spanx style="verb">signature</spanx> to the result of the signature operation in the previous step.</t>
</list></t>

<t>Send the signed payment account(s) information message as <spanx style="verb">PaymentInformation</spanx> response to the client.</t>

</section>
</section>
<section anchor="step-3-parse-paymentinformation-response" title="Step 3: Parse PaymentInformation Response">
<t>If the PayID server returns a valid response, the response will contain one or more of the fields defined above. The PayID client will then:</t>

<t><list style="symbols">
  <t>Verify the <spanx style="verb">publicKey</spanx> using the information in the <spanx style="verb">publicKeyType</spanx> and <spanx style="verb">publicKeyData</spanx> in the response.</t>
  <t>Verify the signature retrieved from the <spanx style="verb">signature</spanx> field using the public key verified in the previous step.</t>
  <t>Retrieve payment account(s) information message from the <spanx style="verb">message</spanx> field of the <spanx style="verb">PaymentInformation</spanx> Response.</t>
</list></t>

<t>All the verification steps MUST pass. The PayID client proceeds to the next step only if the previous step passes, otherwise it generates the relevant Error message (//TBD).</t>

</section>
</section>
<section anchor="verifiable-payid-protocol-for-non-custodial-wallets-and-exchanges" title="Verifiable PayID Protocol for Non-Custodial Wallets and Exchanges">

<t>Pre-step at PayID owner's (non-custodial wallet's customer) device locally.
  For each <spanx style="verb">payment-network</spanx> and <spanx style="verb">environment</spanx> as described in <xref target="PAYID-PROTOCOL"></xref> that the PayID owner has a payment address for, generate the following payment account(s) information message
  * Set <spanx style="verb">payId</spanx> to the value of the PayID. This is a required field in the Verifiable PayID protocol.
  * Set <spanx style="verb">addresses</spanx> to the value as described in <xref target="PAYID-PROTOCOL"></xref>
  * Optionally set <spanx style="verb">memo</spanx> to any additional information.
  * <spanx style="verb">identity</spanx> field is TBD.
  * <spanx style="verb">proofOfControlSignature</spanx> is optional described in <xref target="PAYID-PROTOCOL"></xref> and is not required in this case.</t>

<t>For each payment account(s) information message, prepare <spanx style="verb">SignatureWrapper</spanx> message
  * Set <spanx style="verb">messageType</spanx> to <spanx style="verb">PaymentInformation</spanx>.
  * Set <spanx style="verb">message</spanx> to the value of payment account(s) information message as generated above.
  * Set <spanx style="verb">publicKeyType</spanx> to one of the values described in Section X.
  * Set <spanx style="verb">publicKeyData</spanx> to the data corresponding to the value in <spanx style="verb">publicKeyType</spanx>.
  * Set <spanx style="verb">publicKey</spanx> to the value of the public key of the signing endpoint (PayID server.)
  * Sign the <spanx style="verb">message</spanx> using the hash algorithm and the signature scheme corresponding to the value in <spanx style="verb">publicKeyType</spanx>
  * Set <spanx style="verb">signature</spanx> to the result of the signature operation in the previous step.</t>

<t>This signed payment account(s) information message is then securely transferred to the non-custodial PayID server and stored by the PayID server as a <spanx style="verb">PaymentInformation</spanx> resource.</t>

<section anchor="discussion-section-on-distributing-payid-owners-keys" title="Discussion Section on distributing PayID owner's keys">
<t>In this subsection, we discuss potential ways to distribute the keys of the PayID owner used to sign the message. Once we reach a consensus, it will be added to the relevant sections of this document and this subsection will be removed. Following are the two possible approaches:</t>

<section anchor="identity-field-in-payment-accounts-information-message" title="identity field in payment account(s) information message">
<t>The following table enumerates the possible ways to share the public key of PayID owner using <spanx style="verb">identity</spanx> field.</t>

<texttable>
      <ttcol align='left'>identity</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>Global Identifier (GiD) <xref target="GiD"></xref></c>
      <c>digital identifier</c>
      <c>Human Universally Unique Identifier (Human UUID) <xref target="HUUID"></xref></c>
      <c>digital identifier</c>
      <c>Digital Identifier (DID) <xref target="DID"></xref></c>
      <c>digital identifier</c>
      <c>Certificate</c>
      <c>attested certificate that associates digital identifier to PayID and public key</c>
      <c>URL</c>
      <c>URL for secure retrieval of public key of the PayID owner</c>
      <c>Public key</c>
      <c>out-of-band pre-shared public key between PayID client and PayID owner</c>
</texttable>

<t><list style="symbols">
  <t>Digital identifier: A global digital identifier that uniquely associates the <spanx style="verb">PayID owner's identity</spanx> as defined by the identifier (GiD, HUID, DID, etc.) to the <spanx style="verb">PayID</spanx> and <spanx style="verb">public key</spanx>. The PayID client can then verify the <spanx style="verb">public key</spanx> using the digital identifier. This could be a direct retrieval of the corresponding <spanx style="verb">public key</spanx> from a digital identity service provider if PayID is a part of that digital identifier.</t>
  <t>Certificate: An attested certificate that associates digital identifier such as GiD, Human UUID, DID, etc. to the <spanx style="verb">PayID</spanx> and <spanx style="verb">public key</spanx>.</t>
  <t>URL: A URL for secure retrieval of <spanx style="verb">public key</spanx> of the PayID owner.</t>
  <t>Pre-shared public Key: The public key that has been pre-shared out-of-band between the PayID client and PayID owner.</t>
</list></t>

</section>
<section anchor="embed-the-public-key-of-payid-owner-in-the-payid" title="Embed the public key of PayID owner in the PayID">
<t>PayID <xref target="PAYID-URI"></xref> could support non-custodial systems with a fairly simple extension to the protocol to run non-custodial PayID servers that could not be hacked or tricked into sending money to the wrong place. The idea is to reserve the hostname <spanx style="verb">pkh</spanx> for <spanx style="verb">public key hashes</spanx> and support a PayID format like <spanx style="verb">public_key_hash</spanx>$pkh.provider.domain. PayID client implementations would require that any <spanx style="verb">PaymentInformation</spanx> resource that resulted from the PayID of that form be signed with the <spanx style="verb">private key</spanx> corresponding to that <spanx style="verb">public key hash</spanx>. So only a <spanx style="verb">PaymentInformation</spanx> signed by the owner of the PayID would work.</t>

<t>The caveat is that the PayID format is not human-readable anymore. The solution is simple: the non-custodial wallets and exchanges would provide a non-human-readable PayID of the form <spanx style="verb">public_key_hash</spanx>$pkh.provider.domain, but the customers may get a human-readable PayID from another trusted service providers (say from their email provider) that maps to the non-human-readable PayID they got from their non-custodial service-provider. Non-custodial service-providers could even automate this process by allowing the user to choose a mapping provider.</t>

<t>// Details TBD</t>

</section>
</section>
<section anchor="step-1-preparing-http-request-to-payid-url-using-http-post-method" title="Step 1: Preparing HTTP Request to PayID URL using HTTP POST Method">
<t>Same as in the previous section.</t>

</section>
<section anchor="step-2-preparing-paymentinformation-response" title="Step 2: Preparing PaymentInformation Response">

<t>The PayID server MUST parse the request body. The protocol does not provide specification on how the PayID server MAY use this information.</t>

<t>If the PayID server were to proceed, the PayID server retrieves the pre-signed <spanx style="verb">PaymentInformation</spanx> response to the PayID client.</t>

</section>
<section anchor="step-3-parsing-the-paymentinformation-response" title="Step 3: Parsing the PaymentInformation Response">
<t>The PayID client follows the same verification steps as in the previous section. Details to be decided based on <spanx style="verb">identity</spanx> solution.</t>

</section>
</section>
<section anchor="example-use-of-the-verifiable-payid-protocol" title="Example Use of the Verifiable PayID Protocol">
<t>This section shows sample use of the Verifiable PayID protocol in several hypothetical scenarios.</t>

<section anchor="verifiable-payid-protocol-by-a-custodial-wallet-as-payid-server" title="Verifiable PayID Protocol by a Custodial Wallet as PayID server">
<t>Suppose Alice (sender) wishes to send a friend Bob (PayID owner) some XRP from a web-based wallet provider (PayID client) that Alice has an account on. Alice would log-in to the wallet provider and enter Bob's PayID (say, <spanx style="verb">bob$receiver.example.com</spanx>) into the wallet UI to start the payment.</t>

<t>The Wallet application would first discover the PayID URL for the PayID service-provider using one of the mechanisms described in PayID discovery protocol <xref target="PAYID-DISCOVERY"></xref>.</t>

<t>The Wallet application would then issue an HTTPS POST request:</t>

<figure><artwork><![CDATA[
 POST /users/bob/payment-setup-details HTTP/1.1
 Host: www.receiver.example.com
 Accept: application/xrpl-testnet+json
 PayID-version: 1.0

 {
  "identity": "TBD",
  "memo": "Any additional required information"
 }
]]></artwork></figure>

<t>Bob's wallet who is a custodial PayID server wallet might respond like this:</t>

<figure><artwork><![CDATA[
 HTTP/1.1 200 OK
 Content-Type: application/json
 Content-Length: 403
 PayID-version: 1.0
 Cache-Control: max-age=0
 Server: Apache/1.3.11
{
"messageType" : "PaymentInformation",
"message" :
 {
   "payId" : "bob$receiver.example.com",
   "addresses" :
   [
     {  
       "paymentNetwork" : "xrpl",
       "environment" : "testnet",
       "addressDetailsType" : "CryptoAddressDetails",
       "addressDetails" : {
                    "address" : "XTVQWr6BhgBLW2jbFyqqufgq8T9eN7KresB684ZSHKQ3oDth"
            }
      }
    ],
    "memo" : "Additional optional Information",
    "proofOfControlSignature" :
    {
      "publicKey" : "sdkfhjasdvkakjnasdv",
      "payId" : "bob$receiver.example.com",
      "hashAlgorithm" : "SHA512",
      "signature" : "9743b52063cd84097a65d1633f5c74f5"
    }
 }
"publicKeyType" : "X509+SHA512",
"publicKeyData": [],
"publicKey" : "00:c9:22:69:31:8a:d6:6c:ea:da:c3:7f:2c:ac:a5:af:c0:02:ea:81:cb:65:b9:fd:0c:6d:46:5b:c9:1e:9d:3b:ef...",
"signature" : "8b:c3:ed:d1:9d:39:6f:af:40:72:bd:1e:18:5e:30:54:23:35..."
}
]]></artwork></figure>

<t>In the above example we see that Bob's custodial PayID server wallet returned a signed X-Address on XRPL testnet identified by PayID <spanx style="verb">bob$receiver.example.com</spanx>. This is because Alice's wallet asked for XRPL and testnet payment accounts corresponding to the PayID in the <spanx style="verb">Accept</spanx> header.</t>

<t>Alice's Wallet MAY then use the payment account information to make payments.</t>

</section>
<section anchor="verifiable-payid-protocol-by-a-non-custodial-wallet-as-payid-server" title="Verifiable PayID Protocol by a Non-Custodial Wallet as PayID Server">
<t>Consider the same scenario as above.</t>

<t>Bob's wallet who is a non-custodial PayID server might respond like this:</t>

<figure><artwork><![CDATA[
 HTTP/1.1 200 OK
 Content-Type: application/json
 Content-Length: 403
 PayID-version: 1.0
 Cache-Control: max-age=0
 Server: Apache/1.3.11
{
"messageType" : "PaymentInformation",
"message" :
 {
   "payId" : "bob$receiver.example.com",
   "addresses" :
   [
     {  
       "paymentNetwork" : "xrpl",
       "environment" : "testnet",
       "addressDetailsType" : "CryptoAddressDetails",
       "addressDetails" : {
          "address" : "XTVQWr6BhgBLW2jbFyqqufgq8T9eN7KresB684ZSHKQ3oDth"
        }
      }
    ],
    "memo" : "Additional optional Information",
    "identity" : "TBD",
 }
"signature" : "TBD"
}
]]></artwork></figure>

<t>In the above example, the <spanx style="verb">PaymentInformation</spanx> resource is a pre-signed message with the off-ledger private keys of the PayID owner Bob. Bob's non-custodial wallet retrieves this response and sends it to the PayID client.</t>

<t>//TODO Add example for PayID owner's public key embedded in PayID.</t>

</section>
</section>
<section anchor="security-considerations" title="Security Considerations">
<t>This security considerations section only considers verifiable PayID clients and servers bound to implementations as defined in this document.</t>

<t>The security guarantees mentioned in <xref target="PAYID-PROTOCOL"></xref> applies to the Verifiable PayID protocol. In this section, we discuss a security model for the Verifiable PayID protocol.</t>

<section anchor="fully-malicious-adversary-model-for-payid-client-wallet-and-custodial-wallets-and-exchanges-as-payid-servers" title="Fully-Malicious Adversary Model for PayID Client Wallet and Custodial Wallets and Exchanges as PayID Servers">

<t>While the Verifiable PayID protocol operates between a PayID client and a PayID server, there are actually four parties to any payment. The other two parties are the sender of the payment whose funds are being transferred and the PayID owner or the receiver of the payment who the sender wishes to pay.</t>

<t>In the current security model, there is necessarily some existing trust between the sender and the sender's wallet. The sender's wallet is holding the sender's private keys and consequently their funds before the payment is made. Similarly, there is necessarily some existing trust between the receiver and their custodial wallet since the receiver has directed that the custodial wallet receive their funds.</t>

<t>The Verifiable PayID protocol provides a stronger security guarantee: The ideal scenario that we strive for is that the sender should be able to hold the PayID client wallet legally accountable if the institution provably mishandles their funds. Similarly, the PayID owner/receiver should be able to hold the PayID server wallet legally accountable if their funds are mishandled. However, this mechanism requires that it be possible for either wallet to establish that it acted properly and that the other wallet acted improperly.</t>

<t>Of course, the preferred outcome of any payment is that nothing goes wrong and both the sender and PayID owner/receiver of the payment are satisfied that the payment took place as agreed. A less desirable outcome is that the payment cannot take place for some reason and the sender still has their money and understands why the payment cannot take place.</t>

<t>While the protocol cannot possibly prevent the PayID client wallet from sending the funds to the wrong address or the PayID server wallet from receiving the funds but refusing to release them to the PayID owner/receiver, it is vital that the institutions not be able to plausibly blame each other for a failure where the sender has been debited but the PayID client/wallet has not been credited.</t>

<t>Accordingly, the security model of the Verifiable PayID protocol permits four acceptable outcomes:</t>

<t><list style="numbers">
  <t>The payment succeeds, the sender is debited, and the PayID owner/receiver is credited.</t>
  <t>The payment fails, the sender is not debited, and the PayID owner/receiver is not credited.</t>
  <t>The payment fails, the sender is debited, the PayID owner/receiver is not credited, and the sender can show that the PayID client wallet did not follow the protocol.</t>
  <t>The payment fails, the sender is debited, the PayID owner/receiver is not credited, and the sender can show the receiver that their PayID server wallet did not follow the protocol.</t>
</list></t>

<t>Again, the protocol cannot possibly prevent outcomes 3 or 4 because the PayID client wallet can always send the money to the wrong address and the PayID server wallet can always refuse to credit the PayID owner/receiver. It is, however, critical that the PayID client and PayID server wallets not need to trust each other to ensure that one of these four outcomes occurs and that they cannot point blame at each other.</t>

<section anchor="cryptographic-proofs" title="Cryptographic Proofs">

<t>//TODO</t>

</section>
</section>
<section anchor="fully-compromisable-custodial-payid-server-wallet-hotalways-online-systems-adding-another-layer-of-security" title="Fully Compromisable Custodial PayID Server Wallet (hot/always online systems): Adding another Layer of Security.">

<t>The Verifiable PayID protocol's security model assumes that the online servers can be physically or remotely compromised by an adversary. These are the most attractive attack vectors. There is sufficient evidence that hot/always online systems are more vulnerable.</t>

<t>There are multiple cryptographic operations that the PayID server wallet MUST perform to establish secure communication channels, to generate signed messages as verifiable cryptographic proofs, etc.</t>

<t>These operations have very different security requirements and compromising the cryptographic keys required for these operations have different security implications.</t>

<t><list style="symbols">
  <t>High-risk impersonation attack to steal funds: If the PayID server wallet’s cryptographic keys used to sign <spanx style="verb">PaymentInformation</spanx> resource are compromised, an attacker may impersonate as the PayID server wallet and sign malicious mappings (‘Receiver's PayID → attacker controlled payment address’) to send to the PayID client wallet. This may lead to indirection of funds by the PayID client wallet to the attacker-controlled address. Therefore, it is extremely important to keep these keys safe offline.</t>
  <t>Lower-risk impersonation attacks: An attacker can never steal funds if only cryptographic keys used to establish secure network connection between the PayID client wallet and PayID server wallet are compromised.</t>
</list></t>

<t>These differing security implications warrant a separation of generating cryptographically signed proofs and storing the cryptographic keys used to perform these two operations. Some observations that inform us on how we can deal with this are that:
  * Generating the cryptographic signatures on <spanx style="verb">PaymentInformation</spanx> resource need not be an online operation. This can be performed offline in a safe, cold system with a separate set of keys,</t>

<t><list style="symbols">
  <t>All other cryptographic operations need to be performed online, such as signing any additional information needed to fulfill the payment or establishing secure communication channels.</t>
</list></t>

<t>Based on these observations, we propose to maintain two separate systems (hot and cold) and two separate sets of cryptographic keys for the two operations.</t>

<t>We propose that the PayID client wallet and PayID server wallet SHOULD follow best practices to reduce the attack surface and be more robust.</t>

<t>//TODO Key Management sub-section.</t>

</section>
<section anchor="security-model-for-non-custodial-payid-server-wallets" title="Security Model for Non-Custodial PayID Server Wallets">

<t>In the current security model, non-custodial wallets do not store their customers’ keys on their servers. The customers hold their private keys on their device. There is a no trust requirement between the service provided by the non-custodial wallets and the customers of this service. Since the customers hold the private keys:
  * The wallets are not liable for any consequences coming from the lost, compromised or hacked private keys of the customers.
  * The non-custodial wallets do not require their customers to trust their servers in case wallets servers go malicious or are compromised.</t>

<t>The Verifiable PayID protocol preserves this trust model. For non-custodial PayID server wallets, this means that</t>

<t><list style="symbols">
  <t>On the receiving side of the payment (as a PayID server) non-custodial wallets have no liability on their end for providing <spanx style="verb">PaymentInformation</spanx>, that is, the <spanx style="verb">PayID --&gt; Payment Address</spanx> mappings for their customers that are signed with the private key of the non-custodial PayID server wallet. The PayID owners or the customers can generate this signed mapping with their own off-ledger private key locally on their app/device. The PayID client can easily verify this signature based on the trust relationship between the sender of the payment (PayID client wallet’s customer) and the receiver (non-custodial PayID server's wallet). The non-custodial PayID server wallet has no role whatsoever. This eliminates any risk of the non-custodial PayID server wallet having lost their private keys, going malicious, or getting hacked, etc. because if this happens then their customers might lose funds.</t>
</list></t>

</section>
</section>
<section anchor="privacy-considerations" title="Privacy Considerations">
<t>All privacy guarantees in the Privacy Considerations section of <xref target="PAYID-PROTOCOL"></xref> apply to the Verifiable PayID protocol and further address some of the privacy issues mentioned in <xref target="PAYID-PROTOCOL"></xref>.</t>

<section anchor="access-control" title="Access Control">
<t>PayID protocol MUST not be used to provide <spanx style="verb">PaymentInformation</spanx> or any other resources corresponding to a PayID unless providing that data via PayID protocol by the relevant PayID server was explicitly authorized by the PayID owner. If the PayID owner wishes to limit access to information, PayID servers MAY provide an interface by which PayID owners can select which information is exposed through the PayID server interface. For example, PayID servers MAY allow PayID owners to mark certain data as <spanx style="verb">public</spanx> and then utilize that marking as a means of determining what information to expose via PayID protocol. The PayID servers MAY also allow PayID owners to provide a whitelist of users who are authorized to access the specific information. In such a case, the PayID server MUST authenticate the PayID client. The additional <spanx style="verb">identity</spanx> field in the PayID client query request allows for this.</t>

</section>
</section>
<section anchor="iana-considerations" title="IANA Considerations">
<t>//TODO</t>

</section>
<section anchor="acknowledgments" title="Acknowledgments">
<t>//TODO</t>

</section>


  </middle>

  <back>

    <references title='Normative References'>

&RFC2119;
&RFC2818;
&RFC8446;
&RFC7258;
&RFC5280;
&RFC6979;
&RFC8422;
<reference anchor="DID" target="https://www.didalliance.org/">
  <front>
    <title>Digital Identity Alliance</title>
    <author >
      <organization></organization>
    </author>
    <date year="n.d."/>
  </front>
</reference>
<reference anchor="GiD" target="https://www.global.id/">
  <front>
    <title>Global identity</title>
    <author >
      <organization></organization>
    </author>
    <date year="n.d."/>
  </front>
</reference>
<reference anchor="HUUID" target="https://github.com/codetsunami/HumanUUID">
  <front>
    <title>Human Universally Unique Identifier</title>
    <author >
      <organization></organization>
    </author>
    <date year="n.d."/>
  </front>
</reference>
<reference anchor="PAYID-URI" target="https://tbd.example.com/">
  <front>
    <title>The 'payid' URI Scheme</title>
    <author initials="D." surname="Fuelling" fullname="David Fuelling">
      <organization></organization>
    </author>
    <date year="n.d."/>
  </front>
</reference>
<reference anchor="PAYID-DISCOVERY" >
  <front>
    <title>PayID Discovery</title>
    <author initials="D." surname="Fuelling" fullname="David Fuelling">
      <organization></organization>
    </author>
    <date year="n.d."/>
  </front>
</reference>
<reference anchor="PAYID-PROTOCOL" >
  <front>
    <title>PayID Protocol</title>
    <author initials="D." surname="Schwartz" fullname="David Schwartz">
      <organization></organization>
    </author>
    <date year="n.d."/>
  </front>
</reference>


    </references>

    <references title='Informative References'>

&RFC4732;


    </references>



  </back>

<!-- ##markdown-source:
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
2WMjmrBr8V2tqKwotmSu/Ddy+h18nooAAA==

-->

</rfc>

