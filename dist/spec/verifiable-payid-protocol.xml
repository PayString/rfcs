<?xml version="1.0" encoding="utf-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.3.8 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!ENTITY RFC2119 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC2818 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2818.xml">
<!ENTITY RFC8446 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8446.xml">
<!ENTITY RFC7258 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7258.xml">
<!ENTITY RFC5280 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.5280.xml">
<!ENTITY RFC6979 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6979.xml">
<!ENTITY RFC8422 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8422.xml">
<!ENTITY RFC4732 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.4732.xml">
]>

<?rfc toc="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>
<?rfc comments="yes"?>

<rfc docName="draft-aanchal-verifiable-payid-protocol-01" category="std">

  <front>
    <title>Verifiable PayID Protocol</title>

    <author initials="A." surname="Malhotra" fullname="Aanchal Malhotra">
      <organization>Ripple</organization>
      <address>
        <postal>
          <street>315 Montgomery Street</street>
          <city>San Francisco</city>
          <region>CA</region>
          <code>94104</code>
          <country>US</country>
        </postal>
        <phone>-----------------</phone>
        <email>amalhotra@ripple.com</email>
        <uri>https://www.ripple.com</uri>
      </address>
    </author>
    <author initials="D." surname="Schwartz" fullname="David Schwartz">
      <organization>Ripple</organization>
      <address>
        <postal>
          <street>315 Montgomery Street</street>
          <city>San Francisco</city>
          <region>CA</region>
          <code>94104</code>
          <country>US</country>
        </postal>
        <phone>-----------------</phone>
        <email>david@ripple.com</email>
        <uri>https://www.ripple.com</uri>
      </address>
    </author>

    <date year="2020" month="June" day="18"/>

    <area>security</area>
    
    

    <abstract>


<t>This specification defines the verifiable PayID protocol - an extension to <xref target="PAYID-PROTOCOL"></xref> that aims to provide payment account(s) information associated with a PayID <xref target="PAYID-URI"></xref> while allowing involved parties to exchange <spanx style="verb">identity</spanx> information and provides third-party verifiable cryptographic proof trail of the entire communication. More specifically verifiable PayID protocol provides the following enhancements to Basic PayID protocol<xref target="PAYID-PROTOCOL"></xref>.</t>

<t><list style="symbols">
  <t>Verifiable Custodial PayID service: It allows custodial wallets and exchanges to send payment account(s) address information and other resources digitally signed with their off-ledger private key.</t>
  <t>Verifiable Non-Custodial PayID service: It allows non-custodial wallets and exchanges to send payment account(s) address information digitally signed with the off-ledger private key of the PayID owner along with PayID owner's <spanx style="verb">identity</spanx> information.</t>
  <t>Privacy-enhanced PayID service: It allows PayID service providers (both custodial and non-custodial) to deploy appropriate access control mechanisms by allowing the PayID clients or senders to transmit their <spanx style="verb">identity</spanx> information for authentication.</t>
</list></t>



    </abstract>


    <note title="Feedback">


<t>This specification is a part of the <eref target="https://payid.org/">PayID Protocol</eref> work.
 Feedback related to this specification should be sent to <eref target="mailto:payid@ripple.com">payid@ripple.com</eref>.</t>


    </note>


  </front>

  <middle>


<section anchor="terminology" title="Terminology">
<t>This protocol can be referred to as <spanx style="verb">Verifiable PayID Protocol</spanx>. It uses the following terminology.</t>

<t><list style="symbols">
  <t>endpoint: either the client or the server of the connection.</t>
  <t>sender: individual or entity originating the transaction.</t>
  <t>PayID client: the endpoint that initiates PayID protocol/sending side of the transaction.</t>
  <t>PayID server: the endpoint that returns payment account(s) information/receiving side of the transaction (custodial or non-custodial wallets, exchanges, etc).</t>
  <t>receiver/PayID owner: individual or entity receiving the transaction/owner of the PayID<xref target="PAYID-URI"></xref>.</t>
</list></t>

<t>The terms <spanx style="verb">receiver</spanx> and <spanx style="verb">PayID owner</spanx> are used interchangeably.</t>

<t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in <xref target="RFC2119"></xref> and [RFC9174][].</t>

</section>
<section anchor="motivation" title="Motivation">
<t>Basic PayID protocol <xref target="PAYID-PROTOCOL"></xref> specifies a protocol to interact with PayID server and retrieve payment account(s) information resource along with other meta-data corresponding to the queried PayID. The protocol relies on the underlying secure transport (TLS 1.3 <xref target="RFC8446"></xref>) to ensure message integrity and privacy from network attackers. There are at least two assumptions in the security and privacy model of the basic PayID protocol that are less desirable.</t>

<t><list style="numbers">
  <t>Trust requirement between the PayID client and PayID server: As pointed out in the security considerations section of the <xref target="PAYID-PROTOCOL"></xref>, PayID server has full control over the contents of the response message, and may go rogue or be compromised. The PayID client has no way of knowing if the PayID server behaves maliciously. This implicit trust assumption between the PayID client and server is not ideal in the world where the information provided by the PayID server may be used by the PayID client to transmit money.</t>
  <t>Privacy: Per <xref target="PAYID-PROTOCOL"></xref>, anyone can query the PayID server and retrieve the payment account(s) information corresponding to the queried PayID. The PayID server or PayID owner has no way of deploying access control mechanisms since the <spanx style="verb">identity</spanx> of the PayID client and the sender is unknown to the PayID server.</t>
</list></t>

<t>The motivation for verifiable PayID protocol is threefold:</t>

<t><list style="numbers">
  <t>Eliminate implicit trust assumption between the PayID client and server: While it is not possible for the protocol to prevent PayID server from acting maliciously, the best we can do is to allow for mechanisms in the protocol that enables PayID client to prove this misbehaviour to third-parties and potentially hold the PayID server legally accountable for misbehaving.</t>
  <t>Enhance privacy of the PayID protocol by allowing the PayID client to share their and sender's <spanx style="verb">identity</spanx> information with the PayID server. This information could then be used to:
  <list style="symbols">
      <t>Give the PayID owner and/or PayID server the ability to decide if they want to share their payment account(s) information and other resources with the PayID client or the sender.</t>
      <t>Allow for an open standards based way for endpoints to keep verifiable records of their financial transactions, to better meet the needs of accounting practices or other reporting and regulatory requirements.</t>
    </list></t>
  <t>Ensure that if the PayID server is compromised, an attacker can not swap payment address in the payment account information response and redirect funds to the attacker controlled payment network and address. Allow the PayID server or PayID owner to pre-sign <spanx style="verb">PaymentInformation</spanx> in a cold/airgapped system offline instead of online on a hot wallet.</t>
  <t>Allows for non-custodial service providers to run non-custodial PayID service by allowing the PayID owners to digitally sign the <spanx style="verb">PaymentInformation</spanx> resource locally on their device with their off-ledger private keys and send PayID owner's <spanx style="verb">identity</spanx> information in the response. This information can then be used by the PayID client and sender to authenticate the PayID owner and decide if they want to proceed with the transaction.</t>
</list></t>

</section>
<section anchor="verifiable-payid-protocol-specification" title="Verifiable PayID Protocol Specification">
<t>The verifiable PayID protocol is designed along the same design principles as <xref target="PAYID-PROTOCOL"></xref>.</t>

<section anchor="basic-operations" title="Basic Operations">
<t>Following are the basic operations performed by the Verifiable PayID client and PayID server to retrieve <spanx style="verb">PaymentInformation</spanx> resource corresponding to PayID.</t>

<section anchor="payid-client-requesting-the-paymentinformation-resource" title="PayID Client Requesting the PaymentInformation Resource">
<t>When requesting the payment accounts(s) information resource per <xref target="PAYID-PROTOCOL"></xref> that is digitally signed and requires input paramters, the PayID client uses the HTTP <spanx style="verb">POST</spanx> method with path parameter <spanx style="verb">payment-setup-details</spanx> with optional payload in JSON format. We define this resource as <spanx style="verb">PaymentInformation</spanx> resource.</t>

</section>
<section anchor="payid-server-responding-to-the-paymentinformation-resource-request" title="PayID Server Responding to the PaymentInformation Resource Request">
<t>Upon receiving a request for a <spanx style="verb">PaymentInformation</spanx> resource that the PayID server can provide, the PayID server normally returns the requested response. However, if PayID server does not support verifiable PayID protocol, the PayID server MAY send back an appropriate error code (TBD) to indicate to the PayID client that the resource is available via an HTTP <spanx style="verb">GET</spanx> request to an alternate URL.</t>

</section>
</section>
<section anchor="json-payloads" title="JSON Payloads">

<section anchor="payid-client-request-query-body-for-paymentinformation-resource" title="PayID Client Request Query Body for PaymentInformation Resource">
<figure><artwork><![CDATA[
  {
   optional string identity,
   optional string memo
  }
]]></artwork></figure>

<section anchor="identity" title="identity">
<t>The type/value of <spanx style="verb">identity</spanx> field is TBD. We anticipate this being mechanism for the PayID client to transmit their or sender's <spanx style="verb">identity</spanx> information to the PayID server. This information can then be used by the PayID server/PayID owner to 
  * Enhance privacy by exercising access control mechanisms such as authorized access via accept/deny lists, etc. for the <spanx style="verb">PaymentInformation</spanx> or other resources for a PayID. 
  * Record-Keeping</t>

</section>
<section anchor="memo" title="memo">
<t>The type/value of <spanx style="verb">memo</spanx> field is TBD. <spanx style="verb">memo</spanx> field is a placeholder to ensure protocol extensibility. e.g. for the primary use-case of making payments, the PayID client MAY send information such as amount, scale, etc. necessary to make the payment.
  //TBD: The request body parameters will depend on the use-case.</t>

</section>
</section>
<section anchor="payid-server-response-body-for-paymentinformation-resource-request" title="PayID Server Response Body for PaymentInformation Resource Request">
<t>Refer to payment account(s) information resource in <xref target="PAYID-PROTOCOL"></xref>.</t>

</section>
<section anchor="signaturewrapper" title="SignatureWrapper">

<t><spanx style="verb">SignatureWrapper</spanx> is an encapsulating wrapper for any verifiable PayID protocol messages. It allows for the generation of cryptographically signed third-party verifiable proofs of the contents of the messages exchanged between the participating endpoints. We define <spanx style="verb">SignatureWrapper</spanx> as JSON object with the following name/value pairs:</t>

<figure><artwork><![CDATA[
  {
   required string messageType,
   required Message message,
   required string publicKeyType,
   required array publicKeyData,
   required string publicKey,
   required string signature
  }
]]></artwork></figure>

<section anchor="messagetype" title="messageType">
<t>The value of <spanx style="verb">messageType</spanx> is the message type of the signed <spanx style="verb">message</spanx>. <spanx style="verb">messageType</spanx> is essential for future extensibility of the protocol to include more message types. We define the following enum for message types:
    enum messageType
      {
        PaymentInformation
      }</t>

</section>
<section anchor="message" title="message">
<t>The value of <spanx style="verb">message</spanx> includes the contents of the verifiable PayID protocol message of the type <spanx style="verb">messageType</spanx> to be signed.</t>

</section>
<section anchor="publickeytype" title="publicKeyType">
<t>The value of <spanx style="verb">publicKeyType</spanx> is the Public Key Infrastructure (PKI)/identity system being used to identify the signing endpoint. e.g. <spanx style="verb">X509+SHA512</spanx> means an X.509 certificate as described in <xref target="RFC5280"></xref> and SHA512 hash algorithm used to hash the contents of <spanx style="verb">message</spanx> for signing. This field defaults to empty string. We define the following <spanx style="verb">publicKeyType</spanx> values. One can register more in future.</t>

<texttable>
      <ttcol align='left'>publicKeyType</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>X509+SHA512</c>
      <c>A X.509 certificate <xref target="RFC5280"></xref></c>
      <c>pgp+SHA512</c>
      <c>An OpenPGP certificate</c>
      <c>ecdsa+SHA256</c>
      <c>A secp256k1 ECDSA public key <xref target="RFC6979"></xref> <xref target="RFC8422"></xref></c>
</texttable>

</section>
<section anchor="publickeydata" title="publicKeyData">
<t>The value of <spanx style="verb">publicKeyData</spanx> is the PKI-system/identity data used to identify the signing endpoint who creates digital signatures over the hash of the contents of the <spanx style="verb">message</spanx>. e.g. in the case of X.509 certificates, it may contain one or more X.509 certificates as a list upto the root trust certificate. Defaults to empty.</t>

</section>
<section anchor="publickey" title="publicKey">
<t>The value of <spanx style="verb">publicKey</spanx> is the contents of the public key. Defaults to empty.</t>

</section>
<section anchor="signature" title="signature">
<t>The value of <spanx style="verb">signature</spanx> is the digital signature over the hash of the contents of the <spanx style="verb">message</spanx> using the private key corresponding to the public key in <spanx style="verb">publicKey</spanx>. This is a proof that the <spanx style="verb">message</spanx> was signed by the corresponding private key holder.</t>

</section>
</section>
</section>
</section>
<section anchor="custodial-and-non-custodial-payid-service-providers" title="Custodial and Non-Custodial PayID Service Providers">
<t>We anticipate that the most common use-case for retrieving <spanx style="verb">PaymentInformation</spanx> resource is to make transactions. We can categorize the providers of such services as follows: 
* Custodial wallets and exchanges: Custodial wallets and exchanges hold the private keys of their customers on their servers and essentially hold their funds. There is an implicit trust between the custodial service provider and their customers.</t>

<t><list style="symbols">
  <t>Non-Custodial wallets and exchanges: Non-custodial wallets and exchanges do not store their customers’ keys on their servers. The customers hold their private keys locally on their device. [Arguably] there is a no trust requirement between the non-custodial wallets and exchanges and their customers. Since the customers hold the private keys so the wallets are not liable for any consequences coming from the lost, compromised or hacked private keys of the customers. Nor do they need their customers to trust their servers in case wallet's servers go malicious or are compromised.</t>
</list></t>

<t>Notice that the custodial and non-custodial service providers operate under different trust models. To continue operating under the same trust model, verifiable PayID requires slightly different treatment for the two.</t>

</section>
<section anchor="verifiable-payid-protocol-for-custodial-wallets-and-exchanges" title="Verifiable PayID Protocol for Custodial Wallets and Exchanges">

<t>Verifiable PayID protocol flow is similar to that of the Basic PayID protocol <xref target="PAYID-PROTOCOL"></xref> with the following modifications.</t>

<figure><artwork><![CDATA[
Sender  PayID client                                             PayID server    Receiver
  |           |                                                          |            | 
  |PayID, etc.|                                                          |            |
  |---------->|                                                          |            |
  |           |     1.) POST /payment-setup-details request to PayID URL |            |
  |           |--------------------------------------------------------->|            | 
  |           |     2.) 200 Ok                                           |            |
  |           |       Signed PaymentInformation response                 |            |
  |           |<---------------------------------------------------------|  Optional  |
  |           |                                                          |notification| 
  |           |                                                          |----------->|
  |           |                                                          |            | 
]]></artwork></figure>

<section anchor="step-1-preparing-the-http-request-to-payid-url-using-http-post-method" title="Step 1: Preparing the HTTP Request to PayID URL using HTTP POST Method">
<t>A verifiable PayID client issues a query using the HTTP <spanx style="verb">POST</spanx> method to the PayID URL with path parameter <spanx style="verb">payment-setup-details</spanx> and optional body parameters as described above.</t>

</section>
<section anchor="step-2-preparing-the-paymentinformation-response" title="Step 2: Preparing the PaymentInformation Response">
<t>In response, the PayID server returns JSON representation of the <spanx style="verb">PaymentInformation</spanx> resource. <spanx style="verb">PaymentInformation</spanx> resource is the <spanx style="verb">signed</spanx> payment account(s) information message <xref target="PAYID-PROTOCOL"></xref> for the payment-network and environment requested by PayID client in the request <spanx style="verb">Accept</spanx> header field along with other required and optional meta data as <spanx style="verb">message</spanx> field in the <spanx style="verb">SignatureWrapper</spanx>.</t>

<section anchor="preparing-the-payment-accounts-information-message" title="Preparing the payment account(s) information message">
<t><list style="symbols">
  <t>Set <spanx style="verb">payId</spanx> to the value of the PayID in the client query. This is a required field in verifiable PayID protocol.</t>
  <t>Set <spanx style="verb">addresses</spanx> to the value as described in <xref target="PAYID-PROTOCOL"></xref></t>
  <t>Optionally set <spanx style="verb">memo</spanx> to any additional information.</t>
  <t><spanx style="verb">identity</spanx> field is optional.</t>
  <t>Optionally set <spanx style="verb">proofOfControlSignature</spanx> to the value as described in <xref target="PAYID-PROTOCOL"></xref>.</t>
</list></t>

</section>
<section anchor="preparing-signaturewrapper-message" title="Preparing SignatureWrapper message">
<t><list style="symbols">
  <t>Set <spanx style="verb">messageType</spanx> to <spanx style="verb">PaymentInformation</spanx>.</t>
  <t>Set <spanx style="verb">message</spanx> to the value of payment account(s) information message as generated above.</t>
  <t>Set <spanx style="verb">publicKeyType</spanx> to one of the values described in the Section above.</t>
  <t>Set <spanx style="verb">publicKeyData</spanx> to the data corresponding to the value in <spanx style="verb">publicKeyType</spanx>.</t>
  <t>Set <spanx style="verb">publicKey</spanx> to value of the public key of the signing endpoint (PayID server.)</t>
  <t>Sign the <spanx style="verb">message</spanx> using the hash algorithm and the signture scheme corresponding to the value in <spanx style="verb">publicKeyType</spanx></t>
  <t>Set <spanx style="verb">signature</spanx> to the result of the signature operation in the previous step.</t>
</list></t>

<t>Send the signed payment account(s) information message as <spanx style="verb">PaymentInformation</spanx> response to the client.</t>

</section>
</section>
<section anchor="step-3-parse-paymentinformation-response" title="Step 3: Parse PaymentInformation Response">
<t>If the PayID server returns a valid response, the response will contain one or more of the fields defined above. The PayID client will then:</t>

<t><list style="symbols">
  <t>Verify the <spanx style="verb">publicKey</spanx> using the information in the <spanx style="verb">publicKeyType</spanx> and <spanx style="verb">publicKeyData</spanx> in the response.</t>
  <t>Verify the signature retrieved from the <spanx style="verb">signature</spanx> field using the public key verified in the previous step.</t>
  <t>Retrieve payment account(s) information message from the <spanx style="verb">message</spanx> field of the <spanx style="verb">PaymentInformation</spanx> Response.</t>
</list></t>

<t>All the verification steps MUST pass. The PayID client proceeds to the next step only if the previous step passes, otherwise it generates the relevant Error message (//TBD).</t>

</section>
</section>
<section anchor="verifiable-payid-protocol-for-non-custodial-wallets-and-exchanges" title="Verifiable PayID Protocol for Non-Custodial Wallets and Exchanges">

<t>Pre-step at PayID owner's (non-custodial wallet's customer) device locally.
  For each <spanx style="verb">payment-network</spanx> and <spanx style="verb">environment</spanx> as described in <xref target="PAYID-PROTOCOL"></xref> that the PayID owner has a payment address for, generate the following payment account(s) information message 
  * Set <spanx style="verb">payId</spanx> to the value of the PayID. This is a required field in verifiable PayID protocol.
  * Set <spanx style="verb">addresses</spanx> to the value as described in <xref target="PAYID-PROTOCOL"></xref>
  * Optionally set <spanx style="verb">memo</spanx> to any additional information.
  * <spanx style="verb">identity</spanx> field is TBD.
  * <spanx style="verb">proofOfControlSignature</spanx> is optional described in <xref target="PAYID-PROTOCOL"></xref> and is not required in this case.</t>

<t>For each payment account(s) information message, prepare <spanx style="verb">SignatureWrapper</spanx> message
  * Set <spanx style="verb">messageType</spanx> to <spanx style="verb">PaymentInformation</spanx>.
  * Set <spanx style="verb">message</spanx> to the value of payment account(s) information message as generated above.
  * Set <spanx style="verb">publicKeyType</spanx> to one of the values described in Section X.
  * Set <spanx style="verb">publicKeyData</spanx> to the data corresponding to the value in <spanx style="verb">publicKeyType</spanx>.
  * Set <spanx style="verb">publicKey</spanx> to value of the public key of the signing endpoint (PayID server.)
  * Sign the <spanx style="verb">message</spanx> using the hash algorithm and the signture scheme corresponding to the value in <spanx style="verb">publicKeyType</spanx>
  * Set <spanx style="verb">signature</spanx> to the result of the signature operation in the previous step.</t>

<t>This signed payment account(s) information message is then securely transferred to the non-custodial PayID server and stored by the PayID server as <spanx style="verb">PaymentInformation</spanx> resource.</t>

<section anchor="discussion-section-on-distributing-payid-owners-keys" title="Discussion Section on distributing PayID owner's keys">
<t>In this subsection, we discuss potential ways to distribute the keys of the PayID owner used to sign the message. Once we reach a consensus, it will be added to the relevant sections of this document and this subsection will be removed. Following are the two possible approaches:</t>

<section anchor="identity-field-in-payment-accounts-information-message" title="identity field in payment account(s) information message">
<t>The following table enumerates the possible ways to share the public key of PayID owner using <spanx style="verb">identity</spanx> field.</t>

<texttable>
      <ttcol align='left'>identity</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>Global Identifier (GiD) <xref target="GiD"></xref></c>
      <c>digital identifier</c>
      <c>Human Universally Unique Identifier (Human UUID) <xref target="HUUID"></xref></c>
      <c>digital identifier</c>
      <c>Digital Identifier (DID) <xref target="DID"></xref></c>
      <c>digital identifier</c>
      <c>Certificate</c>
      <c>attested certificate that associates digital identifier to PayID and public key</c>
      <c>URL</c>
      <c>URL for secure retrieval of public key of the PayID owner</c>
      <c>Public key</c>
      <c>out-of-band preshared public key between PayID client and PayID owner</c>
</texttable>

<t><list style="symbols">
  <t>Digital identifier: A global digital identifier that uniquely associates the <spanx style="verb">PayID owner's identity</spanx> as defined by the identifier (GiD, HUID, DID, etc.) to the <spanx style="verb">PayID</spanx> and <spanx style="verb">public key</spanx>. The PayID client can then verify the <spanx style="verb">public key</spanx> using the digital identifier. This could be a direct retrieval of the corresponding <spanx style="verb">public key</spanx> from digital identity service provider if PayID is a part of that digital identifier.</t>
  <t>Certificate: An attested certificate that associates digital identifier such as GiD, Human UUID, DID, etc. to the <spanx style="verb">PayID</spanx> and <spanx style="verb">public key</spanx>.</t>
  <t>URL: A URL for secure retrieval of <spanx style="verb">public key</spanx> of the PayID owner.</t>
  <t>Pre-shared public Key: The public key that has been pre-shared out-of-band between the PayID client and PayID owner.</t>
</list></t>

</section>
<section anchor="embed-the-public-key-of-payid-owner-in-the-payid" title="Embed the public key of PayID owner in the PayID">
<t>PayID <xref target="PAYID-URI"></xref> could support non-custodial systems with a fairly simple extension to the protocol to run non-custodial PayID servers that could not be hacked or tricked into sending money to the wrong place. The idea is to reserve the hostname <spanx style="verb">pkh</spanx> for <spanx style="verb">public key hashes</spanx> and support a PayID format like <spanx style="verb">public_key_hash</spanx>$pkh.provider.domain. PayID client implementations would require that any <spanx style="verb">PaymentInformation</spanx> resource that resulted from the PayID of that form be signed with the <spanx style="verb">private key</spanx> corresponding to that <spanx style="verb">public key hash</spanx>. So only a <spanx style="verb">PaymentInformation</spanx> signed by the owner of the PayID would work.</t>

<t>The caveat is that that PayID format is not human-readable anymore. The solution is simple: the non-custodial wallets and exchanges would provide a non-human-readable PayID of the form <spanx style="verb">public_key_hash</spanx>$pkh.provider.domain, but the customers may get a human-readable PayID from another trusted service providers (say from their email provider) that maps to the non-human-readable PayID they got from their non-custodial service-provider. Non-custodial service-providers could even automate this process by allowing the user to choose a mapping provider.</t>

<t>// Details TBD</t>

</section>
</section>
<section anchor="step-1-preparing-http-request-to-payid-url-using-http-post-method" title="Step 1: Preparing HTTP Request to PayID URL using HTTP POST Method">
<t>Same as in the previous section.</t>

</section>
<section anchor="step-2-preparing-paymentinformation-response" title="Step 2: Preparing PaymentInformation Response">

<t>The PayID server MUST parse the request body. The protocol does not provide specification on how the PayID server MAY use this information.</t>

<t>If the PayID server were to proceed, the PayID server retrieves the pre-signed <spanx style="verb">PaymentInformation</spanx> response to the PayID client.</t>

</section>
<section anchor="step-3-parsing-the-paymentinformation-response" title="Step 3: Parsing the PaymentInformation Response">
<t>The PayID client follows the same verifiation steps as in the previous section. Details to be decided based on <spanx style="verb">identity</spanx> solution.</t>

</section>
</section>
<section anchor="example-use-of-verifiable-payid-protocol" title="Example Use of Verifiable PayID Protocol">
<t>This section shows sample use of verifiable PayID protocol in several hypothetical scenarios.</t>

<section anchor="verifiable-payid-protocol-by-a-custodial-wallet-as-payid-server" title="Verifiable PayID Protocol by a Custodial Wallet as PayID server">
<t>Suppose Alice (sender) wishes to send a friend Bob (PayID owner) some XRP from a web-based wallet provider (PayID client) that Alice has an account on. Alice would log-in to the wallet provider and enter Bob's PayID (say, <spanx style="verb">bob$receiver.example.com</spanx>) into the wallet UI to start the payment.</t>

<t>The Wallet application would first discover the PayID URL for the PayID service-provider using one of the mechanisms described in PayID discovery protocol <xref target="PAYID-DISCOVERY"></xref>.</t>

<t>The Wallet application would then issue an HTTPS POST request:</t>

<figure><artwork><![CDATA[
 POST /users/bob/payment-setup-details HTTP/1.1
 Host: www.receiver.example.com
 Accept: application/xrpl-testnet+json
 PayID-version: 1.0

 {
  "identity": "TBD",
  "memo": "Any additional required information"
 }
]]></artwork></figure>

<t>Bob's wallet who is a custodial PayID server wallet might respond like this:</t>

<figure><artwork><![CDATA[
 HTTP/1.1 200 OK
 Content-Type: application/json
 Content-Length: 403
 PayID-version: 1.0
 Cache-Control: max-age=0
 Server: Apache/1.3.11
{
"messageType" : "PaymentInformation",
"message" :
 {
   "payId" : "bob$receiver.example.com",
   "addresses" :
   [
     {  
       "paymentNetwork" : "xrpl",
       "environment" : "testnet",
       "addressDetailsType" : "CryptoAddressDetails",
       "addressDetails" : {
                    "address" : "XTVQWr6BhgBLW2jbFyqqufgq8T9eN7KresB684ZSHKQ3oDth"
            }
      }
    ],
    "memo" : "Additional optional Information",
    "proofOfControlSignature" : 
    {
      "publicKey" : "sdkfhjasdvkakjnasdv",
      "payId" : "bob$receiver.example.com", 
      "hashAlgorithm" : "SHA512",
      "signature" : "9743b52063cd84097a65d1633f5c74f5"
    }
 }
"publicKeyType" : "X509+SHA512",
"publicKeyData": [],
"publicKey" : "00:c9:22:69:31:8a:d6:6c:ea:da:c3:7f:2c:ac:a5:af:c0:02:ea:81:cb:65:b9:fd:0c:6d:46:5b:c9:1e:9d:3b:ef...",
"signature" : "8b:c3:ed:d1:9d:39:6f:af:40:72:bd:1e:18:5e:30:54:23:35..."
}
]]></artwork></figure>

<t>In the above example we see that Bob's custodial PayID server wallet returned signed X-Addreess on XRPL testnet identified by PayID <spanx style="verb">bob$receiver.example.com</spanx>. This is because Alice's wallet asked for XRPL and testnet payment accounts corresponding to the PayID in the <spanx style="verb">Accept</spanx> header.</t>

<t>Alice's Wallet MAY then use the payment account information to make payments.</t>

</section>
<section anchor="verifiable-payid-protocol-by-a-non-custodial-wallet-as-payid-server" title="Verifiable PayID Protocol by a Non-Custodial Wallet as PayID Server">
<t>Consider the same scenario as above.</t>

<t>Bob's wallet who is a non-custodial PayID server might respond like this:</t>

<figure><artwork><![CDATA[
 HTTP/1.1 200 OK
 Content-Type: application/json
 Content-Length: 403
 PayID-version: 1.0
 Cache-Control: max-age=0
 Server: Apache/1.3.11
{
"messageType" : "PaymentInformation",
"message" :
 {
   "payId" : "bob$receiver.example.com",
   "addresses" :
   [
     {  
       "paymentNetwork" : "xrpl",
       "environment" : "testnet",
       "addressDetailsType" : "CryptoAddressDetails",
       "addressDetails" : {
          "address" : "XTVQWr6BhgBLW2jbFyqqufgq8T9eN7KresB684ZSHKQ3oDth"
        }
      }
    ],
    "memo" : "Additional optional Information",
    "identity" : "TBD",
 }
"signature" : "TBD"
}
]]></artwork></figure>

<t>In the above example, the <spanx style="verb">PaymentInformation</spanx> resource is a pre-signed message with the off-ledger private keys of the PayID owner Bob. Bob's non-custodial wallet retrieves this response and sends to the PayID client.</t>

<t>//TODO Add example for PayID owner's public key embedded in PayID.</t>

</section>
</section>
<section anchor="security-considerations" title="Security Considerations">
<t>This security considerations section only considers verifiable PayID clients and servers bound to implementations as defined in this document.</t>

<t>The security guarantees mentioned in <xref target="PAYID-PROTOCOL"></xref> applies to verifiable PayID protocol. In this section we discuss security model for verifiable PayID protocol.</t>

<section anchor="fully-malicious-adversary-model-for-payid-client-wallet-and-custodial-wallets-and-exchanges-as-payid-servers" title="Fully-Malicious Adversary Model for PayID Client Wallet and Custodial Wallets and Exchanges as PayID Servers">

<t>While the verifiable PayID protocol operates between a PayID client and a PayID server, there are actually four parties to any payment. The other two parties are the sender of the payment whose funds are being transferred and the PayID owner or the receiver of the payment who the sender wishes to pay.</t>

<t>In the current security model, there is necessarily some existing trust between the sender and the sender's wallet. The sender's wallet is holding the sender's private keys and consequently their funds before the payment is made. Similarly, there is necessarily some existing trust between the receiver and their custodial wallet since the receiver has directed that the custodial wallet receive their funds.</t>

<t>Verifiable PayID protocol provides stronger security guarantee: The ideal scenario that we strive for is that the sender should be able to hold the PayID client wallet legally accountable if the institution provably mishandles their funds. Similarly, the PayID owner/receiver should be able to hold the PayID server wallet legally accountable if their funds are mishandled. However, this mechanism requires that it be possible for either wallet to establish that it acted properly and that the other wallet acted improperly.</t>

<t>Of course, the preferred outcome of any payment is that nothing goes wrong and both the sender and PayID owner/receiver of the payment are satisfied that the payment took place as agreed. A less desirable outcome is that the payment cannot take place for some reason and the sender still has their money and understands why the payment cannot take place.</t>

<t>While the protocol cannot possibly prevent the PayID client wallet from sending the funds to the wrong address or the PayID server wallet from receiving the funds but refusing to release them to the PayID owner/receiver, it is vital that the institutions not be able to plausibly blame each other for a failure where the sender has been debited but the PayID client/wallet has not been credited.</t>

<t>Accordingly, the security model of verifiable PayID protocol permits four acceptable outcomes:</t>

<t><list style="numbers">
  <t>The payment succeeds, the sender is debited, and the PayID owner/receiver is credited.</t>
  <t>The payment fails, the sender is not debited, and the PayID owner/receiver is not credited.</t>
  <t>The payment fails, the sender is debited, the PayID owner/receiver is not credited, the sender can show that the PayID client wallet did not follow the protocol.</t>
  <t>The payment fails, the sender is debited, the PayID owner/receiver is not credited, the sender can show the receiver that their PayID server wallet did not follow the protocol.</t>
</list></t>

<t>Again, the protocol cannot possibly prevent outcomes 3 or 4 because the PayID client wallet can always send the money to the wrong address and the PayID server wallet can always refuse to credit the PayID owner/receiver. It is, however, critical that the PayID client and PayID server wallets not need to trust each other to ensure that one of these four outcomes occurs and that they cannot point blame at each other.</t>

<section anchor="cryptographic-proofs" title="Cryptographic Proofs">

<t>//TODO</t>

</section>
</section>
<section anchor="fully-compromisable-custodial-payid-server-wallet-hotalways-online-systems-adding-another-layer-of-security" title="Fully Compromisable Custodial PayID Server Wallet (hot/always online systems): Adding another Layer of Security.">

<t>Verifiable PayID protocol's security model assumes that the online servers can be physically or remotely compromised by an adversary. These are the most attractive attack vectors. There is sufficient evidence that hot/always online systems are more vulnerable.</t>

<t>There are multiple cryptogrpahic operations that the PayID server wallet MUST perform to establish secure communication channels, to generate signed messages as verifiable cryptogrpahic proofs, etc.</t>

<t>These operations have very different security requirements and compromising the cryptographic keys required for these operations have different security implications.</t>

<t><list style="symbols">
  <t>High risk impersonation attack to steal funds: If the PayID server wallet’s cryptographic keys used to sign <spanx style="verb">PaymentInformation</spanx> resource are compromised, an attacker may impersonate as the PayID server wallet and sign malicious mappings (‘Receiver's PayID → attacker controlled payment address’) to send to the PayID client wallet. This may lead to indirection of funds by the PayID client wallet to the attacker controlled address. Therefore, it is extremely important to keep these keys safe offline.</t>
  <t>Lower-risk impersonation attacks: An attacker can never steal funds if only cryptographic keys used to establish secure network connection between the PayID client wallet and PayID server wallet are compromised.</t>
</list></t>

<t>These differing security implications warrant a separation of generating cryptographically signed proofs and storing the cryptographic keys used to perform these two operations. Some observations that inform us on how we can deal with this is that:
  * generating the cryptographic signatures on <spanx style="verb">PaymentInformation</spanx> resource need not be an online operation. This can be performed offline in a safe cold system with a separate set of keys,</t>

<t><list style="symbols">
  <t>All other cryptographic operations need to be performed online such as signing any additional information needed to fulfil the payment or establishing secure communication channel.</t>
</list></t>

<t>Based on these observations, we propose to maintain two separate systems (hot and cold) and two separate sets of cryptographic keys for the two operations.</t>

<t>We propose that the PayID client wallet and PayID server wallet SHOULD follow best practices to reduce the attack surface and be more robust.</t>

<t>//TODO Key Management sub-section.</t>

</section>
<section anchor="security-model-for-non-custodial-payid-server-wallets" title="Security Model for Non-Custodial PayID Server Wallets">

<t>In the current security model, non-custodial wallets do not store their customers’ keys on their servers. The customers hold their private keys on their device. There is a no trust requirement between the service provided by the non-custodial wallets and the customers of this service. Since the customers hold the private keys:
  * the wallets are not liable for any consequences coming from the lost, compromised or hacked private keys of the customers.
  * the non-custodial wallets do not require their customers to trust their servers in case wallets servers go malicious or are compromised.</t>

<t>Verifiable PayID protocol preserves this trust model. For the non-custodial PayID server wallets this means that</t>

<t><list style="symbols">
  <t>On the receiving side of the payment (as a PayID server) non-custodial wallets have no liability on their end for providing <spanx style="verb">PaymentInformation</spanx>, i.e. the <spanx style="verb">PayID --&gt; Payment Address</spanx> mappings for their customers that is signed with the private key of the non-custodial PayID server wallet. The PayID owners or the customers can generate this signed mapping with their own off-ledger private key locally on their app/device. The PayID client can easily verify this signature based on the trust relationship between the sender of the payment (PayID client wallet’s customer) and the receiver (non-custodial PayID server's wallet). The non-custodial PayID server wallet has no role whatsoever. This eliminates any risk of the non-custodial PayID server wallet having lost their private keys, going malicious or getting hacked, etc. because if this happens then their customers might lose funds.</t>
</list></t>

</section>
</section>
<section anchor="privacy-considerations" title="Privacy Considerations">
<t>All privacy guarantess in Privacy Considerations section of <xref target="PAYID-PROTOCOL"></xref> applies to Verifiable PayID protocol and further addresses some of the privacy issues mentioned in <xref target="PAYID-PROTOCOL"></xref>.</t>

<section anchor="access-control" title="Access Control">
<t>PayID protocol MUST not be used to provide <spanx style="verb">PaymentInformation</spanx> or any pther resources corresponding to a PayID unless providing that data via PayID protocol by the relevant PayID server was explicitly authorized by the PayID owner. If PayID owner wishes to limit access to information, PayID servers MAY provide an interface by which PayID owners can select which information is exposed through the PayID server interface. For example, PayID servers MAY allow PayID owners to mark certain data as <spanx style="verb">public</spanx> and then utilize that marking as a means of determining what information to expose via PayID protocol. The PayID servers MAY also allow PayID owners to provide a whitelist of users who are authorized to access the specific information. In such a case, the PayID server MUST authenticate the PayID client. The additional <spanx style="verb">identity</spanx> field in the PayID client query request allows for this.</t>

</section>
</section>
<section anchor="iana-considerations" title="IANA Considerations">
<t>//TODO</t>

</section>
<section anchor="acknowledgments" title="Acknowledgments">
<t>//TODO</t>

</section>


  </middle>

  <back>

    <references title='Normative References'>

&RFC2119;
&RFC2818;
&RFC8446;
&RFC7258;
&RFC5280;
&RFC6979;
&RFC8422;
<reference anchor="DID" target="https://www.didalliance.org/">
  <front>
    <title>Digital Identity Alliance</title>
    <author >
      <organization></organization>
    </author>
    <date year="n.d."/>
  </front>
</reference>
<reference anchor="GiD" target="https://www.global.id/">
  <front>
    <title>Global identity</title>
    <author >
      <organization></organization>
    </author>
    <date year="n.d."/>
  </front>
</reference>
<reference anchor="HUUID" target="https://github.com/codetsunami/HumanUUID">
  <front>
    <title>Human Universally Unique Identifier</title>
    <author >
      <organization></organization>
    </author>
    <date year="n.d."/>
  </front>
</reference>
<reference anchor="PAYID-URI" target="https://tbd.example.com/">
  <front>
    <title>The 'payid' URI Scheme</title>
    <author initials="D." surname="Fuelling" fullname="David Fuelling">
      <organization></organization>
    </author>
    <date year="n.d."/>
  </front>
</reference>
<reference anchor="PAYID-DISCOVERY" >
  <front>
    <title>PayID Discovery</title>
    <author initials="D." surname="Fuelling" fullname="David Fuelling">
      <organization></organization>
    </author>
    <date year="n.d."/>
  </front>
</reference>
<reference anchor="PAYID-PROTOCOL" >
  <front>
    <title>PayID Protocol</title>
    <author initials="D." surname="Schwartz" fullname="David Schwartz">
      <organization></organization>
    </author>
    <date year="n.d."/>
  </front>
</reference>


    </references>

    <references title='Informative References'>

&RFC4732;


    </references>



  </back>

<!-- ##markdown-source:
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
o9l4ejg+PMarT47G08n40cPx5Ol4Fo8Pp+NH8fjBo/HDCQ54pMdP4/HJZKxn
o9HIwhQu/8kEx9fxOD6im5+OH81wigeH48fH40mMgxw9GT/U45PD8cMH4+OT
8clDHG3AuLBpAc3JLCXEwaC90eJ8smjcLAq5KAJdGLYXfxzSXkIfAPNbby9f
KdmPdTDHK0rrV9118nWip1FljZdaVkcG4wSod2kWSg7ITI0IvulOOQWFYo06
OLYH7IyiWtH0JmVamc7mdM2eBXSoxp6A38qW60rm1/acHEofkKKgHom1aWxt
RjoQxunJQZ9y25Cn+l/N9r+aTXXc8gX02X+PLnP2oAoNwt+6hCZed/KvS/zt
91cQBX1hfA/ZZojvaQjemUGF/TmSTdoVyArccu4rVDdkQ5fNdHrgg8HBwfXF
2YUCPDrBPgtbrMGMXvhPYzg59jwQKjy6si1ZnwctWQe107u5YytGEu0101du
bpuUcWh4AnKUj+Y2QqheJqbZv5gkHcUILUDzKioiEDjYaxXZI8/6y1hQXLEP
3F/QU2fQbda5zp67Sbmt7sZmnSNbxf9tlabr4Wt3/Os0puwm+Huv3SiXfq8g
qwoAOfcUezXVhUHscBvPuuqtKxoh58WMS0VEYTSG2vgF2oJ2i+1EPC0rys7O
sNGm9/oFDHQ7JxupJJFPTMrbLpySEpemcbZCRZQrqC0800pdB/FObkvgl1/Y
QhN/Z4k7bqV2x6D+lHUgBG4YecYR0JbOsYVUtgvHuLU0pUkwN4JBEv0xkW5o
rdOkMlnYFNbpZ4lzhz/iFHga0obQ3OVWmz937hEP4JX1WVeAYJYXob2CfVHB
ysHDl3Q8TtqxfvqKHHobRzt9GVY3y3V3YySIs5SUxGodb3TSj+73V0O06T/2
516iYUrMEumiQyaMXdKojrQxEGj7gry9ZWFZpysc5eo3q9Dk2IoibBhra3cZ
/q6+sVInis0pk7Jy7ZjxwC32k4U9HKccha0PK4dU8tn8wKH0XtBCs70fNMc3
uNccRLHXxY376ro2X+74J7fuo3xe0CZYXpcgM2NrAIMTJtTEgx+JiBOwfRu2
UhduEtzn/tN8Y7K0txI/XMwwIVHYSuyVe/1DXpVT5GDsyVqLIUdZTMIgX88x
Es9pRUrF5qLIvf3aifOGTEGEGVBXhlwcB7+9XOb5B05bko0+BycJsHra6LHu
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

-->

</rfc>

