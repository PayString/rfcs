<?xml version="1.0" encoding="utf-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.3.8 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!ENTITY RFC2119 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC2818 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2818.xml">
<!ENTITY RFC8446 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8446.xml">
<!ENTITY RFC7258 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7258.xml">
<!ENTITY RFC5280 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.5280.xml">
<!ENTITY RFC6979 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6979.xml">
<!ENTITY RFC8422 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8422.xml">
<!ENTITY RFC4732 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.4732.xml">
]>

<?rfc toc="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>
<?rfc comments="yes"?>

<rfc docName="draft-aanchal-verifiable-payid-protocol-01" category="std">

  <front>
    <title>Verifiable PayID Protocol</title>

    <author initials="A." surname="Malhotra" fullname="Aanchal Malhotra">
      <organization>Ripple</organization>
      <address>
        <postal>
          <street>315 Montgomery Street</street>
          <city>San Francisco</city>
          <region>CA</region>
          <code>94104</code>
          <country>US</country>
        </postal>
        <phone>-----------------</phone>
        <email>amalhotra@ripple.com</email>
        <uri>https://www.ripple.com</uri>
      </address>
    </author>
    <author initials="D." surname="Schwartz" fullname="David Schwartz">
      <organization>Ripple</organization>
      <address>
        <postal>
          <street>315 Montgomery Street</street>
          <city>San Francisco</city>
          <region>CA</region>
          <code>94104</code>
          <country>US</country>
        </postal>
        <phone>-----------------</phone>
        <email>david@ripple.com</email>
        <uri>https://www.ripple.com</uri>
      </address>
    </author>

    <date year="2020" month="July" day="17"/>

    <area>security</area>
    
    

    <abstract>


<t>This specification defines the Verifiable PayID protocol - an extension to <xref target="PAYID-PROTOCOL"></xref> that aims to provide payment account(s) information associated with a PayID <xref target="PAYID-URI"></xref> while allowing involved parties to exchange <spanx style="verb">identity</spanx> information and provides third-party verifiable cryptographic proof trail of the entire communication. More specifically, the Verifiable PayID protocol provides the following enhancements to the Basic PayID protocol<xref target="PAYID-PROTOCOL"></xref>.</t>

<t><list style="symbols">
  <t>Verifiable Custodial PayID service: It allows custodial wallets and exchanges to send payment account(s) address information and other resources digitally signed with their off-ledger private key.</t>
  <t>Verifiable Non-Custodial PayID service: It allows non-custodial wallets and exchanges to send payment account(s) address information digitally signed with the off-ledger private key of the PayID owner along with PayID owner's <spanx style="verb">identity</spanx> information.</t>
  <t>Privacy-enhanced PayID service: It allows PayID service providers (both custodial and non-custodial) to deploy appropriate access control mechanisms by allowing the PayID clients or senders to transmit their <spanx style="verb">identity</spanx> information for authentication.</t>
</list></t>



    </abstract>


    <note title="Feedback">


<t>This specification is a draft proposal, and is part of the
  <eref target="https://payid.org/">PayID Protocol</eref> initiative. Feedback related to this
  document should be sent in the form of a Github issue at:
  https://github.com/payid-org/rfcs/issues.</t>


    </note>


  </front>

  <middle>


<section anchor="terminology" title="Terminology">
<t>This protocol can be referred to as the <spanx style="verb">Verifiable PayID Protocol</spanx>. It uses the following terminology.</t>

<t><list style="symbols">
  <t>endpoint: either the client or the server of the connection.</t>
  <t>sender: individual or entity originating the transaction.</t>
  <t>PayID client: the endpoint that initiates PayID protocol/sending side of the transaction.</t>
  <t>PayID server: the endpoint that returns payment account(s) information/receiving side of the transaction (custodial or non-custodial wallets, exchanges, etc).</t>
  <t>receiver/PayID owner: individual or entity receiving the transaction/owner of the PayID<xref target="PAYID-URI"></xref>.</t>
</list></t>

<t>The terms <spanx style="verb">receiver</spanx> and <spanx style="verb">PayID owner</spanx> are used interchangeably.</t>

<t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in <xref target="RFC2119"></xref> and [RFC9174][].</t>

</section>
<section anchor="motivation" title="Motivation">
<t>Basic PayID protocol <xref target="PAYID-PROTOCOL"></xref> specifies a protocol to interact with a PayID server and retrieve a payment account(s) information resource along with other meta-data corresponding to the queried PayID. The protocol relies on the underlying secure transport (TLS 1.3 <xref target="RFC8446"></xref>) to ensure message integrity and privacy from network attackers. There are at least two assumptions in the security and privacy model of the basic PayID protocol that are less desirable.</t>

<t><list style="numbers">
  <t>Trust requirement between the PayID client and PayID server: As pointed out in the security considerations section of the <xref target="PAYID-PROTOCOL"></xref>, PayID server has full control over the contents of the response message, and may go rogue or be compromised. The PayID client has no way of knowing if the PayID server behaves maliciously. This implicit trust assumption between the PayID client and server is not ideal in the world where the information provided by the PayID server may be used by the PayID client to transmit money.</t>
  <t>Privacy: Per <xref target="PAYID-PROTOCOL"></xref>, anyone can query the PayID server and retrieve the payment account(s) information corresponding to the queried PayID. The PayID server or PayID owner has no way of deploying access control mechanisms since the <spanx style="verb">identity</spanx> of the PayID client and the sender is unknown to the PayID server.</t>
</list></t>

<t>The motivation for the Verifiable PayID protocol is threefold:</t>

<t><list style="numbers">
  <t>Eliminate implicit trust assumption between the PayID client and server: While it is not possible for the protocol to prevent PayID server from acting maliciously, the best we can do is to allow for mechanisms in the protocol that enables PayID client to prove this misbehaviour to third-parties and potentially hold the PayID server legally accountable for misbehaving.</t>
  <t>Enhance privacy of the PayID protocol by allowing the PayID client to share their and sender's <spanx style="verb">identity</spanx> information with the PayID server. This information could then be used to:
  <list style="symbols">
      <t>Give the PayID owner and/or PayID server the ability to decide if they want to share their payment account(s) information and other resources with the PayID client or the sender.</t>
      <t>Allow for an open standards based way for endpoints to keep verifiable records of their financial transactions, to better meet the needs of accounting practices or other reporting and regulatory requirements.</t>
    </list></t>
  <t>Ensure that if the PayID server is compromised, an attacker cannot swap a payment address in the payment account information response and redirect funds to the attacker-controlled payment network and address. Allow the PayID server or PayID owner to pre-sign <spanx style="verb">PaymentInformation</spanx> in a cold/airgapped system offline instead of online on a hot wallet.</t>
  <t>Allows for non-custodial service providers to run non-custodial PayID service by allowing the PayID owners to digitally sign the <spanx style="verb">PaymentInformation</spanx> resource locally on their device with their off-ledger private keys and send PayID owner's <spanx style="verb">identity</spanx> information in the response. This information can then be used by the PayID client and sender to authenticate the PayID owner and decide if they want to proceed with the transaction.</t>
</list></t>

</section>
<section anchor="verifiable-payid-protocol-specification" title="Verifiable PayID Protocol Specification">
<t>The Verifiable PayID protocol is designed along the same design principles as <xref target="PAYID-PROTOCOL"></xref>.</t>

<section anchor="basic-operations" title="Basic Operations">
<t>Following are the basic operations performed by the verifiable PayID client and PayID server to retrieve <spanx style="verb">PaymentInformation</spanx> resource corresponding to PayID.</t>

<section anchor="payid-client-requesting-the-paymentinformation-resource" title="PayID Client Requesting the PaymentInformation Resource">
<t>When requesting the payment accounts(s) information resource per <xref target="PAYID-PROTOCOL"></xref> that is digitally signed and requires input parameters, the PayID client uses the HTTP <spanx style="verb">POST</spanx> method with path parameter <spanx style="verb">payment-setup-details</spanx> with an optional payload in JSON format. We define this resource as a <spanx style="verb">PaymentInformation</spanx> resource.</t>

</section>
<section anchor="payid-server-responding-to-the-paymentinformation-resource-request" title="PayID Server Responding to the PaymentInformation Resource Request">
<t>Upon receiving a request for a <spanx style="verb">PaymentInformation</spanx> resource that the PayID server can provide, the PayID server normally returns the requested response. However, if PayID server does not support the Verifiable PayID protocol, the PayID server MAY send back an appropriate error code (TBD) to indicate to the PayID client that the resource is available via an HTTP <spanx style="verb">GET</spanx> request to an alternate URL.</t>

</section>
</section>
<section anchor="json-payloads" title="JSON Payloads">

<section anchor="payid-client-request-query-body-for-paymentinformation-resource" title="PayID Client Request Query Body for PaymentInformation Resource">
<figure><artwork><![CDATA[
  {
   optional string identity,
   optional string memo
  }
]]></artwork></figure>

<section anchor="identity" title="identity">
<t>The type/value of the <spanx style="verb">identity</spanx> field is TBD. We anticipate this being a mechanism for the PayID client to transmit their or the sender's <spanx style="verb">identity</spanx> information to the PayID server. This information can then be used by the PayID server/PayID owner to
  * Enhance privacy by exercising access control mechanisms such as authorized access via accept/deny lists, etc. for the <spanx style="verb">PaymentInformation</spanx> or other resources for a PayID.
  * Record-Keeping</t>

</section>
<section anchor="memo" title="memo">
<t>The type/value of the <spanx style="verb">memo</spanx> field is TBD. <spanx style="verb">memo</spanx> field is a placeholder to ensure protocol extensibility. e.g. for the primary use-case of making payments, the PayID client MAY send information such as amount, scale, etc. necessary to make the payment.
  //TBD: The request body parameters will depend on the use-case.</t>

</section>
</section>
<section anchor="payid-server-response-body-for-paymentinformation-resource-request" title="PayID Server Response Body for PaymentInformation Resource Request">
<t>Refer to the payment account(s) information resource in <xref target="PAYID-PROTOCOL"></xref>.</t>

</section>
<section anchor="signaturewrapper" title="SignatureWrapper">

<t><spanx style="verb">SignatureWrapper</spanx> is an encapsulating wrapper for any verifiable PayID protocol messages. It allows for the generation of cryptographically signed third-party verifiable proofs of the contents of the messages exchanged between the participating endpoints. We define <spanx style="verb">SignatureWrapper</spanx> as JSON object with the following name/value pairs:</t>

<figure><artwork><![CDATA[
  {
   required string messageType,
   required Message message,
   required string publicKeyType,
   required array publicKeyData,
   required string publicKey,
   required string signature
  }
]]></artwork></figure>

<section anchor="messagetype" title="messageType">
<t>The value of <spanx style="verb">messageType</spanx> is the message type of the signed <spanx style="verb">message</spanx>. <spanx style="verb">messageType</spanx> is essential for future extensibility of the protocol to include more message types. We define the following enum for message types:
    enum messageType
      {
        PaymentInformation
      }</t>

</section>
<section anchor="message" title="message">
<t>The value of <spanx style="verb">message</spanx> includes the contents of the Verifiable PayID protocol message of the type <spanx style="verb">messageType</spanx> to be signed.</t>

</section>
<section anchor="publickeytype" title="publicKeyType">
<t>The value of <spanx style="verb">publicKeyType</spanx> is the Public Key Infrastructure (PKI)/identity system being used to identify the signing endpoint. e.g. <spanx style="verb">X509+SHA512</spanx> means an X.509 certificate as described in <xref target="RFC5280"></xref> and SHA512 hash algorithm used to hash the contents of <spanx style="verb">message</spanx> for signing. This field defaults to empty string. We define the following <spanx style="verb">publicKeyType</spanx> values. One can register more in future.</t>

<texttable>
      <ttcol align='left'>publicKeyType</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>X509+SHA512</c>
      <c>A X.509 certificate <xref target="RFC5280"></xref></c>
      <c>pgp+SHA512</c>
      <c>An OpenPGP certificate</c>
      <c>ecdsa+SHA256</c>
      <c>A secp256k1 ECDSA public key <xref target="RFC6979"></xref> <xref target="RFC8422"></xref></c>
</texttable>

</section>
<section anchor="publickeydata" title="publicKeyData">
<t>The value of <spanx style="verb">publicKeyData</spanx> is the PKI-system/identity data used to identify the signing endpoint who creates digital signatures over the hash of the contents of the <spanx style="verb">message</spanx>. e.g. in the case of X.509 certificates, it may contain one or more X.509 certificates as a list upto the root trust certificate. Defaults to empty.</t>

</section>
<section anchor="publickey" title="publicKey">
<t>The value of <spanx style="verb">publicKey</spanx> is the contents of the public key. Defaults to empty.</t>

</section>
<section anchor="signature" title="signature">
<t>The value of <spanx style="verb">signature</spanx> is the digital signature over the hash of the contents of the <spanx style="verb">message</spanx> using the private key corresponding to the public key in <spanx style="verb">publicKey</spanx>. This is a proof that the <spanx style="verb">message</spanx> was signed by the corresponding private key holder.</t>

</section>
</section>
</section>
</section>
<section anchor="custodial-and-non-custodial-payid-service-providers" title="Custodial and Non-Custodial PayID Service Providers">
<t>We anticipate that the most common use-case for retrieving the <spanx style="verb">PaymentInformation</spanx> resource is to make transactions. We can categorize the providers of such services as follows:
* Custodial wallets and exchanges: Custodial wallets and exchanges hold the private keys of their customers on their servers and essentially hold their funds. There is an implicit trust between the custodial service provider and their customers.</t>

<t><list style="symbols">
  <t>Non-Custodial wallets and exchanges: Non-custodial wallets and exchanges do not store their customers’ keys on their servers. The customers hold their private keys locally on their device. [Arguably] there is a no trust requirement between the non-custodial wallets and exchanges and their customers. Since the customers hold the private keys so the wallets are not liable for any consequences coming from the lost, compromised or hacked private keys of the customers. Nor do they need their customers to trust their servers in case wallet's servers go malicious or are compromised.</t>
</list></t>

<t>Notice that the custodial and non-custodial service providers operate under different trust models. To continue operating under the same trust model, verifiable PayID requires slightly different treatment for custodial and non-custodial service providers.</t>

</section>
<section anchor="verifiable-payid-protocol-for-custodial-wallets-and-exchanges" title="Verifiable PayID Protocol for Custodial Wallets and Exchanges">

<t>The Verifiable PayID protocol flow is similar to that of the Basic PayID protocol <xref target="PAYID-PROTOCOL"></xref> with the following modifications.</t>

<figure><artwork><![CDATA[
Sender  PayID client                                             PayID server    Receiver
  |           |                                                          |            |
  |PayID, etc.|                                                          |            |
  |---------->|                                                          |            |
  |           |     1.) POST /payment-setup-details request to PayID URL |            |
  |           |--------------------------------------------------------->|            |
  |           |     2.) 200 Ok                                           |            |
  |           |       Signed PaymentInformation response                 |            |
  |           |<---------------------------------------------------------|  Optional  |
  |           |                                                          |notification|
  |           |                                                          |----------->|
  |           |                                                          |            |
]]></artwork></figure>

<section anchor="step-1-preparing-the-http-request-to-payid-url-using-http-post-method" title="Step 1: Preparing the HTTP Request to PayID URL using HTTP POST Method">
<t>A verifiable PayID client issues a query using the HTTP <spanx style="verb">POST</spanx> method to the PayID URL with path parameter <spanx style="verb">payment-setup-details</spanx> and optional body parameters as described above.</t>

</section>
<section anchor="step-2-preparing-the-paymentinformation-response" title="Step 2: Preparing the PaymentInformation Response">
<t>In response, the PayID server returns a JSON representation of the <spanx style="verb">PaymentInformation</spanx> resource. <spanx style="verb">PaymentInformation</spanx> resource is the <spanx style="verb">signed</spanx> payment account(s) information message <xref target="PAYID-PROTOCOL"></xref> for the payment-network and environment requested by PayID client in the request <spanx style="verb">Accept</spanx> header field along with other required and optional metadata as <spanx style="verb">message</spanx> field in the <spanx style="verb">SignatureWrapper</spanx>.</t>

<section anchor="preparing-the-payment-accounts-information-message" title="Preparing the payment account(s) information message">
<t><list style="symbols">
  <t>Set <spanx style="verb">payId</spanx> to the value of the PayID in the client query. This is a required field in the Verifiable PayID protocol.</t>
  <t>Set <spanx style="verb">addresses</spanx> to the value as described in <xref target="PAYID-PROTOCOL"></xref></t>
  <t>Optionally set <spanx style="verb">memo</spanx> to any additional information.</t>
  <t><spanx style="verb">identity</spanx> field is optional.</t>
  <t>Optionally set <spanx style="verb">proofOfControlSignature</spanx> to the value as described in <xref target="PAYID-PROTOCOL"></xref>.</t>
</list></t>

</section>
<section anchor="preparing-signaturewrapper-message" title="Preparing SignatureWrapper message">
<t><list style="symbols">
  <t>Set <spanx style="verb">messageType</spanx> to <spanx style="verb">PaymentInformation</spanx>.</t>
  <t>Set <spanx style="verb">message</spanx> to the value of the payment account(s) information message as generated above.</t>
  <t>Set <spanx style="verb">publicKeyType</spanx> to one of the values described in the Section above.</t>
  <t>Set <spanx style="verb">publicKeyData</spanx> to the data corresponding to the value in <spanx style="verb">publicKeyType</spanx>.</t>
  <t>Set <spanx style="verb">publicKey</spanx> to the value of the public key of the signing endpoint (PayID server.)</t>
  <t>Sign the <spanx style="verb">message</spanx> using the hash algorithm and the signature scheme corresponding to the value in <spanx style="verb">publicKeyType</spanx></t>
  <t>Set <spanx style="verb">signature</spanx> to the result of the signature operation in the previous step.</t>
</list></t>

<t>Send the signed payment account(s) information message as <spanx style="verb">PaymentInformation</spanx> response to the client.</t>

</section>
</section>
<section anchor="step-3-parse-paymentinformation-response" title="Step 3: Parse PaymentInformation Response">
<t>If the PayID server returns a valid response, the response will contain one or more of the fields defined above. The PayID client will then:</t>

<t><list style="symbols">
  <t>Verify the <spanx style="verb">publicKey</spanx> using the information in the <spanx style="verb">publicKeyType</spanx> and <spanx style="verb">publicKeyData</spanx> in the response.</t>
  <t>Verify the signature retrieved from the <spanx style="verb">signature</spanx> field using the public key verified in the previous step.</t>
  <t>Retrieve payment account(s) information message from the <spanx style="verb">message</spanx> field of the <spanx style="verb">PaymentInformation</spanx> Response.</t>
</list></t>

<t>All the verification steps MUST pass. The PayID client proceeds to the next step only if the previous step passes, otherwise it generates the relevant Error message (//TBD).</t>

</section>
</section>
<section anchor="verifiable-payid-protocol-for-non-custodial-wallets-and-exchanges" title="Verifiable PayID Protocol for Non-Custodial Wallets and Exchanges">

<t>Pre-step at PayID owner's (non-custodial wallet's customer) device locally.
  For each <spanx style="verb">payment-network</spanx> and <spanx style="verb">environment</spanx> as described in <xref target="PAYID-PROTOCOL"></xref> that the PayID owner has a payment address for, generate the following payment account(s) information message
  * Set <spanx style="verb">payId</spanx> to the value of the PayID. This is a required field in the Verifiable PayID protocol.
  * Set <spanx style="verb">addresses</spanx> to the value as described in <xref target="PAYID-PROTOCOL"></xref>
  * Optionally set <spanx style="verb">memo</spanx> to any additional information.
  * <spanx style="verb">identity</spanx> field is TBD.
  * <spanx style="verb">proofOfControlSignature</spanx> is optional described in <xref target="PAYID-PROTOCOL"></xref> and is not required in this case.</t>

<t>For each payment account(s) information message, prepare <spanx style="verb">SignatureWrapper</spanx> message
  * Set <spanx style="verb">messageType</spanx> to <spanx style="verb">PaymentInformation</spanx>.
  * Set <spanx style="verb">message</spanx> to the value of payment account(s) information message as generated above.
  * Set <spanx style="verb">publicKeyType</spanx> to one of the values described in Section X.
  * Set <spanx style="verb">publicKeyData</spanx> to the data corresponding to the value in <spanx style="verb">publicKeyType</spanx>.
  * Set <spanx style="verb">publicKey</spanx> to the value of the public key of the signing endpoint (PayID server.)
  * Sign the <spanx style="verb">message</spanx> using the hash algorithm and the signature scheme corresponding to the value in <spanx style="verb">publicKeyType</spanx>
  * Set <spanx style="verb">signature</spanx> to the result of the signature operation in the previous step.</t>

<t>This signed payment account(s) information message is then securely transferred to the non-custodial PayID server and stored by the PayID server as a <spanx style="verb">PaymentInformation</spanx> resource.</t>

<section anchor="discussion-section-on-distributing-payid-owners-keys" title="Discussion Section on distributing PayID owner's keys">
<t>In this subsection, we discuss potential ways to distribute the keys of the PayID owner used to sign the message. Once we reach a consensus, it will be added to the relevant sections of this document and this subsection will be removed. Following are the two possible approaches:</t>

<section anchor="identity-field-in-payment-accounts-information-message" title="identity field in payment account(s) information message">
<t>The following table enumerates the possible ways to share the public key of PayID owner using <spanx style="verb">identity</spanx> field.</t>

<texttable>
      <ttcol align='left'>identity</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>Global Identifier (GiD) <xref target="GiD"></xref></c>
      <c>digital identifier</c>
      <c>Human Universally Unique Identifier (Human UUID) <xref target="HUUID"></xref></c>
      <c>digital identifier</c>
      <c>Digital Identifier (DID) <xref target="DID"></xref></c>
      <c>digital identifier</c>
      <c>Certificate</c>
      <c>attested certificate that associates digital identifier to PayID and public key</c>
      <c>URL</c>
      <c>URL for secure retrieval of public key of the PayID owner</c>
      <c>Public key</c>
      <c>out-of-band pre-shared public key between PayID client and PayID owner</c>
</texttable>

<t><list style="symbols">
  <t>Digital identifier: A global digital identifier that uniquely associates the <spanx style="verb">PayID owner's identity</spanx> as defined by the identifier (GiD, HUID, DID, etc.) to the <spanx style="verb">PayID</spanx> and <spanx style="verb">public key</spanx>. The PayID client can then verify the <spanx style="verb">public key</spanx> using the digital identifier. This could be a direct retrieval of the corresponding <spanx style="verb">public key</spanx> from a digital identity service provider if PayID is a part of that digital identifier.</t>
  <t>Certificate: An attested certificate that associates digital identifier such as GiD, Human UUID, DID, etc. to the <spanx style="verb">PayID</spanx> and <spanx style="verb">public key</spanx>.</t>
  <t>URL: A URL for secure retrieval of <spanx style="verb">public key</spanx> of the PayID owner.</t>
  <t>Pre-shared public Key: The public key that has been pre-shared out-of-band between the PayID client and PayID owner.</t>
</list></t>

</section>
<section anchor="embed-the-public-key-of-payid-owner-in-the-payid" title="Embed the public key of PayID owner in the PayID">
<t>PayID <xref target="PAYID-URI"></xref> could support non-custodial systems with a fairly simple extension to the protocol to run non-custodial PayID servers that could not be hacked or tricked into sending money to the wrong place. The idea is to reserve the hostname <spanx style="verb">pkh</spanx> for <spanx style="verb">public key hashes</spanx> and support a PayID format like <spanx style="verb">public_key_hash</spanx>$pkh.provider.domain. PayID client implementations would require that any <spanx style="verb">PaymentInformation</spanx> resource that resulted from the PayID of that form be signed with the <spanx style="verb">private key</spanx> corresponding to that <spanx style="verb">public key hash</spanx>. So only a <spanx style="verb">PaymentInformation</spanx> signed by the owner of the PayID would work.</t>

<t>The caveat is that the PayID format is not human-readable anymore. The solution is simple: the non-custodial wallets and exchanges would provide a non-human-readable PayID of the form <spanx style="verb">public_key_hash</spanx>$pkh.provider.domain, but the customers may get a human-readable PayID from another trusted service providers (say from their email provider) that maps to the non-human-readable PayID they got from their non-custodial service-provider. Non-custodial service-providers could even automate this process by allowing the user to choose a mapping provider.</t>

<t>// Details TBD</t>

</section>
</section>
<section anchor="step-1-preparing-http-request-to-payid-url-using-http-post-method" title="Step 1: Preparing HTTP Request to PayID URL using HTTP POST Method">
<t>Same as in the previous section.</t>

</section>
<section anchor="step-2-preparing-paymentinformation-response" title="Step 2: Preparing PaymentInformation Response">

<t>The PayID server MUST parse the request body. The protocol does not provide specification on how the PayID server MAY use this information.</t>

<t>If the PayID server were to proceed, the PayID server retrieves the pre-signed <spanx style="verb">PaymentInformation</spanx> response to the PayID client.</t>

</section>
<section anchor="step-3-parsing-the-paymentinformation-response" title="Step 3: Parsing the PaymentInformation Response">
<t>The PayID client follows the same verification steps as in the previous section. Details to be decided based on <spanx style="verb">identity</spanx> solution.</t>

</section>
</section>
<section anchor="example-use-of-the-verifiable-payid-protocol" title="Example Use of the Verifiable PayID Protocol">
<t>This section shows sample use of the Verifiable PayID protocol in several hypothetical scenarios.</t>

<section anchor="verifiable-payid-protocol-by-a-custodial-wallet-as-payid-server" title="Verifiable PayID Protocol by a Custodial Wallet as PayID server">
<t>Suppose Alice (sender) wishes to send a friend Bob (PayID owner) some XRP from a web-based wallet provider (PayID client) that Alice has an account on. Alice would log-in to the wallet provider and enter Bob's PayID (say, <spanx style="verb">bob$receiver.example.com</spanx>) into the wallet UI to start the payment.</t>

<t>The Wallet application would first discover the PayID URL for the PayID service-provider using one of the mechanisms described in PayID discovery protocol <xref target="PAYID-DISCOVERY"></xref>.</t>

<t>The Wallet application would then issue an HTTPS POST request:</t>

<figure><artwork><![CDATA[
 POST /users/bob/payment-setup-details HTTP/1.1
 Host: www.receiver.example.com
 Accept: application/xrpl-testnet+json
 PayID-version: 1.0

 {
  "identity": "TBD",
  "memo": "Any additional required information"
 }
]]></artwork></figure>

<t>Bob's wallet who is a custodial PayID server wallet might respond like this:</t>

<figure><artwork><![CDATA[
 HTTP/1.1 200 OK
 Content-Type: application/json
 Content-Length: 403
 PayID-version: 1.0
 Cache-Control: max-age=0
 Server: Apache/1.3.11
{
"messageType" : "PaymentInformation",
"message" :
 {
   "payId" : "bob$receiver.example.com",
   "addresses" :
   [
     {
       "paymentNetwork" : "xrpl",
       "environment" : "testnet",
       "addressDetailsType" : "CryptoAddressDetails",
       "addressDetails" : {
                    "address" : "XTVQWr6BhgBLW2jbFyqqufgq8T9eN7KresB684ZSHKQ3oDth"
            }
      }
    ],
    "memo" : "Additional optional Information",
    "proofOfControlSignature" :
    {
      "publicKey" : "sdkfhjasdvkakjnasdv",
      "payId" : "bob$receiver.example.com",
      "hashAlgorithm" : "SHA512",
      "signature" : "9743b52063cd84097a65d1633f5c74f5"
    }
 }
"publicKeyType" : "X509+SHA512",
"publicKeyData": [],
"publicKey" : "00:c9:22:69:31:8a:d6:6c:ea:da:c3:7f:2c:ac:a5:af:c0:02:ea:81:cb:65:b9:fd:0c:6d:46:5b:c9:1e:9d:3b:ef...",
"signature" : "8b:c3:ed:d1:9d:39:6f:af:40:72:bd:1e:18:5e:30:54:23:35..."
}
]]></artwork></figure>

<t>In the above example we see that Bob's custodial PayID server wallet returned a signed X-Address on XRPL testnet identified by PayID <spanx style="verb">bob$receiver.example.com</spanx>. This is because Alice's wallet asked for XRPL and testnet payment accounts corresponding to the PayID in the <spanx style="verb">Accept</spanx> header.</t>

<t>Alice's Wallet MAY then use the payment account information to make payments.</t>

</section>
<section anchor="verifiable-payid-protocol-by-a-non-custodial-wallet-as-payid-server" title="Verifiable PayID Protocol by a Non-Custodial Wallet as PayID Server">
<t>Consider the same scenario as above.</t>

<t>Bob's wallet who is a non-custodial PayID server might respond like this:</t>

<figure><artwork><![CDATA[
 HTTP/1.1 200 OK
 Content-Type: application/json
 Content-Length: 403
 PayID-version: 1.0
 Cache-Control: max-age=0
 Server: Apache/1.3.11
{
"messageType" : "PaymentInformation",
"message" :
 {
   "payId" : "bob$receiver.example.com",
   "addresses" :
   [
     {
       "paymentNetwork" : "xrpl",
       "environment" : "testnet",
       "addressDetailsType" : "CryptoAddressDetails",
       "addressDetails" : {
          "address" : "XTVQWr6BhgBLW2jbFyqqufgq8T9eN7KresB684ZSHKQ3oDth"
        }
      }
    ],
    "memo" : "Additional optional Information",
    "identity" : "TBD",
 }
"signature" : "TBD"
}
]]></artwork></figure>

<t>In the above example, the <spanx style="verb">PaymentInformation</spanx> resource is a pre-signed message with the off-ledger private keys of the PayID owner Bob. Bob's non-custodial wallet retrieves this response and sends it to the PayID client.</t>

<t>//TODO Add example for PayID owner's public key embedded in PayID.</t>

</section>
</section>
<section anchor="security-considerations" title="Security Considerations">
<t>This security considerations section only considers verifiable PayID clients and servers bound to implementations as defined in this document.</t>

<t>The security guarantees mentioned in <xref target="PAYID-PROTOCOL"></xref> applies to the Verifiable PayID protocol. In this section, we discuss a security model for the Verifiable PayID protocol.</t>

<section anchor="fully-malicious-adversary-model-for-payid-client-wallet-and-custodial-wallets-and-exchanges-as-payid-servers" title="Fully-Malicious Adversary Model for PayID Client Wallet and Custodial Wallets and Exchanges as PayID Servers">

<t>While the Verifiable PayID protocol operates between a PayID client and a PayID server, there are actually four parties to any payment. The other two parties are the sender of the payment whose funds are being transferred and the PayID owner or the receiver of the payment who the sender wishes to pay.</t>

<t>In the current security model, there is necessarily some existing trust between the sender and the sender's wallet. The sender's wallet is holding the sender's private keys and consequently their funds before the payment is made. Similarly, there is necessarily some existing trust between the receiver and their custodial wallet since the receiver has directed that the custodial wallet receive their funds.</t>

<t>The Verifiable PayID protocol provides a stronger security guarantee: The ideal scenario that we strive for is that the sender should be able to hold the PayID client wallet legally accountable if the institution provably mishandles their funds. Similarly, the PayID owner/receiver should be able to hold the PayID server wallet legally accountable if their funds are mishandled. However, this mechanism requires that it be possible for either wallet to establish that it acted properly and that the other wallet acted improperly.</t>

<t>Of course, the preferred outcome of any payment is that nothing goes wrong and both the sender and PayID owner/receiver of the payment are satisfied that the payment took place as agreed. A less desirable outcome is that the payment cannot take place for some reason and the sender still has their money and understands why the payment cannot take place.</t>

<t>While the protocol cannot possibly prevent the PayID client wallet from sending the funds to the wrong address or the PayID server wallet from receiving the funds but refusing to release them to the PayID owner/receiver, it is vital that the institutions not be able to plausibly blame each other for a failure where the sender has been debited but the PayID client/wallet has not been credited.</t>

<t>Accordingly, the security model of the Verifiable PayID protocol permits four acceptable outcomes:</t>

<t><list style="numbers">
  <t>The payment succeeds, the sender is debited, and the PayID owner/receiver is credited.</t>
  <t>The payment fails, the sender is not debited, and the PayID owner/receiver is not credited.</t>
  <t>The payment fails, the sender is debited, the PayID owner/receiver is not credited, and the sender can show that the PayID client wallet did not follow the protocol.</t>
  <t>The payment fails, the sender is debited, the PayID owner/receiver is not credited, and the sender can show the receiver that their PayID server wallet did not follow the protocol.</t>
</list></t>

<t>Again, the protocol cannot possibly prevent outcomes 3 or 4 because the PayID client wallet can always send the money to the wrong address and the PayID server wallet can always refuse to credit the PayID owner/receiver. It is, however, critical that the PayID client and PayID server wallets not need to trust each other to ensure that one of these four outcomes occurs and that they cannot point blame at each other.</t>

<section anchor="cryptographic-proofs" title="Cryptographic Proofs">

<t>//TODO</t>

</section>
</section>
<section anchor="fully-compromisable-custodial-payid-server-wallet-hotalways-online-systems-adding-another-layer-of-security" title="Fully Compromisable Custodial PayID Server Wallet (hot/always online systems): Adding another Layer of Security.">

<t>The Verifiable PayID protocol's security model assumes that the online servers can be physically or remotely compromised by an adversary. These are the most attractive attack vectors. There is sufficient evidence that hot/always online systems are more vulnerable.</t>

<t>There are multiple cryptographic operations that the PayID server wallet MUST perform to establish secure communication channels, to generate signed messages as verifiable cryptographic proofs, etc.</t>

<t>These operations have very different security requirements and compromising the cryptographic keys required for these operations have different security implications.</t>

<t><list style="symbols">
  <t>High-risk impersonation attack to steal funds: If the PayID server wallet’s cryptographic keys used to sign <spanx style="verb">PaymentInformation</spanx> resource are compromised, an attacker may impersonate as the PayID server wallet and sign malicious mappings (‘Receiver's PayID → attacker controlled payment address’) to send to the PayID client wallet. This may lead to indirection of funds by the PayID client wallet to the attacker-controlled address. Therefore, it is extremely important to keep these keys safe offline.</t>
  <t>Lower-risk impersonation attacks: An attacker can never steal funds if only cryptographic keys used to establish secure network connection between the PayID client wallet and PayID server wallet are compromised.</t>
</list></t>

<t>These differing security implications warrant a separation of generating cryptographically signed proofs and storing the cryptographic keys used to perform these two operations. Some observations that inform us on how we can deal with this are that:
  * Generating the cryptographic signatures on <spanx style="verb">PaymentInformation</spanx> resource need not be an online operation. This can be performed offline in a safe, cold system with a separate set of keys,</t>

<t><list style="symbols">
  <t>All other cryptographic operations need to be performed online, such as signing any additional information needed to fulfill the payment or establishing secure communication channels.</t>
</list></t>

<t>Based on these observations, we propose to maintain two separate systems (hot and cold) and two separate sets of cryptographic keys for the two operations.</t>

<t>We propose that the PayID client wallet and PayID server wallet SHOULD follow best practices to reduce the attack surface and be more robust.</t>

<t>//TODO Key Management sub-section.</t>

</section>
<section anchor="security-model-for-non-custodial-payid-server-wallets" title="Security Model for Non-Custodial PayID Server Wallets">

<t>In the current security model, non-custodial wallets do not store their customers’ keys on their servers. The customers hold their private keys on their device. There is a no trust requirement between the service provided by the non-custodial wallets and the customers of this service. Since the customers hold the private keys:
  * The wallets are not liable for any consequences coming from the lost, compromised or hacked private keys of the customers.
  * The non-custodial wallets do not require their customers to trust their servers in case wallets servers go malicious or are compromised.</t>

<t>The Verifiable PayID protocol preserves this trust model. For non-custodial PayID server wallets, this means that</t>

<t><list style="symbols">
  <t>On the receiving side of the payment (as a PayID server) non-custodial wallets have no liability on their end for providing <spanx style="verb">PaymentInformation</spanx>, that is, the <spanx style="verb">PayID --&gt; Payment Address</spanx> mappings for their customers that are signed with the private key of the non-custodial PayID server wallet. The PayID owners or the customers can generate this signed mapping with their own off-ledger private key locally on their app/device. The PayID client can easily verify this signature based on the trust relationship between the sender of the payment (PayID client wallet’s customer) and the receiver (non-custodial PayID server's wallet). The non-custodial PayID server wallet has no role whatsoever. This eliminates any risk of the non-custodial PayID server wallet having lost their private keys, going malicious, or getting hacked, etc. because if this happens then their customers might lose funds.</t>
</list></t>

</section>
</section>
<section anchor="privacy-considerations" title="Privacy Considerations">
<t>All privacy guarantees in the Privacy Considerations section of <xref target="PAYID-PROTOCOL"></xref> apply to the Verifiable PayID protocol and further address some of the privacy issues mentioned in <xref target="PAYID-PROTOCOL"></xref>.</t>

<section anchor="access-control" title="Access Control">
<t>PayID protocol MUST not be used to provide <spanx style="verb">PaymentInformation</spanx> or any other resources corresponding to a PayID unless providing that data via PayID protocol by the relevant PayID server was explicitly authorized by the PayID owner. If the PayID owner wishes to limit access to information, PayID servers MAY provide an interface by which PayID owners can select which information is exposed through the PayID server interface. For example, PayID servers MAY allow PayID owners to mark certain data as <spanx style="verb">public</spanx> and then utilize that marking as a means of determining what information to expose via PayID protocol. The PayID servers MAY also allow PayID owners to provide a whitelist of users who are authorized to access the specific information. In such a case, the PayID server MUST authenticate the PayID client. The additional <spanx style="verb">identity</spanx> field in the PayID client query request allows for this.</t>

</section>
</section>
<section anchor="iana-considerations" title="IANA Considerations">
<t>//TODO</t>

</section>
<section anchor="acknowledgments" title="Acknowledgments">
<t>//TODO</t>

</section>


  </middle>

  <back>

    <references title='Normative References'>

&RFC2119;
&RFC2818;
&RFC8446;
&RFC7258;
&RFC5280;
&RFC6979;
&RFC8422;
<reference anchor="DID" target="https://www.didalliance.org/">
  <front>
    <title>Digital Identity Alliance</title>
    <author >
      <organization></organization>
    </author>
    <date year="n.d."/>
  </front>
</reference>
<reference anchor="GiD" target="https://www.global.id/">
  <front>
    <title>Global identity</title>
    <author >
      <organization></organization>
    </author>
    <date year="n.d."/>
  </front>
</reference>
<reference anchor="HUUID" target="https://github.com/codetsunami/HumanUUID">
  <front>
    <title>Human Universally Unique Identifier</title>
    <author >
      <organization></organization>
    </author>
    <date year="n.d."/>
  </front>
</reference>
<reference anchor="PAYID-URI" target="https://tbd.example.com/">
  <front>
    <title>The 'payid' URI Scheme</title>
    <author initials="D." surname="Fuelling" fullname="David Fuelling">
      <organization></organization>
    </author>
    <date year="n.d."/>
  </front>
</reference>
<reference anchor="PAYID-DISCOVERY" >
  <front>
    <title>PayID Discovery</title>
    <author initials="D." surname="Fuelling" fullname="David Fuelling">
      <organization></organization>
    </author>
    <date year="n.d."/>
  </front>
</reference>
<reference anchor="PAYID-PROTOCOL" >
  <front>
    <title>PayID Protocol</title>
    <author initials="D." surname="Schwartz" fullname="David Schwartz">
      <organization></organization>
    </author>
    <date year="n.d."/>
  </front>
</reference>


    </references>

    <references title='Informative References'>

&RFC4732;


    </references>



  </back>

<!-- ##markdown-source:
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
2Sv/F2g6Seo1igAA

-->

</rfc>

